[{"title":"hexo博客搭建","url":"/flame/2022/06/24/hexo-build/","content":"<p>hexo + next 博客搭建，github actions 持续集成。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"依赖版本\"><a href=\"#依赖版本\" class=\"headerlink\" title=\"依赖版本\"></a>依赖版本</h2><ul>\n<li>hexo 6.2.0</li>\n<li>hexo-theme-next 7.8.0</li>\n<li>node 14.x</li>\n<li>git 2.36.1</li>\n<li>hexo-deployer-git 2.0.0</li>\n</ul>\n<h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h2><p>参照官网 <a href=\"https://hexo.io/zh-cn/docs/\">hexo</a></p>\n<h2 id=\"theme-next\"><a href=\"#theme-next\" class=\"headerlink\" title=\"theme-next\"></a>theme-next</h2><p>hexo根目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>删除themes主题下的 .git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -rf theme-next/.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h2><blockquote>\n<p>安装 hexo-deployer-git</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install hexo-deployer-git -s</span> </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置项目根目录_config.yml</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">&#x27;XXXX.git&#x27;</span> <span class=\"comment\"># 静态仓库</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&#x27;main&#x27;</span>   <span class=\"comment\"># 源码仓库的main分支用于部署</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>本地部署 或 github actions自动部署 </p>\n</blockquote>\n<h5 id=\"本地部署\"><a href=\"#本地部署\" class=\"headerlink\" title=\"本地部署\"></a>本地部署</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo generate &amp;&amp; hexo deploy</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"github-actions-部署-本地push到blog-source时，github-pages自动更新\"><a href=\"#github-actions-部署-本地push到blog-source时，github-pages自动更新\" class=\"headerlink\" title=\"github actions 部署 (本地push到blog-source时，github pages自动更新)\"></a>github actions 部署 (本地push到blog-source时，github pages自动更新)</h5><ul>\n<li>新建两个仓库，一个为 blog-source (源码仓库 public); 一个为blog(静态仓库 private);</li>\n<li>生成公钥和私钥，在path路径下，公钥私钥分别在文件 id_rsa.pub 和 id_rsa<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ssh-keygen -t rsa -f <span class=\"string\">&quot;path/id_rsa&quot;</span></span></span><br></pre></td></tr></table></figure></li>\n<li>进入 github 个人账户 <ul>\n<li>settings → SSH and GPG keys → New SSH key</li>\n<li>Title设置为 <code>ACTION_DEPLOY_KEY</code>，key为公钥</li>\n</ul>\n</li>\n<li>进入blog 仓库 <ul>\n<li>Settings → pages → 开启GitHub Pages</li>\n</ul>\n</li>\n<li>进入blog-source 仓库 <ul>\n<li>Settings → Secrets → Actions → New secret</li>\n<li>Name为 <code>ACTION_DEPLOY_KEY</code>，value为私钥</li>\n<li>Actions → new workflow → set up a workflow yourself</li>\n</ul>\n</li>\n</ul>\n<p>workflow  mian.yml 文件配置如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"string\">Blog</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"comment\">#main分支有新的push时执行</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span> </span><br><span class=\"line\">    <span class=\"attr\">branches:</span>    </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;main&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span> <span class=\"comment\"># 一项叫做build的任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span> <span class=\"comment\"># 在最新版的Ubuntu系统下运行</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span>  <span class=\"comment\"># 将仓库内main分支的内容下载到工作目录 配置脚本来自  https://github.com/actions/checkout</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">ref:</span> <span class=\"string\">main</span></span><br><span class=\"line\">          </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Use</span> <span class=\"string\">Node.js</span> <span class=\"number\">14.</span><span class=\"string\">x</span> <span class=\"comment\"># 配置Node环境</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span> <span class=\"comment\"># 配置脚本来自 https://github.com/actions/setup-node</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">node-version:</span> <span class=\"string\">&quot;14.x&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Hexo</span> <span class=\"string\">env</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"attr\">ACTION_DEPLOY_KEY:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.ACTION_DEPLOY_KEY</span> <span class=\"string\">&#125;&#125;</span> <span class=\"comment\"># ACTION_DEPLOY_KEY 私有仓库私钥的key</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">        # set up private key for deploy</span></span><br><span class=\"line\"><span class=\"string\">        mkdir -p ~/.ssh/</span></span><br><span class=\"line\"><span class=\"string\">        echo &quot;$ACTION_DEPLOY_KEY&quot; | tr -d &#x27;\\r&#x27; &gt; ~/.ssh/id_rsa # 配置秘钥</span></span><br><span class=\"line\"><span class=\"string\">        chmod 600 ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class=\"line\"><span class=\"string\">        # ssh-keyscan your-server-ip.com &gt;&gt; ~/.ssh/known_hosts # 如果需要 sftp，则还需要注释掉一行</span></span><br><span class=\"line\"><span class=\"string\">        # set git infomation</span></span><br><span class=\"line\"><span class=\"string\">        git config --global init.defaultBranch main</span></span><br><span class=\"line\"><span class=\"string\">        git config --global user.name &#x27;&#x27; # 自己的名字</span></span><br><span class=\"line\"><span class=\"string\">        git config --global user.email &#x27;&#x27; # 自己的邮箱</span></span><br><span class=\"line\"><span class=\"string\">        # install dependencies</span></span><br><span class=\"line\"><span class=\"string\">        npm i -g hexo-cli # 安装hexo</span></span><br><span class=\"line\"><span class=\"string\">        npm i</span></span><br><span class=\"line\"><span class=\"string\"></span>  </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">        # publish</span></span><br><span class=\"line\"><span class=\"string\">        hexo generate &amp;&amp; hexo deploy # 执行部署程序</span></span><br></pre></td></tr></table></figure>","categories":["hexo"],"tags":["hexo","github actions"]},{"title":"I/O模型","url":"/flame/2021/10/22/io-model/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文是UNIX领域5种常见的I&#x2F;O模型的总结，这5种I&#x2F;O模型是: </p>\n<ul>\n<li><p>阻塞式I&#x2F;O模型 </p>\n</li>\n<li><p>⾮阻塞式I&#x2F;O模型 </p>\n</li>\n<li><p>I&#x2F;O复⽤模型   </p>\n</li>\n<li><p>信号驱动式I&#x2F;O模型 </p>\n</li>\n<li><p>异步I&#x2F;O模型</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"函数recvfrom约定\"><a href=\"#函数recvfrom约定\" class=\"headerlink\" title=\"函数recvfrom约定\"></a>函数recvfrom约定</h2><p>为了方便描述, 把recvfrom函数抽象为某种执行I&#x2F;O操作的系统调⽤api ,  视为应用程序和内核的交互 (系统调用会从在应⽤进程空间中运⾏切换到在内核空间中运⾏，⼀段时间之 后再切换回来)</p>\n<br/>\n\n<h2 id=\"阻塞式I-x2F-O模型\"><a href=\"#阻塞式I-x2F-O模型\" class=\"headerlink\" title=\"阻塞式I&#x2F;O模型\"></a>阻塞式I&#x2F;O模型</h2><p><img src=\"/flame/images/io-model-blocking-io.png\" alt=\"阻塞式I/O模型\"></p>\n<p>进程调⽤recvfrom ，数据报到达且被复制到应⽤进程的缓冲区中或者发⽣错误时,   系统调⽤才返回。</p>\n<br/>\n\n<h2 id=\"非阻塞式I-x2F-O模型\"><a href=\"#非阻塞式I-x2F-O模型\" class=\"headerlink\" title=\"非阻塞式I&#x2F;O模型\"></a>非阻塞式I&#x2F;O模型</h2><br/>\n\n<p><img src=\"/flame/images/io-model-nonblocking-io.png\" alt=\"非阻塞式I/O模型\"></p>\n<p>进程会把⼀个套接字设置成⾮阻塞,  是在通知内核：当所请求的I&#x2F;O操作没有完成时，不要把本进程投⼊睡眠，⽽是返回⼀个错误。</p>\n<p>前三次recvfrom调⽤是应⽤进程轮询(polling)调用, 因为没有数据可返回，因此内核转⽽⽴即返回⼀个错误。第四次调⽤recvfrom时已有⼀个数据报准备好， 它被复制到应⽤进程缓冲区，于是recvfrom成功返回,  进程可以接着处理数据</p>\n<br/>\n\n\n\n\n\n<h2 id=\"I-x2F-O复⽤模型\"><a href=\"#I-x2F-O复⽤模型\" class=\"headerlink\" title=\"I&#x2F;O复⽤模型\"></a>I&#x2F;O复⽤模型</h2><p><img src=\"/flame/images/io-model-io-multiplexing.png\" alt=\"I/O复用模型\"></p>\n<p>进程阻塞于select调⽤，等待数据报套接字变为可读。 当select返回套接字可读这⼀条件时，进程调⽤recvfrom把所读数据报复制到应⽤进程缓冲区。</p>\n<p>对比阻塞式I&#x2F;O模型，I&#x2F;O复用模型的劣势是使⽤select需要两个⽽不是单个系统调⽤，优势在于我们可以等待多个描述符就绪。</p>\n<p>另外，类似于select的系统调用还有poll、epoll</p>\n<h2 id=\"信号驱动式I-x2F-O模型\"><a href=\"#信号驱动式I-x2F-O模型\" class=\"headerlink\" title=\"信号驱动式I&#x2F;O模型\"></a>信号驱动式I&#x2F;O模型</h2><p>使⽤信号让内核在描述符就绪时发送信号通知进程，这种模型被称为信号驱动式I&#x2F;O模型</p>\n<p><img src=\"/flame/images/io-model-signal-driven-io.png\" alt=\"信号驱动式I/O模型\"></p>\n<p>程序⾸先开启套接字的信号驱动式I&#x2F;O功能，并通过系统调⽤安装⼀个信号处理函数，该系统调⽤将⽴即返回，进程无阻塞地继续⼯作。</p>\n<p>内核会在数据报准备好被读取时，为进程产⽣⼀个SIGIO信号，进程随后可以进行处理数据报的读取操作。这个操作既可以在信号处理函数中调⽤recvfrom读取数据报，并通知主循环数据已准备好待处理， 也可以⽴即通知主循环，让它读取数据报。</p>\n<p>这种模型的优势在于等待数据报到达期间进程不被阻塞。</p>\n<h2 id=\"异步I-x2F-O模型\"><a href=\"#异步I-x2F-O模型\" class=\"headerlink\" title=\"异步I&#x2F;O模型\"></a>异步I&#x2F;O模型</h2><p><img src=\"/flame/images/io-model-asynchronous-io.png\" alt=\"异步I/O模型\"></p>\n<p>异步IO函数的⼯作机制是：告知内核启动某个操作，并让内核在整个操作（包括将数据从内核复制到我们⾃⼰的缓冲区）完成后通知进程</p>\n<p>和信号驱动模型的主要区别在于: 信号驱动式I&#x2F;O是由内核通知我们何时可以启动⼀个I&#x2F;O操作，⽽异步I&#x2F;O模型是由内核通知我们 I&#x2F;O操作何时完成。</p>\n<h2 id=\"5种I-x2F-O模型的⽐较\"><a href=\"#5种I-x2F-O模型的⽐较\" class=\"headerlink\" title=\"5种I&#x2F;O模型的⽐较\"></a>5种I&#x2F;O模型的⽐较</h2><br/>\n\n<p><img src=\"/flame/images/io-model-comparison.png\" alt=\"5种I/O模型的抽象比较\"></p>\n<h4 id=\"POSIX定义\"><a href=\"#POSIX定义\" class=\"headerlink\" title=\"POSIX定义\"></a>POSIX定义</h4><p>POSIX把这两个术语定义如下： </p>\n<ul>\n<li><p>​       <strong>同步I&#x2F;O操作</strong>:导致请求进程阻塞，直到I&#x2F;O 操作完成； </p>\n</li>\n<li><p>​       <strong>异步I&#x2F;O操作</strong>:不导致请求进程阻塞。</p>\n<p>那么, 根据POSIX的定义, 在<strong>阻塞式I&#x2F;O模型</strong>、<strong>⾮阻塞式I&#x2F;O模型</strong>、<strong>I&#x2F;O复⽤模型</strong>和<strong>信号驱动式I&#x2F;O模型</strong>中, 真正的 I&#x2F;O操作（ recvfrom）阻塞了进程, 所以这4种模型是同步I&#x2F;O。  在<strong>异步I&#x2F;O模型</strong>中, 真正的 I&#x2F;O操作（ recvfrom）没有阻塞进程, 所以是异步I&#x2F;O.</p>\n</li>\n</ul>\n<h4 id=\"同步和阻塞的区别\"><a href=\"#同步和阻塞的区别\" class=\"headerlink\" title=\"同步和阻塞的区别\"></a>同步和阻塞的区别</h4><p>一般而言,可以把IO操作看作两步,  第一步是发起IO的请求, 第二步是实际的IO操作</p>\n<ul>\n<li><p><strong>阻塞IO和非阻塞IO的区别</strong>在于第一步操作是否阻塞 :</p>\n<p>如果发起的IO请求阻塞到一直到请求完成, 是传统的阻塞IO。</p>\n<p>如果发起的IO请求不阻塞，是非阻塞IO。</p>\n</li>\n<li><p><strong>同步IO和异步IO的区别</strong>在于第二步操作是否阻塞：</p>\n<p>如果实际的IO操作阻塞了进程，就是同步IO。<strong>阻塞式I&#x2F;O模型</strong>、<strong>⾮阻塞式I&#x2F;O模型</strong>、<strong>I&#x2F;O复⽤模型</strong>和<strong>信号驱动式I&#x2F;O模型</strong> 都是同步IO.</p>\n<p>如果实际的IO操作不阻塞进程,   而是操作系统帮用户做完实际的IO操作后再将结果返回给用户, 那么就是异步IO。<strong>异步I&#x2F;O模型</strong>属于异步I&#x2F;O.</p>\n</li>\n</ul>\n","categories":["系统","I/O模型"],"tags":["nio"]},{"title":"算法之题目集","url":"/flame/2021/11/21/algorithms/algorithms-questions/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>刷题之算法题目</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"数组双指针\"><a href=\"#数组双指针\" class=\"headerlink\" title=\"数组双指针\"></a>数组双指针</h1><p>⼆分搜索 34. 在排序数组中查找元素的第⼀个和最后⼀个位置 704. ⼆分查找 354. 俄罗斯套娃信封问题 392. 判断⼦序列 793. 阶乘函数后 K 个零 875. 爱吃⾹蕉的珂珂 1011. 在 D 天内送达包裹的能⼒ </p>\n<p>滑动窗⼝ 3. ⽆重复字符的最⻓⼦串 76. 最⼩覆盖⼦串 438. 找到字符串中所有字⺟异位词 567. 字符串的排列 239. 滑动窗⼝最⼤值 </p>\n<p>其他 26. 删除有序数组中的重复项 27. 移除元素 283. 移动零 42. 接⾬⽔ 986. 区间列表的交集 870. 优势洗牌 15. 三数之和 18. 四数之和</p>\n<h1 id=\"链表双指针\"><a href=\"#链表双指针\" class=\"headerlink\" title=\"链表双指针\"></a>链表双指针</h1><p>链表双指针 19. 删除链表的倒数第 N 个结点 21. 合并两个有序链表 23. 合并 K 个升序链表 141. 环形链表 142. 环形链表 II 160. 相交链表 876. 链表的中间结点 25. K 个⼀组翻转链表 83. 删除排序链表中的重复元素 92. 反转链表 II 234. 回⽂链表</p>\n<h1 id=\"前缀和\"><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h1><p>前缀和 303. 区域和检索 - 数组不可变 304. ⼆维区域和检索 - 矩阵不可变 560. 和为 K 的⼦数组</p>\n<h1 id=\"差分数组\"><a href=\"#差分数组\" class=\"headerlink\" title=\"差分数组\"></a>差分数组</h1><p>差分数组 370. 区间加法 1094. 拼⻋ 1109. 航班预订统计</p>\n<h1 id=\"队列-x2F-栈算法\"><a href=\"#队列-x2F-栈算法\" class=\"headerlink\" title=\"队列&#x2F;栈算法\"></a>队列&#x2F;栈算法</h1><p>队列&#x2F;栈算法 20. 有效的括号 921. 使括号有效的最少添加 1541. 平衡括号字符串的最少插⼊次数 225. ⽤队列实现栈 232. ⽤栈实现队列 22. 括号⽣成 239. 滑动窗⼝最⼤值</p>\n<h1 id=\"⼆叉堆\"><a href=\"#⼆叉堆\" class=\"headerlink\" title=\"⼆叉堆\"></a>⼆叉堆</h1><p>⼆叉堆 21. 合并两个有序链表 215. 数组中的第 K 个最⼤元素 295. 数据流的中位数</p>\n<h1 id=\"数据结构设计\"><a href=\"#数据结构设计\" class=\"headerlink\" title=\"数据结构设计\"></a>数据结构设计</h1><p>数据结构设计 146. LRU 缓存机制 341. 扁平化嵌套列表迭代器 380. O(1) 时间插⼊、删除和获取随机元素 460. LFU 缓存 895. 最⼤频率栈</p>\n<h4 id=\"⼆叉树\"><a href=\"#⼆叉树\" class=\"headerlink\" title=\"⼆叉树\"></a>⼆叉树</h4><p>⼆叉树 105. 从前序与中序遍历序列构造⼆叉树 106. 从中序与后序遍历序列构造⼆叉树 654. 最⼤⼆叉树 111. ⼆叉树的最⼩深度 114. ⼆叉树展开为链表 116. 填充每个节点的下⼀个右侧节点指针 226. 翻转⼆叉树 222. 完全⼆叉树的节点个数 297. ⼆叉树的序列化与反序列化 341. 扁平化嵌套列表迭代器 652. 寻找重复的⼦树 </p>\n<h1 id=\"⼆叉搜索树\"><a href=\"#⼆叉搜索树\" class=\"headerlink\" title=\"⼆叉搜索树\"></a>⼆叉搜索树</h1><p>⼆叉搜索树 95. 不同的⼆叉搜索树 II 96. 不同的⼆叉搜索树 98. 验证⼆叉搜索树 450. 删除⼆叉搜索树中的节点 700. ⼆叉搜索树中的搜索 701. ⼆叉搜索树中的插⼊操作 230. ⼆叉搜索树中第 K ⼩的元素 538. 把⼆叉搜索树转换为累加树 1038. 把⼆叉搜索树转换为累加树 1373. ⼆叉搜索⼦树的最⼤键值和</p>\n<h1 id=\"图论算法\"><a href=\"#图论算法\" class=\"headerlink\" title=\"图论算法\"></a>图论算法</h1><p>图的遍历 797. 所有可能的路径 </p>\n<p>⼆分图 785. 判断⼆分图 886. 可能的⼆分法 </p>\n<p>环检测&#x2F;拓扑排序 207. 课程表 210. 课程表 II </p>\n<p>并查集算法 130. 被围绕的区域 990. 等式⽅程的可满⾜性 </p>\n<p>最⼩⽣成树 261. 以图判树 1135. 最低成本联通所有城市 1584. 连接所有点的最⼩费⽤ </p>\n<p>最短路径 743. ⽹络延迟时间 1514. 概率最⼤的路径 1631. 最⼩体⼒消耗路径</p>\n<h1 id=\"回溯算法\"><a href=\"#回溯算法\" class=\"headerlink\" title=\"回溯算法\"></a>回溯算法</h1><p>回溯算法 22. 括号⽣成 37. 解数独 46. 全排列 77. 组合 78. ⼦集 51. N 皇后 494. ⽬标和 698. 划分为 k 个相等的⼦集 </p>\n<h1 id=\"DFS-算法\"><a href=\"#DFS-算法\" class=\"headerlink\" title=\"DFS 算法\"></a>DFS 算法</h1><p>DFS 算法 130. 被围绕的区域 200. 岛屿数量 694. 不同的岛屿数量 695. 岛屿的最⼤⾯积 1020. ⻜地的数量 1254. 统计封闭岛屿的数⽬ 1905. 统计⼦岛屿</p>\n<h1 id=\"BFS-算法\"><a href=\"#BFS-算法\" class=\"headerlink\" title=\"BFS 算法\"></a>BFS 算法</h1><p>BFS 算法 111. ⼆叉树的最⼩深度 752. 打开转盘锁 773. 滑动谜题</p>\n<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><h2 id=\"⼀维-DP\"><a href=\"#⼀维-DP\" class=\"headerlink\" title=\"⼀维 DP\"></a>⼀维 DP</h2><p>⼀维 DP 45. 跳跃游戏 II 55. 跳跃游戏 53. 最⼤⼦序和 198. 打家劫舍 213. 打家劫舍 II 337. 打家劫舍 III 300. 最⻓递增⼦序列 322. 零钱兑换 354. 俄罗斯套娃信封问题</p>\n<h2 id=\"⼆维-DP\"><a href=\"#⼆维-DP\" class=\"headerlink\" title=\"⼆维 DP\"></a>⼆维 DP</h2><p>⼆维 DP 10. 正则表达式匹配 64. 最⼩路径和 72. 编辑距离 121. 买卖股票的最佳时机 122. 买卖股票的最佳时机 II 123. 买卖股票的最佳时机 III 188. 买卖股票的最佳时机 IV 309. 最佳买卖股票时机含冷冻期 714. 买卖股票的最佳时机含⼿续费 174. 地下城游戏 312. 戳⽓球 416. 分割等和⼦集 494. ⽬标和  \\514. ⾃由之路 518. 零钱兑换 II 583. 两个字符串的删除操作 712. 两个字符串的最⼩ ASCII 删除和 1143. 最⻓公共⼦序列 787. K 站中转内最便宜的航班 887. 鸡蛋掉落 931. 下降路径最⼩和</p>\n<h2 id=\"背包问题\"><a href=\"#背包问题\" class=\"headerlink\" title=\"背包问题\"></a>背包问题</h2><p>背包问题 416. 分割等和⼦集 494. ⽬标和 518. 零钱兑换 II</p>\n<h1 id=\"经典算法\"><a href=\"#经典算法\" class=\"headerlink\" title=\"经典算法\"></a>经典算法</h1><h2 id=\"数学算法\"><a href=\"#数学算法\" class=\"headerlink\" title=\"数学算法\"></a>数学算法</h2><p>数学算法 77. 组合 78. ⼦集 134. 加油站 136. 只出现⼀次的数字 191. 位 1 的个数 231. 2 的幂 172. 阶乘后的零 793. 阶乘函数后 K 个零 204. 计数质数 268. 丢失的数字 292. Nim 游戏 319. 灯泡开关 877. ⽯⼦游戏 295. 数据流的中位数 372. 超级次⽅ 382. 链表随机节点 398. 随机数索引 391. 完美矩形 509. 斐波那契数 645. 错误的集合 710. ⿊名单中的随机数</p>\n<h2 id=\"区间问题\"><a href=\"#区间问题\" class=\"headerlink\" title=\"区间问题\"></a>区间问题</h2><p>区间问题 56. 合并区间 986. 区间列表的交集 1288. 删除被覆盖区间 435. ⽆重叠区间 452. ⽤最少数量的箭引爆⽓球  1024. 视频拼接</p>\n","categories":["algorithms","questions"],"tags":["algorithms"]},{"title":"算法和数据结构","url":"/flame/2021/11/21/algorithms/algorithms/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>算法和数据结构</p>\n<span id=\"more\"></span>\n\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><p><strong>存储⽅式</strong><br>两种基本的存储：顺序存储和链式存储</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>顺序存储</th>\n<th>链式存储</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>基础结构</td>\n<td>数组</td>\n<td>链表</td>\n</tr>\n<tr>\n<td>连续性</td>\n<td>一次分配一块连续的内存空间</td>\n<td>元素间不连续，通过指针指向下一个元素</td>\n</tr>\n<tr>\n<td>扩容策略</td>\n<td>重新分配⼀块更⼤的空间，再把旧空间数据全部复制过去，回收旧空间，时间复杂度O(N)</td>\n<td>通过指针指向⼀个元素的位置，不需要扩容</td>\n</tr>\n<tr>\n<td>查找元素</td>\n<td>随机访问；根据索引定位数据位置进行快速访问</td>\n<td>不能随机访问；无法根据索引定位数据，通过指针的前驱或后驱定位数据</td>\n</tr>\n<tr>\n<td>插入或删除元素</td>\n<td>搬移数据以保持连续，时间复杂度 O(N)</td>\n<td>已知某⼀元素的前驱和后驱，操作指针即可删除该元素或者插⼊新元素，时间复杂度 O(1)</td>\n</tr>\n</tbody></table>\n<p><strong>常见的数据结构</strong>：散列表、栈、队列、堆、树、图<br><strong>树</strong>:    二叉树、⼆叉搜索树、AVL 树、红⿊树、区间树、B 树</p>\n<p><strong>基本操作</strong></p>\n<ul>\n<li><p>增删改查</p>\n</li>\n<li><p>遍历数据:  迭代线性数据结构 ，递归非线性数据结构</p>\n</li>\n</ul>\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><h2 id=\"数组前缀和\"><a href=\"#数组前缀和\" class=\"headerlink\" title=\"数组前缀和\"></a>数组前缀和</h2><p>适用: 原始数组不会被修改的情况下，快速、频繁地计算⼀个索引区间内的元素之和</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>题目</th>\n<th>链接</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>LeetCode 303</td>\n<td>区域和检索 - 数组不可变（中等）</td>\n<td><a href=\"https://leetcode-cn.com/problems/range-sum-query-immutable/\">链接</a></td>\n</tr>\n<tr>\n<td>LeetCode 304</td>\n<td>⼆维区域和检索 - 矩阵不可变（中等)</td>\n<td><a href=\"https://leetcode-cn.com/problems/range-sum-query-2d-immutable/\">链接</a></td>\n</tr>\n<tr>\n<td>LeetCode 560</td>\n<td>和为K的⼦数组（中等）</td>\n<td><a href=\"https://leetcode-cn.com/problems/subarray-sum-equals-k/\">链接</a></td>\n</tr>\n</tbody></table>\n<h2 id=\"差分数组\"><a href=\"#差分数组\" class=\"headerlink\" title=\"差分数组\"></a>差分数组</h2><p>频繁对原始数组的某个区间的元素进⾏增减。</p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>链接</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Leetcode  370. 区间加法（中等）</td>\n<td><a href=\"https://leetcode-cn.com/problems/range-addition/\">链接</a></td>\n</tr>\n<tr>\n<td>Leetcode  1109. 航班预订统计（中等）</td>\n<td><a href=\"https://leetcode-cn.com/problems/corporate-flight-bookings/\">链接</a></td>\n</tr>\n<tr>\n<td>Leetcode  1094. 拼⻋（中等）</td>\n<td><a href=\"https://leetcode-cn.com/problems/car-pooling/\">链接</a></td>\n</tr>\n</tbody></table>\n<h2 id=\"原地修改数组\"><a href=\"#原地修改数组\" class=\"headerlink\" title=\"原地修改数组\"></a>原地修改数组</h2><p>在原地修改数组，避免数据的搬移</p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>26.删除有序数组中的重复项（简单）</td>\n<td></td>\n</tr>\n<tr>\n<td>83.删除排序链表中的重复元素（简单） ）</td>\n<td></td>\n</tr>\n<tr>\n<td>27.移除元素（简单</td>\n<td></td>\n</tr>\n<tr>\n<td>283.移动零（简单）</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><p><a href=\"https://mp.weixin.qq.com/s/Nh6jxQtO-xOT_WuX-B5w3Q\">双指针技巧</a> 分为两类，一类是「快慢指针」，一类是「左右指针」。</p>\n<p>快慢指针主要解决链表中的问题，比如典型的判定链表中是否包含环，快慢指针一般都初始化指向链表的头结点<code>head</code>，前进时快指针<code>fast</code>在前，慢指针<code>slow</code>在后，巧妙解决一些链表中的问题。</p>\n<p>左右指针主要解决数组（或者字符串）中的问题，比如二分查找，在数组中实际是指两个索引值，一般初始化为<code>left = 0, right = nums.length - 1</code>。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247485141&idx=1&sn=0e4583ad935e76e9a3f6793792e60734&chksm=9bd7f8ddaca071cbb7570b2433290e5e2628d20473022a5517271de6d6e50783961bebc3dd3b&scene=21#wechat_redirect\">滑动窗口技巧</a> 主要适用于解决⼦串、⼦数组问题。</p>\n<p><a href=\"https://mp.weixin.qq.com/s/uA2suoVykENmCQcKFMOSuQ\">二分搜索</a>  &amp;&amp; <a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247485044&idx=1&sn=e6b95782141c17abe206bfe2323a4226&chksm=9bd7f87caca0716aa5add0ddddce0bfe06f1f878aafb35113644ebf0cf0bfe51659da1c1b733&scene=21#wechat_redirect\">二分查找</a>   :在有序的前提下进行搜索，常⽤的⼆分查找场景：寻找⼀个数、寻找左侧边界、寻找右侧边界</p>\n<p><strong>快慢指针</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Leetcode 141</td>\n<td>链表中是否含有环</td>\n</tr>\n<tr>\n<td></td>\n<td>已知链表中含有环，返回这个环的起始位置</td>\n</tr>\n<tr>\n<td>Leetcode 876</td>\n<td>寻找链表的中点</td>\n</tr>\n<tr>\n<td>Leetcode 19</td>\n<td>寻找链表的倒数第<code>n</code>个元素</td>\n</tr>\n</tbody></table>\n<p><strong>左右指针</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Leetcode 167</td>\n<td>两数之和II</td>\n</tr>\n<tr>\n<td>Leetcode 344</td>\n<td>反转数组</td>\n</tr>\n</tbody></table>\n<p><strong>滑动窗口</strong> </p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Leetcode 76</td>\n<td>最⼩覆盖⼦串（困难）</td>\n</tr>\n<tr>\n<td>Leetcode 567</td>\n<td>字符串的排列（中等）</td>\n</tr>\n<tr>\n<td>Leetcode 438</td>\n<td>找到字符串中所有字⺟异位词（中等）</td>\n</tr>\n<tr>\n<td>Leetcode 3</td>\n<td>⽆重复字符的最⻓⼦串（中等）</td>\n</tr>\n<tr>\n<td>Leetcode 239</td>\n<td>滑动窗⼝最⼤值</td>\n</tr>\n</tbody></table>\n<p><strong>二分搜索</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Leetcode 704</td>\n<td>⼆分查找（简单）</td>\n</tr>\n<tr>\n<td>Leetcode 34</td>\n<td>在排序数组中查找元素的第⼀个和最后⼀个位置（中等）</td>\n</tr>\n<tr>\n<td>Leetcode 875</td>\n<td>爱吃⾹蕉的珂珂（中等）</td>\n</tr>\n<tr>\n<td>Leetcode 1011</td>\n<td>在D天内送达包裹的能⼒（中等）</td>\n</tr>\n<tr>\n<td>Leetcode 793</td>\n<td>阶乘函数后 K 个零</td>\n</tr>\n<tr>\n<td>Leetcode 392</td>\n<td>判断⼦序列</td>\n</tr>\n<tr>\n<td>Leetcode 354</td>\n<td>俄罗斯套娃信封问题</td>\n</tr>\n</tbody></table>\n<p><strong>双指针-其他</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Leetcode 26</td>\n<td>删除有序数组中的重复项</td>\n</tr>\n<tr>\n<td>Leetcode 27</td>\n<td>移除元素</td>\n</tr>\n<tr>\n<td>Leetcode 283</td>\n<td>移动零</td>\n</tr>\n<tr>\n<td>Leetcode 42</td>\n<td>接⾬⽔</td>\n</tr>\n<tr>\n<td>Leetcode 986</td>\n<td>区间列表的交集</td>\n</tr>\n<tr>\n<td>Leetcode 870</td>\n<td>优势洗牌</td>\n</tr>\n<tr>\n<td>Leetcode 15</td>\n<td>三数之和</td>\n</tr>\n<tr>\n<td>Leetcode 18</td>\n<td>四数之和</td>\n</tr>\n</tbody></table>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>19.删除链表的倒数第 N 个结点</td>\n</tr>\n<tr>\n<td></td>\n<td>21. 合并两个有序链表</td>\n</tr>\n<tr>\n<td></td>\n<td>23. 合并K 个升序链表</td>\n</tr>\n<tr>\n<td></td>\n<td>141. 环形链表</td>\n</tr>\n<tr>\n<td></td>\n<td>142. 环形链表 II</td>\n</tr>\n<tr>\n<td></td>\n<td>160. 相交链表</td>\n</tr>\n<tr>\n<td></td>\n<td>876. 链表的中间结点</td>\n</tr>\n<tr>\n<td></td>\n<td>25. K 个⼀组翻转链表</td>\n</tr>\n<tr>\n<td></td>\n<td>83. 删除排序链表中的重复元素</td>\n</tr>\n<tr>\n<td></td>\n<td>92. 反转链表 II     <strong>链表操作:迭代 and 递归对比</strong></td>\n</tr>\n<tr>\n<td></td>\n<td>234. 回⽂链表</td>\n</tr>\n</tbody></table>\n<h2 id=\"队列-amp-amp-栈\"><a href=\"#队列-amp-amp-栈\" class=\"headerlink\" title=\"队列&amp;&amp;栈\"></a>队列&amp;&amp;栈</h2><p><strong>互实现</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>225. ⽤队列实现栈</td>\n</tr>\n<tr>\n<td></td>\n<td>232. ⽤栈实现队列</td>\n</tr>\n</tbody></table>\n<p><strong>括号题⽬</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>20.有效的括号</td>\n</tr>\n<tr>\n<td></td>\n<td>921. 使括号有效的最少添加</td>\n</tr>\n<tr>\n<td></td>\n<td>1541. 平衡括号字符串的最少插⼊次数</td>\n</tr>\n</tbody></table>\n<p><strong>单调栈</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>496.下⼀个更⼤元素I（简单）</td>\n</tr>\n<tr>\n<td></td>\n<td>503.下⼀个更⼤元素II（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>739.每⽇温度（中等）</td>\n</tr>\n</tbody></table>\n<p><strong>单调队列结构</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>22. 括号⽣成</td>\n</tr>\n<tr>\n<td></td>\n<td>239. 滑动窗⼝最⼤值</td>\n</tr>\n</tbody></table>\n<p><strong>数组去重</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>316.去除重复字⺟（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>1081.不同字符的最⼩⼦序列（中等）</td>\n</tr>\n</tbody></table>\n<h2 id=\"基础设计\"><a href=\"#基础设计\" class=\"headerlink\" title=\"基础设计\"></a>基础设计</h2><table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>146.LRU 缓存机制</td>\n<td><a href=\"https://leetcode-cn.com/problems/lru-cache/\">LRU 缓存机制</a></td>\n</tr>\n<tr>\n<td></td>\n<td>460. LFU 缓存</td>\n</tr>\n<tr>\n<td></td>\n<td>380.常数时间插⼊、删除和获取随机元素（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>710.⿊名单中的随机数（困难）</td>\n</tr>\n<tr>\n<td></td>\n<td>295.数据流的中位数（困难）</td>\n</tr>\n</tbody></table>\n<h1 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h1><p>递归遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">traverse</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 前序遍历代码位置</span></span><br><span class=\"line\"> traverse(root.left);</span><br><span class=\"line\"> <span class=\"comment\">// 中序遍历代码位置</span></span><br><span class=\"line\"> traverse(root.right);</span><br><span class=\"line\"> <span class=\"comment\">// 后序遍历代码位置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>技巧总结:</strong></p>\n<ul>\n<li><p>递归算法的关键要明确函数的定义，相信这个定义，⽽不要跳进递归细节。 </p>\n</li>\n<li><p>⼆叉树的算法题，基于递归框架的，先要搞清楚root节点要做什么，然后根据题⽬要求选择使⽤前序，中序，后续的递归框架。 </p>\n</li>\n<li><p>难点在于如何通过题⽬的要求思考出每⼀个节点需要做什么，只能通过多刷题进⾏练习</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>226.翻转⼆叉树（简单）</td>\n</tr>\n<tr>\n<td></td>\n<td>114.⼆叉树展开为链表（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>116.填充每个节点的下⼀个右侧节点指针（中等）</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>654.最⼤⼆叉树（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>105.从前序与中序遍历序列构造⼆叉树（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>106.从中序与后序遍历序列构造⼆叉树（中等）</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>652.寻找重复的⼦树（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>297.⼆叉树的序列化和反序列化（困难）</td>\n</tr>\n<tr>\n<td></td>\n<td>1373.⼆叉搜索⼦树的最⼤键值和（困难）</td>\n</tr>\n</tbody></table>\n<h1 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h1><p>BST(Binary Search Tree)是⼀种特殊的⼆叉树，两个主要特点:</p>\n<ul>\n<li><p>左⼩右⼤，即每个节点的左⼦树都⽐当前节点的值⼩，右⼦树都⽐当前节点的值⼤</p>\n</li>\n<li><p>中序遍历结果是有序的</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>230</td>\n<td>BST第K⼩的元素（中等）</td>\n</tr>\n<tr>\n<td>538</td>\n<td>⼆叉搜索树转化累加树（中等）</td>\n</tr>\n<tr>\n<td>1038</td>\n<td>BST转累加树（中等）</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>450.删除⼆叉搜索树中的节点（中等）</td>\n<td></td>\n</tr>\n<tr>\n<td>701.⼆叉搜索树中的插⼊操作（中等）</td>\n<td></td>\n</tr>\n<tr>\n<td>700.⼆叉搜索树中的搜索（简单）</td>\n<td></td>\n</tr>\n<tr>\n<td>98.验证⼆叉搜索树（中等）</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>96.不同的⼆叉搜索树（Easy）</td>\n<td></td>\n</tr>\n<tr>\n<td>95.不同的⼆叉搜索树II（Medium）</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"图论\"><a href=\"#图论\" class=\"headerlink\" title=\"图论\"></a>图论</h1><p><strong>图论之基础</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>797.所有可能的路径（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>图论之⼆分图</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>785. 判断⼆分图（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>886. 可能的⼆分法（中等）</td>\n</tr>\n</tbody></table>\n<p><strong>图论之Union-Find算法</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>323.⽆向图中的连通分量数⽬（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>130.被围绕的区域（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>990.等式⽅程的可满⾜性</td>\n</tr>\n</tbody></table>\n<p><strong>图论之Kruskal算法</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>261. 以图判树（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>1135. 最低成本联通所有城市（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>1584. 连接所有点的最⼩费⽤（中等）</td>\n</tr>\n</tbody></table>\n<p><strong>图论之Dijkstra算法</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>743. ⽹络延迟时间（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>1514. 概率最⼤的路径（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>1631. 最⼩体⼒消耗路径（中等）</td>\n</tr>\n</tbody></table>\n<p><strong>图论之其他</strong></p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>277.搜索名⼈（中等）</td>\n</tr>\n</tbody></table>\n<h1 id=\"DFS算法-x2F-回溯算法\"><a href=\"#DFS算法-x2F-回溯算法\" class=\"headerlink\" title=\"DFS算法&#x2F;回溯算法\"></a>DFS算法&#x2F;回溯算法</h1><p>基础</p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>46.全排列（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>51.N皇后（困难）</td>\n</tr>\n</tbody></table>\n<p>集合划分</p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>698.划分为k个相等的⼦集（中等）</td>\n</tr>\n</tbody></table>\n<p>子集、排列、组合</p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>78.⼦集（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>46.全排列（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>77.组合（中等）</td>\n</tr>\n</tbody></table>\n<p>岛屿类型</p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>200.岛屿数量（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>1254.统计封闭岛屿的数⽬（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>1020.⻜地的数量（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>695.岛屿的最⼤⾯积（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>1905.统计⼦岛屿（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>694.不同的岛屿数量（中等）</td>\n</tr>\n</tbody></table>\n<h1 id=\"BFS算法\"><a href=\"#BFS算法\" class=\"headerlink\" title=\"BFS算法\"></a>BFS算法</h1><p>基础</p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>111.⼆叉树的最⼩深度（简单）</td>\n</tr>\n<tr>\n<td></td>\n<td>752.打开转盘锁（中等）</td>\n</tr>\n</tbody></table>\n<p>其他</p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>773.滑动谜题（困难）</td>\n</tr>\n</tbody></table>\n<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><p>基础</p>\n<table>\n<thead>\n<tr>\n<th>核心</th>\n<th>Leetcode题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>核⼼原理</td>\n<td>509.斐波那契数（简单） 322.零钱兑换（中等）</td>\n</tr>\n<tr>\n<td>base case 和备忘录的初始值怎么定？</td>\n<td>931.下降路径最⼩和（中等）</td>\n</tr>\n<tr>\n<td>最优⼦结构和 dp 数组的遍历⽅向怎么定？</td>\n<td>到底什么才叫「最优⼦结构」，和动态规划什么关系。 <br/>为什么动态规划遍历 dp 数组的⽅式五花⼋⻔，有的正着遍历，有的倒着遍历，有的斜着遍历。</td>\n</tr>\n</tbody></table>\n<p>经典</p>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>300.最⻓递增⼦序列（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>53.最⼤⼦序和（简单）</td>\n</tr>\n<tr>\n<td></td>\n<td>1143.最⻓公共⼦序列（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>583. 两个字符串的删除操作（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>712.两个字符串的最⼩ASCII删除和（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>72.编辑距离（困难）</td>\n</tr>\n<tr>\n<td></td>\n<td>10.正则表达式匹配（困难）</td>\n</tr>\n</tbody></table>\n<p>背包</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>Leetcode题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0-1 背包问题</td>\n<td></td>\n</tr>\n<tr>\n<td>完全背包问题</td>\n<td>518.零钱兑换II（中等）</td>\n</tr>\n<tr>\n<td>⼦集背包问题</td>\n<td>416.分割等和⼦集（中等）</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>121.买卖股票的最佳时机（简单）</td>\n</tr>\n<tr>\n<td></td>\n<td>122.买卖股票的最佳时机 II（简单）</td>\n</tr>\n<tr>\n<td></td>\n<td>123.买卖股票的最佳时机 III（困难）</td>\n</tr>\n<tr>\n<td></td>\n<td>188.买卖股票的最佳时机 IV（困难）</td>\n</tr>\n<tr>\n<td></td>\n<td>309.最佳买卖股票时机含冷冻期（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>714.买卖股票的最佳时机含⼿续费（中等）</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>198.打家劫舍（简单）</td>\n</tr>\n<tr>\n<td></td>\n<td>213.打家劫舍II（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>337.打家劫舍III（中等）</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Leetcode</th>\n<th>题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>877.⽯⼦游戏（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>64.最⼩路径和（中等）</td>\n</tr>\n<tr>\n<td></td>\n<td>887.鸡蛋掉落（困难）</td>\n</tr>\n<tr>\n<td></td>\n<td>174.地下城游戏（困难）</td>\n</tr>\n<tr>\n<td></td>\n<td>514.⾃由之路（困难）</td>\n</tr>\n<tr>\n<td></td>\n<td>787. K 站中转内最便宜的航班（中等）</td>\n</tr>\n</tbody></table>\n<h1 id=\"数学算法\"><a href=\"#数学算法\" class=\"headerlink\" title=\"数学算法\"></a>数学算法</h1><p>数学算法⼤多就是位运 算、找规律、概率算法、素数之类</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>Leetcode题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>如何⾼效寻找素数</td>\n<td>204.计数质数（简单）</td>\n</tr>\n<tr>\n<td>两道常考的阶乘算法题</td>\n<td>172.阶乘后的零（简单） 793.阶乘后 K 个零（困难）</td>\n</tr>\n<tr>\n<td>如何在⽆限序列中随机抽取元素</td>\n<td>382.链表随机节点（中等） 398.随机数索引（中等）</td>\n</tr>\n<tr>\n<td>吃葡萄</td>\n<td><a href=\"https://www.nowcoder.com/questionTerminal/14c0359fb77a48319f0122ec175c9ada\">吃葡萄-牛客网</a></td>\n</tr>\n<tr>\n<td>如何同时寻找缺失和重复的元素</td>\n<td>645.错误的集合（简单）</td>\n</tr>\n</tbody></table>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>Leetcode题目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⼀个⽅法团灭 nSum问题</td>\n<td>15.三数之和（中等） 18.四数之和（中等）</td>\n</tr>\n<tr>\n<td>⼀个⽅法解决三道区间问题</td>\n<td>1288.删除被覆盖区间（中等） 56.区间合并（中等） 986.区间列表的交集（中等）</td>\n</tr>\n<tr>\n<td>快速选择算法</td>\n<td>215.数组中的第 K 个最⼤元素（中等）</td>\n</tr>\n<tr>\n<td>分治算法详解：运算优先级</td>\n<td>241.为运算表达式设计优先级（中等）</td>\n</tr>\n<tr>\n<td>扫描线技巧：安排会议室</td>\n<td>253.会议室 II（中等）</td>\n</tr>\n<tr>\n<td>贪⼼算法</td>\n<td>134.加油站（中等）   1024.视频拼接（中等）</td>\n</tr>\n<tr>\n<td>如何实现⼀个计算器</td>\n<td>224.基本计算器（困难） 227.基本计算器II（中等） 772.基本计算器III（困难）</td>\n</tr>\n<tr>\n<td>⽃地主</td>\n<td>659. 分割数组为连续⼦序列（中等）</td>\n</tr>\n<tr>\n<td>判定完美矩形</td>\n<td>391.完美矩形（困难）</td>\n</tr>\n</tbody></table>\n","categories":["algorithms","algorithms","data structure"],"tags":["algorithms"]},{"title":"c语言","url":"/flame/2021/11/10/c-language/c-and-points/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文是对c语言的总结</p>\n<span id=\"more\"></span>\n\n\n\n\n\n\n\n","categories":["c"],"tags":["c"]},{"title":"c项目开发环境-基于docker和clion","url":"/flame/2021/11/15/c-language/c-development-env/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>基于docker和clion的c项目开发环境</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h1><h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">20.04</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  tzdata</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">ln</span> -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dpkg-reconfigure --frontend noninteractive tzdata</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  ssh</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  build-essential</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  gcc</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  g++</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  gdb</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  clang</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  cmake</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  automake</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  pkg-config</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  rsync</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  tar</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  python</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  vim</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  sudo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get clean autoclean</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">yes</span> root | passwd root</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> useradd -m clion</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">yes</span> clion | passwd clion</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> /run/sshd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> ( \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PermitRootLogin yes&#x27;</span>; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PasswordAuthentication yes&#x27;</span>; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Subsystem sftp /usr/lib/openssh/sftp-server&#x27;</span>; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">  ) &gt; /etc/ssh/sshd_config_test_clion</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/usr/sbin/sshd&quot;</span>, <span class=\"string\">&quot;-D&quot;</span>, <span class=\"string\">&quot;-e&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;/etc/ssh/sshd_config_test_clion&quot;</span>]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t c-env/c_remote_env:0.1 -f Dockerfile  .</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -d --cap-add sys_ptrace -p127.0.0.1:2222:22 --name clion_remote_env --hostname clion-remote-machine c-env/c_remote_env:0.1</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h2><p>ssh登录 用户名:<code>clion</code>  密码:<code>clion</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh clion@127.0.0.1 -p 2222</span><br></pre></td></tr></table></figure>\n\n\n\n<p>ssh登录 用户名:root  密码:root  端口:2222</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh root@127.0.0.1 -p 2222</span><br></pre></td></tr></table></figure>\n\n\n\n<p>docker登录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec -it clion_remote_env /bin/bash</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"clion\"><a href=\"#clion\" class=\"headerlink\" title=\"clion\"></a>clion</h1><h2 id=\"clion设置\"><a href=\"#clion设置\" class=\"headerlink\" title=\"clion设置\"></a>clion设置</h2><h3 id=\"Toolchains选项\"><a href=\"#Toolchains选项\" class=\"headerlink\" title=\"Toolchains选项\"></a>Toolchains选项</h3><p><img src=\"/flame/images/c-language/c-clion-toolchains.png\" alt=\"clion toolchains选项\"></p>\n<h3 id=\"添加CMake选项\"><a href=\"#添加CMake选项\" class=\"headerlink\" title=\"添加CMake选项\"></a>添加CMake选项</h3><p><img src=\"/flame/images/c-language/c-clion-cmake-remote-option.png\" alt=\"clion CMake选项\"></p>\n<h2 id=\"clion本地调试\"><a href=\"#clion本地调试\" class=\"headerlink\" title=\"clion本地调试\"></a>clion本地调试</h2><p><img src=\"/flame/images/c-language/c-clion-local-debug.png\" alt=\"clion local debug\"></p>\n<h2 id=\"clion远程调试\"><a href=\"#clion远程调试\" class=\"headerlink\" title=\"clion远程调试\"></a>clion远程调试</h2><p><img src=\"/flame/images/c-language/c-clion-remote-debug.png\" alt=\"clion remote debug\"></p>\n<h1 id=\"项目实现\"><a href=\"#项目实现\" class=\"headerlink\" title=\"项目实现\"></a>项目实现</h1><p><a href=\"https://github.com/agui93/agui93-moonlight/tree/master/clion-docker\">项目实现</a></p>\n<h1 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h1><p><a href=\"https://blog.jetbrains.com/clion/2020/01/using-docker-with-clion/\">Using Docker with CLion</a></p>\n<p><a href=\"https://www.cnblogs.com/davis12/p/14453690.html\">docker –cap-add</a></p>\n<p><a href=\"https://www.cnblogs.com/sparkdev/p/11417781.html\">linux capabilities</a></p>\n<p><a href=\"https://www.cnblogs.com/davidhhuan/p/13227139.html\"><a href=\"https://www.cnblogs.com/davidhhuan/p/13227139.html\">Clion利用Docker开发和调试Linux C&#x2F;C++程序</a></a></p>\n","categories":["c","development-env","docker"],"tags":["c","tools","docker"]},{"title":"c开发环境-基于vim和docker配置","url":"/flame/2021/11/16/c-language/c-vim-docker-env/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>基于<strong>vim</strong>和<strong>docker</strong>的c开发环境</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h1><h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">20.04</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  tzdata</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">ln</span> -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dpkg-reconfigure --frontend noninteractive tzdata</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  ssh</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  build-essential</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  gcc</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  g++</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  gdb</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  clang</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  cmake</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  automake</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  pkg-config</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  rsync</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  tar</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  python</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  vim</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  sudo</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  ctags </span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  git </span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y  python3-dev </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get clean autoclean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">yes</span> root | passwd root</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> /run/sshd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> -p /root/.vim/bundle/Vundle.vim</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> ./Vundle.vim /root/.vim/bundle/Vundle.vim</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> ./vim.rc /root/.vimrc</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> ./vim_plugins_install.sh /root/vim_plugins_install.sh</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> [<span class=\"string\">&quot;chmod&quot;</span>, <span class=\"string\">&quot;+x&quot;</span>, <span class=\"string\">&quot;/root/vim_plugins_install.sh&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> ./ycm_extra_conf.py /root/ycm_extra_conf.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> ( \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PermitRootLogin yes&#x27;</span>; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PasswordAuthentication yes&#x27;</span>; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Subsystem sftp /usr/lib/openssh/sftp-server&#x27;</span>; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">  ) &gt; /etc/ssh/sshd_config_test_clion</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> /root/vim_plugins_install.sh</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/usr/sbin/sshd&quot;</span>, <span class=\"string\">&quot;-D&quot;</span>, <span class=\"string\">&quot;-e&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;/etc/ssh/sshd_config_test_clion&quot;</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t c-vim-env/c_vim_env:0.1 -f Dockerfile .</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -d --cap-add sys_ptrace -p127.0.0.1:2223:22 --name c-vim --hostname c-vim-machine c-vim-env/c_vim_env:0.1</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec -it c-vim /bin/bash</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"样例\"><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /root/</span><br><span class=\"line\">git clone https://github.com/huangz1990/redis-3.0-annotated.git</span><br><span class=\"line\">cd redis-3.0-annotated</span><br><span class=\"line\">cp ../ycm_extra_conf.py .ycm_extra_conf.py</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/flame/images/c-language/c-vim-docker-sample-redis.png\" alt=\"样例\"></p>\n<h1 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h1><p><a href=\"https://github.com/agui93/agui93-moonlight/tree/master/c-vim-docker\">项目-github</a></p>\n<h1 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h1><p><a href=\"https://github.com/Valloric/YouCompleteMe\">YouCompleteMe</a><br><a href=\"https://github.com/yangyangwithgnu/use_vim_as_ide\">use_vim_as_ide</a><br><a href=\"http://www.skywind.me/blog/archives/2084\">http://www.skywind.me/blog/archives/2084</a><br><a href=\"http://vim.zhangjikai.com/%E6%8F%92%E4%BB%B6/vundle.html\">http://vim.zhangjikai.com/%E6%8F%92%E4%BB%B6/vundle.html</a></p>\n<p><a href=\"https://agui93.github.io/2019/04/25/tools/vim_config/\">vim配置</a></p>\n","categories":["c","vim","docker","env"],"tags":["c","tools","vim"]},{"title":"c项目的编译和构建","url":"/flame/2021/11/12/c-language/cmake/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>c项目的编译和构建</p>\n<ul>\n<li>编译过程</li>\n<li>静态函数库、共享函数库、动态加载函数库</li>\n<li>gcc</li>\n<li>cmake</li>\n<li>make</li>\n<li>gdb</li>\n</ul>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"编译过程\"><a href=\"#编译过程\" class=\"headerlink\" title=\"编译过程\"></a>编译过程</h1><p>一个源代码程序经历预处理、编译、汇编以及链接这4个过程，最终生成对应的可执行程序。</p>\n<p><img src=\"/flame/images/c-language/gcc-compile-process.png\" alt=\"gcc对程序的编译过程\"></p>\n<h2 id=\"文件名称\"><a href=\"#文件名称\" class=\"headerlink\" title=\"文件名称\"></a>文件名称</h2><p>常见名称的含义</p>\n<ul>\n<li><p>源文件(Source file)：通常指存放可编辑代码的文件，例如存放C C++和汇编语言的文件。</p>\n</li>\n<li><p>目标文件(Object file) ：指经过编译器的编译生成的CPU可识别的二进制代码，一般不能执行。</p>\n</li>\n<li><p>可执行文件(Excutable file)：目标文件和相关的库链接后的文件，可执行</p>\n</li>\n</ul>\n<h2 id=\"具体过程\"><a href=\"#具体过程\" class=\"headerlink\" title=\"具体过程\"></a>具体过程</h2><p><img src=\"/flame/images/c-language/c-build-process.png\" alt=\"程序编译过程\"></p>\n<ul>\n<li><p>预处理 : preprocessor</p>\n</li>\n<li><p>编译 : compiler  优化 : optimizer</p>\n</li>\n<li><p>汇编：assembler   </p>\n</li>\n<li><p>链接 : linker</p>\n</li>\n</ul>\n<h1 id=\"函数库\"><a href=\"#函数库\" class=\"headerlink\" title=\"函数库\"></a>函数库</h1><p><strong>库</strong>从本质上来说是一种可执行代码的二进制格式，可以被载入内存中执行。</p>\n<ul>\n<li><p>静态函数库（static libraries）：在程序执行前就加入到目标程序中去了</p>\n</li>\n<li><p>共享函数库（shared libraries）：在程序启动的时候加载到程序中，它可以被不同的程序共享，可以同时被多个线程同时使用</p>\n</li>\n<li><p>动态加载函数库（dynamically loaded libraries）：可以在程序运行的任何时候动态的加载</p>\n</li>\n</ul>\n<h2 id=\"静态链接库\"><a href=\"#静态链接库\" class=\"headerlink\" title=\"静态链接库\"></a>静态链接库</h2><p>静态链接库名字一般是libxxx.a，是obj文件的集合，整个函数库都会被整合进目标程序中。</p>\n<p>编译后的执行程序不需要外部的函数库支持，如果静态库改变了，必须重新编译。</p>\n<ul>\n<li><p>静态链接库节省了编译时间，现在一般的程序的重新编译也花费不了多少时间，这个优势不再明显。</p>\n</li>\n<li><p>静态链接库提供给别人使用时，可以对函数的源代码保密，在某些时候对开发者来说还是很有用的。</p>\n</li>\n<li><p>理论上说，使用ELF格式的静态库生成的代码可以比使用共享函数库（或者动态函数库）的程序运行速度上快一些，大概1－5％。</p>\n</li>\n</ul>\n<h2 id=\"共享函数库\"><a href=\"#共享函数库\" class=\"headerlink\" title=\"共享函数库\"></a>共享函数库</h2><p>共享函数库中的函数是在当一个可执行程序在启动的时候被加载，库中的函数和变量的地址是相对地址，真实地址在调用动态链接库加载时形成。</p>\n<p>如果一个共享函数库正常安装，所有的程序在重新运行的时候都可以自动加载最新的函数库中的函数。</p>\n<ul>\n<li>升级了函数库但是仍然允许程序使用老版本的函数库。</li>\n<li>当执行某个特定程序的时候可以覆盖某个特定的库或者库中指定的函数。</li>\n<li>可以在库函数被使用的过程中修改这些函数库。</li>\n</ul>\n<h3 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h3><p>每个共享函数库都有个特殊的名字，别名：<strong>soname</strong></p>\n<p>每个共享函数库都有一个真正的名字，真名：<strong>real name</strong></p>\n<p>编译器编译的时候需要的函数库名字，链接名：<strong>linker name</strong></p>\n<br/>\n\n<p><strong>soname</strong></p>\n<p>soname:  “lib” + “函数库的名称” + “.so” + 版本号</p>\n<p>例如：libtest.so.3的soname就是libtest.so.3。</p>\n<p>特例，就是非常底层的C库函数都不是以lib开头这样命名的。</p>\n<br/>\n\n<p><strong>real name</strong></p>\n<p>real name有一个主版本号，和一个发行版本号(可选)。</p>\n<p>real name是包含真正库函数代码的文件，主版本号和发行版本号使你可以知道你到底是安装了什么版本的库函数。</p>\n<p>例如：libtest.so.3.0的real name就是libtest.so.3.0，这里有发行版本号。</p>\n<br/>\n\n<p><strong>linker name</strong></p>\n<p>linker name是编译器编译的时候需要的函数库的名字。</p>\n<h3 id=\"文件位置\"><a href=\"#文件位置\" class=\"headerlink\" title=\"文件位置\"></a>文件位置</h3><p>共享函数库文件必须放在一些特定的目录里，这样通过系统的环境变量设置，应用程序才能正确的使用这些函数库。</p>\n<br/>\n\n<p><strong>GNU标准建议</strong></p>\n<p>所有的函数库文件都放在&#x2F;usr&#x2F;local&#x2F;lib目录下，建议可执行程序都放在&#x2F;usr&#x2F;local&#x2F;bin目录下。 </p>\n<p>大部分的源码开发的程序都遵循GNU的一些标准，查看info帮助：info:standards#Directory_Variables，这是一些习惯问题，可以改变。</p>\n<br/>\n\n<p><strong>FHS(Filesystem Hierarchy Standard)建议</strong></p>\n<p>在一个<strong>发行包</strong>中大部分的函数库文件应该安装到&#x2F;usr&#x2F;lib目录下，</p>\n<p>在系统启动的时候要加载的库放到&#x2F;lib目录下，</p>\n<p>不是系统本身一部分的库则放到&#x2F;usr&#x2F;local&#x2F;lib目录下。</p>\n<br/>\n\n<p>GNU提出的标准主要对于开发者开发源码的，而FHS的建议则是针对发行版本的路径的。具体的位置信息可以看&#x2F;etc&#x2F;ld.so.conf里面的配置信息。</p>\n<p>头文件路径和库文件路径是编译器默认查找的地方，例如</p>\n<p><img src=\"/flame/images/c-language/c-build-default-files.png\" alt=\"默认查找路径\"></p>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p>在基于GNU glibc的系统里，包括所有的linux系统，启动一个ELF格式的二进制可执行文件会自动启动和运行一个program loader。对于Linux系统，这个loader的名字是&#x2F;lib&#x2F;ld-linux.so.X（X是版本号）。这个loader启动后，反过来就会load所有的其他本程序要使用的共享函数库。</p>\n<p><strong>到底在哪些目录里查找共享函数库呢？</strong></p>\n<p>定义缺省的是放在&#x2F;etc&#x2F;ld.so.conf文件里面，可以修改这个文件，加入自己的一些特殊的路径要求。</p>\n<p>大多数RedHat系列的发行包的&#x2F;etc&#x2F;ld.so.conf文件里面<strong>不包括</strong>&#x2F;usr&#x2F;local&#x2F;lib这个目录。</p>\n<p>如果想用自己的函数替换某个库中的一些函数，同时保留该库中其他的函数的话，可以在 &#x2F;etc&#x2F;ld.so.preload中加入你想要替换的库（.o结尾的文件），这些preloading的库函数将有优先加载的权利。</p>\n<p><strong>高速缓冲</strong></p>\n<p>当程序启动的时候搜索所有的目录显然会效率很低，为了提高访问函数库的速度，使用了高速缓冲。</p>\n<p><strong>ldconfig</strong>缺省情况下读出&#x2F;etc&#x2F;ld.so.conf相关信息，然后设置适当地符号链接，然后写一个cache到&#x2F;etc&#x2F;ld.so.cache这个文件中，而这个&#x2F;etc&#x2F;ld.so.cache则可以被其他程序有效的使用了。</p>\n<p>重新运行ldconfig来更新cache，通常的一些包管理器在安装一个新的函数库的时候就要运行ldconfig。 </p>\n<ul>\n<li><p>要新增一个动态加载的函数库</p>\n</li>\n<li><p>要删除某个函数库</p>\n</li>\n<li><p>要修改某个函数库的路径</p>\n</li>\n</ul>\n<p><strong>环境变量</strong></p>\n<p>Linux系统中，环境变量<strong>LD_LIBRARY_PATH</strong>可以用来指定函数库查找路径的，这个路径通常是在查找标准的路径之前查找。</p>\n<p>环境变量<strong>LD_PRELOAD</strong>列出了所有共享函数库中需要优先加载的库文件，功能和&#x2F;etc&#x2F;ld.so.preload类似。</p>\n<p>LD_LIBRARY_PATH在开发和调试过程中经常大量使用，但是不应该被一个普通用户在安装过程中被安装程序修改。</p>\n<p>事实上还有更多的环境变量影响着程序的调入过程，它们的名字通常就是以LD_或者RTLD_打头。</p>\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><blockquote>\n<p>标准格式: gcc -shared -Wl,-soname,your_soname -o library_name file_list library_list</p>\n</blockquote>\n<p>样例，其中使用-fPIC来产生代码，而不是-fpic，PIC的意思是“位置无关代码”（Position Independent Code）</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#创建object文件a.o</span><br><span class=\"line\">#创建object文件b.o</span><br><span class=\"line\">#创建一个包含a.o和b.o的共享函数库</span><br><span class=\"line\">gcc –fPIC -g -c -Wall a.c  </span><br><span class=\"line\">gcc –fPIC -g -c -Wall b.c</span><br><span class=\"line\">gcc  -shared  -Wl,-soname,liblusterstuff.so.1 -o  liblusterstuff.so.1.0.1  a.o b.o -lc </span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li><p>拷贝库文件到指定的标准的目录，然后运行ldconfig</p>\n</li>\n<li><p>修改环境变量</p>\n</li>\n</ul>\n<h3 id=\"兼容\"><a href=\"#兼容\" class=\"headerlink\" title=\"兼容\"></a>兼容</h3><p>尽量用二进制接口ABI（Application Binary Interface）向上兼容</p>\n<h2 id=\"动态加载函数库\"><a href=\"#动态加载函数库\" class=\"headerlink\" title=\"动态加载函数库\"></a>动态加载函数库</h2><p>动态加载函数库可以在程序运行过程中的任何时间加载。</p>\n<p>特别适合在函数中加载一些模块和plugin扩展模块的场合，因为它可以在当程序需要某个plugin模块时才动态的加载。</p>\n<p>Linux系统下，动态加载函数库与其他函数库在格式上没有特殊的区别，创建的时候是标准的object格式。主要的区别就是这些函数库不是在程序链接的时候或者启动的时候加载，而是通过一个API来打开一个函数库，寻找符号表，处理错误和关闭函数库。</p>\n<p><strong>API</strong></p>\n<ul>\n<li><p>dlopen</p>\n</li>\n<li><p>dlerror</p>\n</li>\n<li><p>dlsym</p>\n</li>\n<li><p>dlclose</p>\n</li>\n</ul>\n<h2 id=\"ldconfig命令\"><a href=\"#ldconfig命令\" class=\"headerlink\" title=\"ldconfig命令\"></a>ldconfig命令</h2><p>ldconfig是动态链接库的管理命令。</p>\n<p><img src=\"/flame/images/c-language/ldconfig-opotions.png\" alt=\"ldconfig-options\"></p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-v, –verbose</td>\n<td>打印ldconfig当前版本号，显示所扫描的每一个目录和动态链接库</td>\n</tr>\n<tr>\n<td>-n</td>\n<td></td>\n</tr>\n<tr>\n<td>-N</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"GCC\"><a href=\"#GCC\" class=\"headerlink\" title=\"GCC\"></a>GCC</h1><p>GCC是GNU Compiler Collection缩写，即GNU编译器套件。</p>\n<p>一个源代码程序经历预处理、编译、汇编以及链接这4个过程，最终生成对应的可执行程序。</p>\n<p><img src=\"/flame/images/c-language/gcc-compile-process.png\" alt=\"gcc对程序的编译过程\"></p>\n<h2 id=\"编译器\"><a href=\"#编译器\" class=\"headerlink\" title=\"编译器\"></a>编译器</h2><table>\n<thead>\n<tr>\n<th>编译器命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cc</td>\n<td>指的是C语言编译器</td>\n</tr>\n<tr>\n<td>cpp</td>\n<td>指的是预处理编译器</td>\n</tr>\n<tr>\n<td>gcc</td>\n<td>指的是C语言的编译器</td>\n</tr>\n<tr>\n<td>g++</td>\n<td>指的是C++语言的编译器</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>通常执行gcc指令编译C程序，通过g++指令编译C++程序</p>\n</li>\n<li><p>只要是GCC支持编译的程序代码，gcc指令根据后缀名自行判断所用的语言，完成编译。</p>\n</li>\n<li><p>gcc指令使用-x选项为用户提供了<strong>手动指定代表编译方式</strong>的方式</p>\n<p>例如：gcc -xc xxx表示以编译C语言代码的方式编译xxx文件；而gcc -xc++ xxx 则表示以编译C++代码的方式编译xxx文件。</p>\n</li>\n</ul>\n<h2 id=\"文件扩展名\"><a href=\"#文件扩展名\" class=\"headerlink\" title=\"文件扩展名\"></a>文件扩展名</h2><table>\n<thead>\n<tr>\n<th>扩展名</th>\n<th>GCC 编译器识别的文件类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*.c</td>\n<td>尚未经过预处理操作的 C 源程序文件。</td>\n</tr>\n<tr>\n<td>*.i</td>\n<td>经过预处理操作、但尚未进行编译、汇编和连接的C源代码文件。</td>\n</tr>\n<tr>\n<td>*.cpp *.cp *.cc *.cxx *.CPP *.c++ *.C</td>\n<td>尚未经过预处理操作的C++源代码文件。</td>\n</tr>\n<tr>\n<td>*.ii</td>\n<td>已经预处理操作，但尚未进行编译、汇编和连接的 C++ 源代码文件。</td>\n</tr>\n<tr>\n<td>*.s</td>\n<td>经过编译生成的汇编代码文件。</td>\n</tr>\n<tr>\n<td>*.h</td>\n<td>C、C++ 或者 Objective-C++ 语言头文件。</td>\n</tr>\n<tr>\n<td>*.hh *.H *.hp *.hxx *.hpp *.HPP *.h++ *.tcc</td>\n<td>C++ 头文件。</td>\n</tr>\n<tr>\n<td>*.o</td>\n<td>汇编后的目标文件</td>\n</tr>\n<tr>\n<td>a.out</td>\n<td>为链接后的输出文件</td>\n</tr>\n</tbody></table>\n<h2 id=\"常用的编译选项\"><a href=\"#常用的编译选项\" class=\"headerlink\" title=\"常用的编译选项\"></a>常用的编译选项</h2><p>更多选项参考<a href=\"https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Invoking-GCC.html#Invoking-GCC\">GCC手册</a></p>\n<table>\n<thead>\n<tr>\n<th>gcc&#x2F;g++指令</th>\n<th>功 能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-E（大写）</td>\n<td>预处理指定的源文件，不进行编译。</td>\n</tr>\n<tr>\n<td>-S（大写）</td>\n<td>编译指定的源文件，但是不进行汇编。</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>编译、汇编指定的源文件，但是不进行链接。</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>指定生成文件的文件名。</td>\n</tr>\n<tr>\n<td>-ansi</td>\n<td>对于 C 语言程序来说，其等价于 -std&#x3D;c90；对于 C++ 程序来说，其等价于 -std&#x3D;c++98。</td>\n</tr>\n<tr>\n<td>-std&#x3D;</td>\n<td>手动指令编程语言所遵循的标准，例如 c89、c90、c++98、c++11 等。</td>\n</tr>\n<tr>\n<td>-fPIC</td>\n<td>表示编译为位置独立的代码，用于编译共享库。</td>\n</tr>\n<tr>\n<td>-llibrary（-I library）</td>\n<td>其中 library 表示要搜索的库文件的名称。该选项用于手动指定链接环节中程序可以调用的库文件。建议 -l 和库文件名之间不使用空格，比如 -lstdc++。</td>\n</tr>\n<tr>\n<td>-l library</td>\n<td>指定链接时需要的动态库。编译器查找动态连接库时有隐含的命名规则，即在给出的名字前面加上lib，后面加上.a&#x2F;.so来确定库的名称。</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>表示要连接的库所在的目录。</td>\n</tr>\n<tr>\n<td>-Wall</td>\n<td>生成所有警告信息。</td>\n</tr>\n<tr>\n<td>-Wl,options</td>\n<td>把参数(options)传递给链接器ld。如果options中间有逗号,就将options分成多个选项，然后传递给链接程序。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"编译标准\"><a href=\"#编译标准\" class=\"headerlink\" title=\"编译标准\"></a>编译标准</h2><p>不同版本的 GCC 编译器，默认使用的标准版本也不尽相同。</p>\n<p>对于编译C、C++程序来说，借助-std选项即可手动控制GCC编译程序时所使用的编译标准。</p>\n<blockquote>\n<p>基本格式</p>\n<p>gcc&#x2F;g++ -std&#x3D;编译标准</p>\n</blockquote>\n<h3 id=\"C语言标准\"><a href=\"#C语言标准\" class=\"headerlink\" title=\"C语言标准\"></a>C语言标准</h3><p>C语言标准：C89(有时称为C90)、C94(C89的修订版)、C99、C11、C17。</p>\n<p>GCC编译器本身还对C语言进行了扩展，先后产生了GNU90、GNU99、GNU11以及GNU17。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">GCC版本</th>\n<th>c89&#x2F;C90</th>\n<th><strong>C99</strong></th>\n<th><strong>C11</strong></th>\n<th align=\"left\"><strong>C17</strong></th>\n<th><strong>GNU90</strong></th>\n<th><strong>GNU99</strong></th>\n<th align=\"left\"><strong>GNU11</strong></th>\n<th><strong>GNU17</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">8.4~10.1</td>\n<td>c89&#x2F;C90</td>\n<td>c99</td>\n<td>c11</td>\n<td align=\"left\">c17&#x2F;c18</td>\n<td>gnu90&#x2F;gnu89</td>\n<td>gnu99</td>\n<td align=\"left\">gnu11</td>\n<td>gnu17&#x2F;gnu18</td>\n</tr>\n<tr>\n<td align=\"left\">5.5~7.5</td>\n<td>c89&#x2F;c90</td>\n<td>c99</td>\n<td>c11</td>\n<td align=\"left\"></td>\n<td>gnu90&#x2F;gnu89</td>\n<td>gnu99</td>\n<td align=\"left\">gnu11</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">4.8.4~4.9.4</td>\n<td>c89&#x2F;c90</td>\n<td>c99</td>\n<td>c11</td>\n<td align=\"left\"></td>\n<td>gnu90&#x2F;gnu89</td>\n<td>gnu99</td>\n<td align=\"left\">gnu11</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">4.7.4</td>\n<td>c89&#x2F;c90</td>\n<td>c99(部分)</td>\n<td>c11(部分)</td>\n<td align=\"left\"></td>\n<td>gnu90&#x2F;gnu89</td>\n<td>gnu99(部分)</td>\n<td align=\"left\">gnu11(部分)</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">4.6.4</td>\n<td>c89&#x2F;c90</td>\n<td>c99(部分)</td>\n<td>c1x(部分)</td>\n<td align=\"left\"></td>\n<td>gnu90&#x2F;gnu89</td>\n<td>gnu99(部分)</td>\n<td align=\"left\">gnu1x(部分)</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">4.5.4</td>\n<td>c89&#x2F;c90</td>\n<td>c99(部分)</td>\n<td></td>\n<td align=\"left\"></td>\n<td>gnu90&#x2F;gnu89</td>\n<td>gnu99(部分)</td>\n<td align=\"left\"></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"C-标准\"><a href=\"#C-标准\" class=\"headerlink\" title=\"C++标准\"></a>C++标准</h3><p>C++标准：C++98、C++03(C++98的修订版)、C++11(有时又称为C++0x)、C++14、C++17。</p>\n<p>GCC编译器本身对的C++标准做了相应的扩展，比如GNU++98、GNU++11、GNU++14、GNU++17。</p>\n<table>\n<thead>\n<tr>\n<th>GCC</th>\n<th><strong>C++98&#x2F;03</strong></th>\n<th><strong>C++11</strong></th>\n<th><strong>C++14</strong></th>\n<th>C++17</th>\n<th>GNU++98</th>\n<th>GNU++11</th>\n<th>GNU++14</th>\n<th>GNU++17</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>8.4-10.1</td>\n<td>c++98&#x2F;c++03</td>\n<td>c++11</td>\n<td>c++14</td>\n<td>c++17</td>\n<td>gnu++98&#x2F;gnu++03</td>\n<td>gnu++11</td>\n<td>gnu++14</td>\n<td>gnu++17</td>\n</tr>\n<tr>\n<td>5.5-7.5</td>\n<td>c++98&#x2F;c++03</td>\n<td>c++11</td>\n<td>c++14</td>\n<td>c++1z部分</td>\n<td>gnu++98&#x2F;gnu++03</td>\n<td>gnu++11</td>\n<td>gnu++14</td>\n<td>gnu++1z部分</td>\n</tr>\n<tr>\n<td>4.8.4~4.9.4</td>\n<td>c++98&#x2F;c++03</td>\n<td>c++11</td>\n<td>c++1y部分</td>\n<td></td>\n<td>gnu++98&#x2F;gnu++03</td>\n<td>gnu++11</td>\n<td>gnu++1y部分</td>\n<td></td>\n</tr>\n<tr>\n<td>4.7.4</td>\n<td>c++98</td>\n<td>c++11部分</td>\n<td></td>\n<td></td>\n<td>gnu++98</td>\n<td>gnu++11部分</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>4.6.4</td>\n<td>c++98</td>\n<td>c++0x部分</td>\n<td></td>\n<td></td>\n<td>gnu++98</td>\n<td>gnu++0x部分</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>4.5.4</td>\n<td>c++98</td>\n<td>c++0x部分</td>\n<td></td>\n<td></td>\n<td>gnu++98</td>\n<td>gnu++0x部分</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"安装的部分\"><a href=\"#安装的部分\" class=\"headerlink\" title=\"安装的部分\"></a>安装的部分</h2><table>\n<thead>\n<tr>\n<th>部分</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>c++</td>\n<td>gcc 的一个版木，默认语言设置为C++，而且在连接的时候自动包含标准 C++ 库。这和 g++ 一样</td>\n</tr>\n<tr>\n<td>ccl</td>\n<td>实际的C编译程序</td>\n</tr>\n<tr>\n<td>cclplus</td>\n<td>实际的 C++ 编泽程序</td>\n</tr>\n<tr>\n<td>collect2</td>\n<td>在不使用 GNU 连接程序的系统上，有必要运行 collect2 来产生特定的全局初始化代码（例如 C++ 的构造函数和析构函数）</td>\n</tr>\n<tr>\n<td>configure</td>\n<td>GCC 源代码树根目录中的一个脚木。用于设置配置值和创建GCC 编译程序必需的 make 程序的描述文件</td>\n</tr>\n<tr>\n<td>crt0.o</td>\n<td>这个初始化和结束代码是为每个系统定制的，而且也被编译进该文件，该文件然后会被连接到每个可执行文件中来执行必要的启动和终止程序</td>\n</tr>\n<tr>\n<td>cygwin1.dll</td>\n<td>Windows 的共享库提供的 API，模拟 UNIX 系统调用</td>\n</tr>\n<tr>\n<td>f77</td>\n<td>该驱动程序可用于编译 Fortran</td>\n</tr>\n<tr>\n<td>f771</td>\n<td>实际的 Fortran 编译程序</td>\n</tr>\n<tr>\n<td>g++</td>\n<td>gcc 的一个版木，默认语言设置为 C++，而且在连接的时候自动包含标准 C++ 库。这和 c++ 一样</td>\n</tr>\n<tr>\n<td>gcc</td>\n<td>该驱动程序等同于执行编译程序和连接程序以产生需要的输出</td>\n</tr>\n<tr>\n<td>gcj</td>\n<td>该驱动程序用于编译Java</td>\n</tr>\n<tr>\n<td>gnat1</td>\n<td>实际的 Ada 编译程序</td>\n</tr>\n<tr>\n<td>gnatbind</td>\n<td>一种工具，用于执行 Ada 语言绑定</td>\n</tr>\n<tr>\n<td>gnatlink</td>\n<td>一种工具，用于执行 Ada 语言连接</td>\n</tr>\n<tr>\n<td>jc1</td>\n<td>实际的 Java 编译程序</td>\n</tr>\n<tr>\n<td>libgcc</td>\n<td>该库包含的例程被作为编泽程序的一部分，是因为它们可被连接到实际的可执行程序中。 它们是特殊的例程，连接到可执行程序，来执行基木的任务，例如浮点运算。这些库中的例程通常都是平台相关的</td>\n</tr>\n<tr>\n<td>libgcj</td>\n<td>运行时库包含所有的核心 Java 类</td>\n</tr>\n<tr>\n<td>libobjc</td>\n<td>对所有 Objective-C 程序都必须的运行时库</td>\n</tr>\n<tr>\n<td>libstdc++</td>\n<td>运行时库，包括定义为标准语言一部分的所有的 C++ 类和函数</td>\n</tr>\n</tbody></table>\n<h2 id=\"安装的软件\"><a href=\"#安装的软件\" class=\"headerlink\" title=\"安装的软件\"></a>安装的软件</h2><table>\n<thead>\n<tr>\n<th>工具</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>addr2line</td>\n<td>给出一个可执行文件的内部地址，addr2line 使用文件中的调试信息将地址翻泽成源代码文 件名和行号。该程序是 binutils 包的一部分</td>\n</tr>\n<tr>\n<td>ar</td>\n<td>这是一个程序，可通过从文档中增加、删除和析取文件来维护库文件。通常使用该工具是为了创建和管理连接程序使用的目标库文档。该程序是 binutils 包的一部分</td>\n</tr>\n<tr>\n<td>as</td>\n<td>GNU 汇编器。实际上它是一族汇编器，因为它可以被编泽或能够在各种不同平台上工作。 该程序是 binutils 包的一部分</td>\n</tr>\n<tr>\n<td>autoconf</td>\n<td>产生的 shell 脚木自动配置源代码包去编泽某个特定版木的 UNIX</td>\n</tr>\n<tr>\n<td>c++filt</td>\n<td>程序接受被 C++ 编泽程序转换过的名字（不是被重载的），而且将该名字翻泽成初始形式。 该程序是 binutils 包的一部分</td>\n</tr>\n<tr>\n<td>f2c</td>\n<td>是 Fortran 到C的翻译程序。不是 GCC 的一部分</td>\n</tr>\n<tr>\n<td>gcov</td>\n<td>gprof 使用的配置工具，用来确定程序运行的时候哪一部分耗时最大</td>\n</tr>\n<tr>\n<td>gdb</td>\n<td>GNU 调试器，可用于检查程序运行时的值和行为</td>\n</tr>\n<tr>\n<td>GNATS</td>\n<td>GNU 的调试跟踪系统（GNU Bug Tracking System）。一个跟踪 GCC 和其他 GNU 软件问题的在线系统</td>\n</tr>\n<tr>\n<td>gprof</td>\n<td>该程序会监督编泽程序的执行过程，并报告程序中各个函数的运行时间，可以根据所提供 的配置文件来优化程序。该程序是 binutils 包的一部分</td>\n</tr>\n<tr>\n<td>ld</td>\n<td>GNU 连接程序。该程序将目标文件的集合组合成可执行程序。该程序是 binutils 包的一部</td>\n</tr>\n<tr>\n<td>libtool</td>\n<td>一个基本库，支持 make 程序的描述文件使用的简化共享库用法的脚木</td>\n</tr>\n<tr>\n<td>make</td>\n<td>一个工具程序，它会读 makefile 脚木来确定程序中的哪个部分需要编泽和连接，然后发布 必要的命令。它读出的脚木（叫做 makefile 或 Makefile）定义了文件关系和依赖关系</td>\n</tr>\n<tr>\n<td>nlmconv</td>\n<td>将可重定位的目标文件转换成 NetWare 可加载模块（NetWare Loadable Module, NLM）。该 程序是 binutils 的一部分</td>\n</tr>\n<tr>\n<td>nm</td>\n<td>列出目标文件中定义的符号。该程序是 binutils 包的一部分</td>\n</tr>\n<tr>\n<td>objcopy</td>\n<td>将目标文件从一种二进制格式复制和翻译到另外一种。该程序是 binutils 包的一部分</td>\n</tr>\n<tr>\n<td>objdump</td>\n<td>显示一个或多个目标文件中保存的多种不同信息。该程序是 binutils 包的一部分</td>\n</tr>\n<tr>\n<td>ranlib</td>\n<td>创建和添加到 ar 文档的索引。该索引被 Id 使用来定位库中的模块。该程序是 binutils 包的一部分</td>\n</tr>\n<tr>\n<td>ratfor</td>\n<td>Ratfor 预处理程序可由 GCC 激活，但不是标准 GCC 发布版的一部分</td>\n</tr>\n<tr>\n<td>readelf</td>\n<td>从 ELF 格式的目标文件显示信息。该程序是 binutils 包的一部分</td>\n</tr>\n<tr>\n<td>size</td>\n<td>列出目标文件中每个部分的名字和尺寸。该程序是 binutils 包的一部分</td>\n</tr>\n<tr>\n<td>strings</td>\n<td>浏览所有类型的文件，析取出用于显示的字符串。该程序是 binutils 包的一部分</td>\n</tr>\n<tr>\n<td>strip</td>\n<td>从目标文件或文档库中去掉符号表，以及其他调试所需的信息。该程序是 binutils 包的一部</td>\n</tr>\n<tr>\n<td>vcg</td>\n<td>Ratfor 浏览器从文木文件中读取信息，并以图表形式显示它们。而 vcg 工具并不是 GCC 发布中的一部分，但 -dv 选项可被用来产生 vcg 可以理解的优化数据的格式</td>\n</tr>\n<tr>\n<td>windres</td>\n<td>Window 资源文件编泽程序。该程序是 binutils 包的一部分</td>\n</tr>\n</tbody></table>\n<h1 id=\"GCC实验\"><a href=\"#GCC实验\" class=\"headerlink\" title=\"GCC实验\"></a>GCC实验</h1><p>从源代码转变为可执行代码的过程，具体可分为 4 个过程：预处理、编译、汇编和链接。</p>\n<h2 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h2><p>预处理操作，主要是处理那些源文件和头文件中以#开头的命令（比如 #include、#define、#ifdef 等），并删除程序中所有的注释。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//hello.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行命令, 生成hello.i文件</span><br><span class=\"line\">gcc -E hello.c -o hello.i</span><br><span class=\"line\">或者执行命令, 生成hello.i文件</span><br><span class=\"line\">gcc -E -C hello.c -o hello.i</span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th>gcc -E 常用选项选 项</th>\n<th>功 能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-D name[&#x3D;definition]</td>\n<td>在处理源文件之前，先定义宏 name。宏name必须是在源文件和头文件中都没有被定义过的。将该选项搭配源代码中的#ifdef name命令使用，可以实现条件式编译。如果没有指定一个替换的值（即省略 &#x3D;definition），该宏被定义为值 1。</td>\n</tr>\n<tr>\n<td>-U name</td>\n<td>如果在命令行或 GCC 默认设置中定义过宏name，则<strong>取消</strong>name 的定义。-D 和 -U 选项会依据在命令行中出现的先后顺序进行处理。</td>\n</tr>\n<tr>\n<td>-include file</td>\n<td>如同在源代码中添加 #include <strong>file</strong> 一样。</td>\n</tr>\n<tr>\n<td>-iquote dir</td>\n<td>对于以引号（#include “”）导入的头文件中，-iquote 指令可以指定该头文件的搜索路径。当GCC在源程序所在目录下找不到此头文件时，就会去-iquote指令指定的目录中查找。</td>\n</tr>\n<tr>\n<td>-I dir</td>\n<td>同时适用于以引号 “” 和 &lt;&gt; 导入的头文件。当GCC在-iquote 指令指定的目录下搜索头文件失败时，会再自动去 -I 指定的目录中查找。该选项在 GCC10.1版本中已被弃用，并建议用 -iquote 选项代替。</td>\n</tr>\n<tr>\n<td>-isystem dir</td>\n<td>用于指定搜索头文件的目录，适用于以引号 “” 和 &lt;&gt; 导入的头文件。</td>\n</tr>\n<tr>\n<td>-idirafter dir</td>\n<td>用于指定搜索头文件的目录，适用于以引号 “” 和 &lt;&gt; 导入的头文件。</td>\n</tr>\n</tbody></table>\n<p>其中，对于指定 #include 搜索路径的几个选项，作用的先后顺序如下：</p>\n<ul>\n<li>对于用 #include “” 引号形式引入的头文件，首先搜索当前程序文件所在的目录，其次再前往 -iquote 选项指定的目录中查找；</li>\n<li>前往 -I 选项指定的目录中搜索；</li>\n<li>前往 -isystem 选项指定的目录中搜索；</li>\n<li>前往默认的系统路径下搜索；</li>\n<li>前往 -idirafter 选项指定的目录中搜索。</li>\n</ul>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>对已得到的预处理文件进行编译，将其再加工为相应的汇编文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//hello.c</span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">int main(void)&#123;</span><br><span class=\"line\">\tprintf(&quot;hello world!\\n&quot;);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">汇编命令,生成hello.s文件,GCC编译器只需编译此文件</span><br><span class=\"line\">gcc -S hello.i</span><br><span class=\"line\"></span><br><span class=\"line\">汇编命令,生成hello.s文件,GCC编译器进行预处理和编译这2步操作</span><br><span class=\"line\">gcc -S hello.c</span><br><span class=\"line\"></span><br><span class=\"line\">-fverbose-asm选项提高汇编代码的可读性</span><br><span class=\"line\">gcc -S hello.c -fverbose-asm</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h2><p>汇编其实就是将汇编代码转换成可以执行的机器指令。大部分汇编语句对应一条机器指令，有的汇编语句对应多条机器指令。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//hello.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world!\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">汇编命令，生成hello.o文件，执行汇编这<span class=\"number\">1</span>步操作</span><br><span class=\"line\">gcc -i hello.i</span><br><span class=\"line\"></span><br><span class=\"line\">汇编命令，生成hello.o文件，执行编译以及汇编这<span class=\"number\">2</span>步操作</span><br><span class=\"line\">gcc -c hello.s</span><br><span class=\"line\"></span><br><span class=\"line\">汇编命令，生成hello.o文件，执行预处理、编译以及汇编这 <span class=\"number\">3</span> 步操作</span><br><span class=\"line\">gcc -c hello.c</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>链接：把多个二进制的目标文件（object file）链接成一个单独的可执行文件。GCC的<code>-l</code>选项可以让我们手动添加链接库。</p>\n<p>标准库的大部分函数通常放在文件 libc.a中，或者放在用于共享的动态链接文件libc.so中，当使用GCC编译和链接程序时，GCC默认会链接 libc.a或者libc.so。</p>\n<p>对于其他的库（例如非标准库、第三方库等），链接时需要手动添加。</p>\n<p>另外，标准头文件math.h对应的数学库默认不会被链接，数学库的文件名是libm.a或libm.so，前缀<code>lib</code>和后缀<code>.a</code>或<code>.so</code>是标准的，<code>m</code>是基本名。</p>\n<blockquote>\n<p>GCC会在<code>-l</code>选项后紧跟着的基本名称的基础上自动添加这些前缀、后缀</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//cos.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PI 3.14</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span> <span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> param, result;</span><br><span class=\"line\">    param = <span class=\"number\">60.0</span>;</span><br><span class=\"line\">    result = <span class=\"built_in\">cos</span> ( param * PI / <span class=\"number\">180.0</span> );</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;The cos of %f degrees is %f.\\n&quot;</span>, param, result );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#执行报错，undefined reference to `<span class=\"built_in\">cos</span><span class=\"number\">&#x27;</span></span><br><span class=\"line\">gcc <span class=\"built_in\">cos</span>.c</span><br><span class=\"line\"></span><br><span class=\"line\">#使用-l选项链接数学库,数学库的文件名是libm.a</span><br><span class=\"line\">gcc <span class=\"built_in\">cos</span>.c -o <span class=\"built_in\">cos</span>.out -lm</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n\n\n<p>链接其它目录中的库</p>\n<ul>\n<li><p>把链接库作为一般的目标文件，为GCC指定链接库的完整路径与文件名 gcc </p>\n<blockquote>\n<p>libm.so在不同系统下文件位置可能不同，例如:</p>\n<p> gcc cos.c &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libm.so</p>\n</blockquote>\n</li>\n<li><p>使用<code>-L</code>选项，为GCC增加搜索链接库的目录。可以使用多个<code>-L</code>选项，或者在一个<code>-L</code>选项内使用冒号分割的路径列表。</p>\n<blockquote>\n<p>libm.so在不同系统下文件位置可能不同，例如:</p>\n<p>gcc cos.c -o main.out -L&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu -lm</p>\n</blockquote>\n</li>\n<li><p>把包括所需链接库的目录加到环境变量LIBRARYPATH中。</p>\n</li>\n</ul>\n<h2 id=\"静态库\"><a href=\"#静态库\" class=\"headerlink\" title=\"静态库\"></a>静态库</h2><p>生成静态库或者将一个obj文件加入到静态库，命令是”ar 库文件 obj文件1 obj文件2”</p>\n<p>帮助命令: ar –help</p>\n<blockquote>\n<p>例如: 将string.打包为库文件libstr.a</p>\n<p>$ar -rcs libstr.a string.o</p>\n</blockquote>\n<h2 id=\"共享的动态库\"><a href=\"#共享的动态库\" class=\"headerlink\" title=\"共享的动态库\"></a>共享的动态库</h2><blockquote>\n<p>生成共享库</p>\n<p>标准格式: gcc -shared -Wl,-soname,your_soname -o library_name file_list library_list</p>\n</blockquote>\n<h1 id=\"cmake构建\"><a href=\"#cmake构建\" class=\"headerlink\" title=\"cmake构建\"></a>cmake构建</h1><h2 id=\"常见的构建方式\"><a href=\"#常见的构建方式\" class=\"headerlink\" title=\"常见的构建方式\"></a>常见的构建方式</h2><p><a href=\"https://github.com/agui93/agui93-moonlight/tree/master/cmake-tutorials\">agui93-cmake-tutorials</a>  </p>\n<p>todo 补充cmake生成库的构建样例</p>\n<h1 id=\"make\"><a href=\"#make\" class=\"headerlink\" title=\"make\"></a>make</h1><p>按照一个项目工程,集成make特性。项目地址：<a href=\"https://github.com/agui93/agui93-moonlight/tree/master/make-experiments\">agui93-make-experiments</a> </p>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>功能   集成的特性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>step1</td>\n<td>使用shell脚本 按步骤编译</td>\n</tr>\n<tr>\n<td>step2</td>\n<td>使用shell脚本 整体编译</td>\n</tr>\n<tr>\n<td>step3</td>\n<td>make  简单规则</td>\n</tr>\n<tr>\n<td>step4</td>\n<td>make 自定义变量 预定义变量 模式匹配</td>\n</tr>\n<tr>\n<td>step5</td>\n<td>make 搜索路径</td>\n</tr>\n<tr>\n<td>step6</td>\n<td>make 自动推导规则</td>\n</tr>\n<tr>\n<td>step7</td>\n<td>make 递归</td>\n</tr>\n</tbody></table>\n<h2 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h2><p>make命令执行时先在Makefile文件中查找各种规则，对各种规则进行解析后运行规则。</p>\n<p>规则的基本格式</p>\n<figure class=\"highlight make\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">targets: prerequisites</span></span><br><span class=\"line\">   command</span><br><span class=\"line\">   command</span><br><span class=\"line\">   command</span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th>规则中的元素</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TARGET</td>\n<td>规则所定义的目标</td>\n</tr>\n<tr>\n<td>DEPENDEDS</td>\n<td>执行此规则所必须的依赖条件</td>\n</tr>\n<tr>\n<td>COMMAND</td>\n<td>规则所执行的命令，即规则的动作</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>规则元素</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>目标</strong></td>\n<td>目标可以是具体的文件，也可以是某个动作</td>\n</tr>\n<tr>\n<td><strong>依赖项</strong></td>\n<td>依赖项是目标生成所必须满足的条件，即依赖项的动作必须在TARGET的命令之前执行。<br/>依赖项之间的顺序按照自左向右的顺序检查或者执行</td>\n</tr>\n<tr>\n<td><strong>命令</strong></td>\n<td>命令行必须以Tab键开始，make程序把出现在一条规则之后的所有连续的以Tab键开始的行都作为命令行处理</td>\n</tr>\n<tr>\n<td><strong>反斜杠(\\)</strong></td>\n<td>用反斜杠(\\)将较长的行分解为多行。</td>\n</tr>\n<tr>\n<td><strong>规则的嵌套</strong></td>\n<td>规则之间是可以嵌套的，通常通过依赖项实现</td>\n</tr>\n<tr>\n<td><strong>文件的时间戳</strong></td>\n<td>make命令执行的时候会根据文件的时间戳判定是否执行相关的命令，并且执行依赖于此项的规则。</td>\n</tr>\n<tr>\n<td><strong>模式匹配</strong></td>\n<td>%符号   *符号</td>\n</tr>\n</tbody></table>\n<h2 id=\"预定义变量\"><a href=\"#预定义变量\" class=\"headerlink\" title=\"预定义变量\"></a>预定义变量</h2><table>\n<thead>\n<tr>\n<th>变量</th>\n<th>含义</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AR</td>\n<td>生成静态库库文件的程序名称</td>\n<td>ar</td>\n</tr>\n<tr>\n<td>AS</td>\n<td>汇编编译器的名称</td>\n<td>as</td>\n</tr>\n<tr>\n<td>CC</td>\n<td>C语言编译器名称</td>\n<td>cc</td>\n</tr>\n<tr>\n<td>CPP</td>\n<td>C语言预编译器的名称</td>\n<td>${CC} -E</td>\n</tr>\n<tr>\n<td>CXX</td>\n<td>C++语言编译器名称</td>\n<td>g++</td>\n</tr>\n<tr>\n<td>FC</td>\n<td>FORTRAN语言编译器的名称</td>\n<td>f77</td>\n</tr>\n<tr>\n<td>RM</td>\n<td>删除程序文件的名称</td>\n<td>rm -f</td>\n</tr>\n<tr>\n<td>ARFLAGS</td>\n<td>生成静态库库文件程序的选项</td>\n<td>无默认值</td>\n</tr>\n<tr>\n<td>ASFLAGS</td>\n<td>汇编语言编译器的编译选项</td>\n<td>无默认值</td>\n</tr>\n<tr>\n<td>CFLAGS</td>\n<td>C语言编译器的编译选项</td>\n<td>无默认值</td>\n</tr>\n<tr>\n<td>CPPFLAGS</td>\n<td>C语言预编译的编译选项</td>\n<td>无默认值</td>\n</tr>\n<tr>\n<td>CXXFLAGS</td>\n<td>C++语言编译器的编译选项</td>\n<td>无默认值</td>\n</tr>\n<tr>\n<td>FFLAGS</td>\n<td>FORTRAN语言编译器的编译选项</td>\n<td>无默认值</td>\n</tr>\n</tbody></table>\n<h2 id=\"自动变量\"><a href=\"#自动变量\" class=\"headerlink\" title=\"自动变量\"></a>自动变量</h2><table>\n<thead>\n<tr>\n<th>变量</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$*</td>\n<td>表示目标文件的名称，不包含目标文件的扩展名</td>\n</tr>\n<tr>\n<td>$+</td>\n<td>表示所有的依赖条件，这些依赖条件直接以<strong>空格</strong>分开，按照出现的先后为<strong>顺序</strong>,其中可能包含重复的依赖条件</td>\n</tr>\n<tr>\n<td>$&lt;</td>\n<td>表示依赖项中第一个依赖文件的名称</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>依赖项中，所有目标文件时间戳晚的依赖文件，依赖文件之间以空格分开</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>目标项中目标文件的名称</td>\n</tr>\n<tr>\n<td>$^</td>\n<td>依赖项中，所有不重复的依赖条件，这些文件之间以空格分开</td>\n</tr>\n</tbody></table>\n<h2 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a>模式匹配</h2><figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">targets ...: target-pattern: prereq-patterns ...</span><br><span class=\"line\">   commands</span><br></pre></td></tr></table></figure>\n\n\n\n<p>The essence is that the given target is matched by the target-pattern (via a <code>%</code> wildcard). Whatever was matched is called the <em>stem</em>. The stem is then substituted into the prereq-pattern, to generate the target’s prereqs.</p>\n<p>演示:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">objects = foo.o bar.o all.o</span><br><span class=\"line\"><span class=\"section\">all: <span class=\"variable\">$(objects)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># These files compile via implicit rules</span></span><br><span class=\"line\"><span class=\"comment\"># Syntax - targets ...: target-pattern: prereq-patterns ...</span></span><br><span class=\"line\"><span class=\"comment\"># In the case of the first target, foo.o, the target-pattern matches foo.o and sets the &quot;stem&quot; to be &quot;foo&quot;.</span></span><br><span class=\"line\"><span class=\"comment\"># It then replaces the &#x27;%&#x27; in prereq-patterns with that stem</span></span><br><span class=\"line\"><span class=\"variable\">$(objects)</span>: %.o: %.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all.c:</span></span><br><span class=\"line\">    echo <span class=\"string\">&quot;int main() &#123; return 0; &#125;&quot;</span> &gt; all.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">%.c:</span></span><br><span class=\"line\">    touch <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">    rm -f *.c *.o all</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"搜索路径\"><a href=\"#搜索路径\" class=\"headerlink\" title=\"搜索路径\"></a>搜索路径</h2><figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">vpath</span> &lt;pattern&gt; &lt;directories, space/colon separated&gt;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">vpath = path1:path2:.</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"自动推导规则\"><a href=\"#自动推导规则\" class=\"headerlink\" title=\"自动推导规则\"></a>自动推导规则</h2><p>Perhaps the most confusing part of make is the magic rules and variables that are made. Here’s a list of implicit rules:</p>\n<ul>\n<li>Compiling a C program: <code>n.o</code> is made automatically from <code>n.c</code> with a command of the form <code>$(CC) -c $(CPPFLAGS) $(CFLAGS)</code></li>\n<li>Compiling a C++ program: <code>n.o</code> is made automatically from <code>n.cc</code> or <code>n.cpp</code> with a command of the form <code>$(CXX) -c $(CPPFLAGS) $(CXXFLAGS)</code></li>\n<li>Linking a single object file: <code>n</code> is made automatically from <code>n.o</code> by running the command <code>$(CC) $(LDFLAGS) n.o $(LOADLIBES) $(LDLIBS)</code></li>\n</ul>\n<p>the important variables used by implicit rules are:</p>\n<ul>\n<li><code>CC</code>: Program for compiling C programs; default cc</li>\n<li><code>CXX</code>: Program for compiling C++ programs; default G++</li>\n<li><code>CFLAGS</code>: Extra flags to give to the C compiler</li>\n<li><code>CXXFLAGS</code>: Extra flags to give to the C++ compiler</li>\n<li><code>CPPFLAGS</code>: Extra flags to give to the C preprocessor</li>\n<li><code>LDFLAGS</code>: Extra flags to give to compilers when they are supposed to invoke the linker</li>\n</ul>\n<p>演示:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">CC = gcc <span class=\"comment\"># Flag for implicit rules</span></span><br><span class=\"line\">CFLAGS = -g <span class=\"comment\"># Flag for implicit rules. Turn on debug info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Implicit rule #1: blah is built via the C linker implicit rule</span></span><br><span class=\"line\"><span class=\"comment\"># Implicit rule #2: blah.o is built via the C compilation implicit rule, because blah.c exists</span></span><br><span class=\"line\"><span class=\"section\">blah: blah.o</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">blah.c:</span></span><br><span class=\"line\">    echo <span class=\"string\">&quot;int main() &#123; return 0; &#125;&quot;</span> &gt; blah.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">    rm -f blah*</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"make递归\"><a href=\"#make递归\" class=\"headerlink\" title=\"make递归\"></a>make递归</h2><p>To recursively call a makefile, use the special <code>$(MAKE)</code> instead of <code>make</code> because it will pass the make flags for you and won’t itself be affected by them.</p>\n<p>The export directive takes a variable and makes it accessible to sub-make commands. </p>\n<h2 id=\"make中的函数\"><a href=\"#make中的函数\" class=\"headerlink\" title=\"make中的函数\"></a>make中的函数</h2><p>获取匹配模式的文件名</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$(wilcard PATTERN)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>模式替换</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">patsubst</span> pattern,replacement,text)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>循环函数</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">foreach</span> VAR,LIST,TEXT)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"gdb\"><a href=\"#gdb\" class=\"headerlink\" title=\"gdb\"></a>gdb</h1><h2 id=\"gdb命令\"><a href=\"#gdb命令\" class=\"headerlink\" title=\"gdb命令\"></a>gdb命令</h2><p><img src=\"/flame/images/c-language/gdb-commands-help.png\" alt=\"gdb-命令-help\"></p>\n<h2 id=\"gdb待整理\"><a href=\"#gdb待整理\" class=\"headerlink\" title=\"gdb待整理\"></a>gdb待整理</h2><p><a href=\"https://www.kancloud.cn/wizardforcel/gdb-tips-100/146708\">https://www.kancloud.cn/wizardforcel/gdb-tips-100/146708</a></p>\n<p><strong>gdbinit</strong></p>\n<p><a href=\"https://github.com/cyrus-and/gdb-dashboard\">https://github.com/cyrus-and/gdb-dashboard</a> <a href=\"https://www.helplib.com/GitHub/article_129194\">https://www.helplib.com/GitHub/article_129194</a><br><a href=\"https://www.cntofu.com/book/46/gdb/gdb_dashboard_debug_info_at_a_glance.md\">https://www.cntofu.com/book/46/gdb/gdb_dashboard_debug_info_at_a_glance.md</a> <a href=\"https://www.helplib.com/GitHub/article_129194\">https://www.helplib.com/GitHub/article_129194</a></p>\n<p><a href=\"https://github.com/gdbinit/Gdbinit\">https://github.com/gdbinit/Gdbinit</a></p>\n<p><a href=\"https://github.com/longld/peda\">https://github.com/longld/peda</a></p>\n<p><a href=\"https://github.com/hugsy/gef\">https://github.com/hugsy/gef</a></p>\n<p>堆栈查看; 汇编含义的解读; 寄存器查看; memeory查看</p>\n<h1 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h1><p>《c和指针》</p>\n<p>《LINUX网络编程第2版》</p>\n<p><a href=\"https://blog.csdn.net/jinking01/article/details/121235879\">Linux动态链接库的创建与使用</a></p>\n<p><a href=\"https://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html\">Shared libraries with GCC on Linux</a></p>\n<p><a href=\"http://c.biancheng.net/view/679.html\">GCC的组成</a></p>\n<p><a href=\"http://c.biancheng.net/view/2382.html\">手动添加链接库</a></p>\n<p><a href=\"https://cmake.org/cmake/help/git-stage/guide/tutorial/index.html\">CMake Tutorial</a></p>\n<p><a href=\"https://github.com/Kitware/CMake/tree/master/Help/guide/tutorial\">CMake Tutorial Guide</a></p>\n<p><a href=\"https://www.cnblogs.com/52php/p/5681745.html\">CMake实践笔记</a></p>\n<p><a href=\"https://makefiletutorial.com/#top\">makefile tutorial</a></p>\n<p><a href=\"http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/\">maketutor</a></p>\n<p><a href=\"https://www.tutorialspoint.com/makefile/\">make tutorialspoint</a><br><a href=\"https://www.gnu.org/software/make/manual/html_node/index.html#toc-An-Introduction-to-Makefiles\">gnu make</a></p>\n<p><a href=\"https://gcc.gnu.org/onlinedocs/\">gcc onlinedocs</a></p>\n","categories":["c","tools","cmake","make","gcc","cmake","make","lib"],"tags":["c","tools"]},{"title":"kubernetes","url":"/flame/2021/12/04/container/kubernetes/","content":"<p>Kubernetes : 容器编排引擎的事实标准</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://kubernetes.io/docs/concepts/\">Concepts</a></p>\n<h1 id=\"Concept\"><a href=\"#Concept\" class=\"headerlink\" title=\"Concept\"></a>Concept</h1><ul>\n<li>Cluster</li>\n<li>Master</li>\n<li>Node</li>\n<li>Pod</li>\n<li>Controller</li>\n<li>Service</li>\n<li>Namespace</li>\n</ul>\n<blockquote>\n<p>Cluster是计算、存储和网络资源的集合，Kubernetes利用这些资源运行各种基于容器的应用。</p>\n<p>Master是Cluster的大脑，它的主要职责是调度，即决定将应用放在哪里运行。为了实现高可用，可以运行多个Master</p>\n<p>Node的职责是运行容器应用，由Master管理，Node负责监控并汇报容器的状态，同时根据Master的要求管理容器的生命周期</p>\n<p>Pod是k8s的最小工作单元。每个Pod包含一个或多个容器，Pod中的容器会作为一个整体被Master调度到一个Node上运行</p>\n<p>Controller管理Pod，定义了Pod的部署特性，为了满足不同的业务场景，k8s提供了多种Controller，包括Deployment、ReplicaSet、DaemonSet、StatefuleSet、Job等</p>\n<p>Service定义了外界访问一组特定Pod的方式。Service有自己的IP和端口，Service为Pod提供了负载均衡。</p>\n<p>Namespace可以将一个物理的Cluster逻辑上划分成多个虚拟Cluster，每个Cluster就是一个Namespace。不同Namespace里的资源是完全隔离的。</p>\n</blockquote>\n<hr>\n<p><strong>Pod</strong></p>\n<p>Kubernetes引入Pod主要基于下面两个目的：</p>\n<ul>\n<li><p>可管理性</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Pod提供了比容器更高层次的抽象，将它们封装到一个部署单元中。</span><br><span class=\"line\">Kubernetes以Pod为最小单位进行调度、扩展、共享资源、管理生命周期</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>通信和资源共享</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Pod中的所有容器使用同一个网络namespace，即相同的IP地址和Port空间，可以直接用localhost通信</span><br><span class=\"line\">可以共享存储，当Kubernetes挂载volume到Pod，本质上是将volume挂载到Pod中的每一个容器。</span><br></pre></td></tr></table></figure></blockquote>\n</li>\n</ul>\n<p>Pods有两种使用方式</p>\n<ul>\n<li><p>one-container-per-pod</p>\n<blockquote>\n<p>只是将单个容器简单封装成Pod</p>\n</blockquote>\n</li>\n<li><p>运行多个容器</p>\n<blockquote>\n<p>这些容器联系必须非常紧密，而且需要直接共享资源</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<p><strong>Controller</strong></p>\n<p>Controller管理Pod，定义了Pod的部署特性，为了满足不同的业务场景，Kubernetes提供了多种Controller，包括Deployment、ReplicaSet、DaemonSet、StatefuleSet、Job等。</p>\n<ul>\n<li><p>Deployment是最常用的Controller，可以管理Pod的多个副本，并确保Pod按照期望的状态运行</p>\n</li>\n<li><p>ReplicaSet实现了Pod的多副本管理。使用Deployment时会自动创建ReplicaSet，Deployment是通过ReplicaSet来管理Pod的多个副本，通常不需要直接使用ReplicaSet</p>\n</li>\n<li><p>DaemonSet用于每个Node最多只运行一个Pod副本的场景，DaemonSet通常用于运行daemon</p>\n</li>\n<li><p>StatefuleSet能够保证Pod的每个副本在整个生命周期中名称是不变的，而其他Controller不提供这个功能。当某个Pod发生故障需要删除并重新启动时，Pod的名称会发生变化，同时StatefuleSet会保证副本按照固定的顺序启动、更新或者删除</p>\n</li>\n<li><p>Job用于运行结束就删除的应用，而其他Controller中的Pod通常是长期持续运行</p>\n</li>\n</ul>\n<hr>\n<p><strong>Namespace</strong></p>\n<p>不同Namespace里的资源是完全隔离的，k8s默认创建了两个Namespace</p>\n<ul>\n<li>default：创建资源时如果不指定，将被放到这个Namespace中。</li>\n<li>kube-system：Kubernetes自己创建的系统资源将放到这个Namespace中。</li>\n</ul>\n<h1 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h1><p><strong>how to install</strong></p>\n<ul>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl-linux\">Install kubectl on Linux</a></li>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl-macos\">Install kubectl on macOS</a>  &amp;&amp;  <a href=\"https://github.com/maguowei/k8s-docker-desktop-for-mac\">k8s-docker-desktop-for-mac</a></li>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl-windows\">Install kubectl on Windows</a></li>\n</ul>\n<p><strong>kubelet、kubeadm和kubectl</strong>命令</p>\n<ul>\n<li>kubelet运行在Cluster所有节点上，负责启动Pod和容器。</li>\n<li>kubeadm用于初始化Cluster。</li>\n<li>kubectl是Kubernetes命令行工具。通过kubectl可以部署和管理应用，查看各种资源，创建、删除和更新各种组件。</li>\n</ul>\n<h1 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h1><p>Kubernetes Cluster由Master和Node组成，节点上运行着若干Kubernetes服务。</p>\n<h2 id=\"Master节点\"><a href=\"#Master节点\" class=\"headerlink\" title=\"Master节点\"></a>Master节点</h2><p>Master是Kubernetes Cluster的大脑，运行着的Daemon服务，包括:</p>\n<ul>\n<li>API Server（kube-apiserver）</li>\n<li>Scheduler（kube-scheduler）</li>\n<li>Controller Manager（kube-controller-manager）</li>\n<li>etcd</li>\n<li>Pod网络（例如fannel）</li>\n</ul>\n<p><strong>API Server</strong></p>\n<p>API Server提供HTTP&#x2F;HTTPS RESTful API，即Kubernetes API。API Server是Kubernetes Cluster的前端接口，各种客户端工具（CLI或UI）以及Kubernetes其他组件可以通过它管理Cluster的各种资源。</p>\n<p><strong>Scheduler</strong></p>\n<p>Scheduler负责决定将Pod放在哪个Node上运行。Scheduler在调度时会充分考虑Cluster的拓扑结构，当前各个节点的负载，以及应用对高可用、性能、数据亲和性的需求</p>\n<p><strong>Controller Manager</strong></p>\n<p>Controller Manager负责管理Cluster各种资源，保证资源处于预期的状态。Controller Manager由多种controller组成，包括replication controller、endpoints controller、namespace controller、serviceaccounts controller等。</p>\n<p>不同的controller管理不同的资源。例如，replication controller管理Deployment、StatefulSet、DaemonSet的生命周期，namespace controller管理Namespace资源。</p>\n<p><strong>etcd</strong></p>\n<p>etcd负责保存Kubernetes Cluster的配置信息和各种资源的状态信息。当数据发生变化时，etcd会快速地通知Kubernetes相关组件。</p>\n<p><strong>Pod网络</strong></p>\n<p> Pod要能够相互通信，Kubernetes Cluster必须部署Pod网络，fannel是其中一个可选方案</p>\n<h2 id=\"Node节点\"><a href=\"#Node节点\" class=\"headerlink\" title=\"Node节点\"></a>Node节点</h2><p>Node是Pod运行的地方，Kubernetes支持Docker、rkt等容器Runtime。</p>\n<p>Node上运行的Kubernetes组件有kubelet、kube-proxy和Pod网络（例如fannel）</p>\n<p><strong>kubelet</strong></p>\n<p>kubelet是Node的agent，当Scheduler确定在某个Node上运行Pod后，会将Pod的具体配置信息（image、volume等）发送给该节点的kubelet，kubelet根据这些信息创建和运行容器，并向Master报告运行状态。</p>\n<p><strong>kube-proxy</strong></p>\n<p>service在逻辑上代表了后端的多个Pod，外界通过service访问Pod。service接收到的请求是如何转发到Pod的呢？每个Node都会运行kube-proxy服务，它负责将访问service的TCP&#x2F;UPD数据流转发到后端的容器。如果有多个副本，kube-proxy会实现负载均衡。</p>\n<p><strong>Pod</strong>网络</p>\n<p>Pod要能够相互通信，Kubernetes Cluster必须部署Pod网络，fannel是其中一个可选方案。</p>\n<h1 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h1><p><img src=\"/flame/images/containers/k8s-experiment-arch.png\" alt=\"k8s架构演示\"></p>\n<p>几乎所有的Kubernetes组件本身也运行在Pod里，kubelet是唯一没有以容器形式运行的Kubernetes组件。Kubernetes的系统组件都被放到kube-system namespace中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">//查看系统组件</span><br><span class=\"line\">kubectl get pot --all-namepaces -o wide</span><br></pre></td></tr></table></figure>\n\n<p><strong>question</strong>: 为什么k8s-master上也有kubelet和kube-proxy呢？ </p>\n<p>因为Master上也可以运行应用，即Master同时也是一个Node。</p>\n","categories":["container","kubernetes"],"tags":["container","kubernetes"]},{"title":"java concurrency","url":"/flame/2021/12/01/java/java-concurrency/","content":"<p><strong>java之并发编程</strong></p>\n<ul>\n<li><p>挑战</p>\n</li>\n<li><p>原理</p>\n<ul>\n<li><p>JMM</p>\n</li>\n<li><p>Unsafe API</p>\n</li>\n<li><p>Memory Barriers</p>\n</li>\n</ul>\n</li>\n<li><p>应用</p>\n<ul>\n<li>Threads and Locks</li>\n<li>Package java.util.concurrent</li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n\n\n\n\n\n\n<h1 id=\"Challenges\"><a href=\"#Challenges\" class=\"headerlink\" title=\"Challenges\"></a>Challenges</h1><p>并发编程的挑战:</p>\n<ul>\n<li>上下文切换的开销</li>\n<li>线程创建和销毁的开销</li>\n<li>死锁</li>\n<li>软硬件资源限制</li>\n</ul>\n<p><strong>如何减少上下文切换</strong>       </p>\n<ul>\n<li><strong>无锁并发编程</strong>：多线程竞争锁时，会引起上下文切换，可以用一些办法来避免使用锁</li>\n<li><strong>CAS算法</strong>：java的Atomic包使用CAS算法来更新数据，而不需要加锁。</li>\n<li><strong>使用最少线程</strong>: 避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，这样会造成大量线程都处于等待状态</li>\n<li><strong>协程</strong>: 在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换</li>\n</ul>\n<p>上下文切换的衡量</p>\n<ul>\n<li>使用Lmbench3可以测量上下文切换的时长。</li>\n<li>使用vmstat可以测量上下文切换的次数。</li>\n</ul>\n<p><strong>死锁</strong></p>\n<ul>\n<li><p><strong>后果</strong>:一旦产生死锁，就会造成系统功能不可用.</p>\n</li>\n<li><p><strong>定位</strong>:一旦出现死锁，业务不能继续提供服务了，通过dump线程查看到底是哪个线程出现了问题。</p>\n</li>\n</ul>\n<p><strong>避免死锁</strong>:                </p>\n<ul>\n<li>避免一个线程同时获取多个锁。</li>\n<li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</li>\n<li>尝试使用定时锁，使用lock.tryLock（timeout）来替代使用内部锁机制。</li>\n<li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li>\n</ul>\n<p><strong>资源限制</strong></p>\n<p><strong>什么是资源限制</strong>       </p>\n<p>资源限制是指在进行并发编程时，程序的执行速度受限于计算机硬件资源或软件资源。        </p>\n<p>例如:网络带宽 硬盘读写速度 CPU处理速度 数据库连接数  socket连接数等       </p>\n<p><strong>资源限制引发的并发问题</strong>        </p>\n<p>在并发编程中，将代码执行速度加快的原则是将代码中串行执行的部分变成并发执行。</p>\n<p>但是如果将某段串行的代码并发执行，因为受限于资源，仍然在串行执行，这时候程序不仅不会加快执行，反而会更慢，因为增加了上下文切换和资源调度的时间。</p>\n<p><strong>如何解决资源限制的问题</strong>       </p>\n<p>对于硬件资源限制，可以考虑使用集群并行执行程序。       </p>\n<p>对于软件资源限制，可以考虑使用资源池复用资源。比如使用连接池将数据库和Socket连接复用，或者在调用对方webservice接口获取数据时，只建立一个连接。        </p>\n<p><strong>在资源限制情况下进行并发编程</strong>        </p>\n<p>根据不同的资源限制调整程序的并发度</p>\n<h1 id=\"JMM\"><a href=\"#JMM\" class=\"headerlink\" title=\"JMM\"></a>JMM</h1><p><strong>重排序(reorder)</strong></p>\n<p>​\t 编译机和java虚拟机通过改变程序的处理顺序来优化程序，在多线程程序里，有时会发生明显由重排序引发的问题。</p>\n<hr>\n<p><strong>可见性 (visibility)</strong></p>\n<p>​       当一个线程向一个共享变量写入某个值，这个值对另一个线程是否可见</p>\n<hr>\n<p><strong>共享内存(shared memory)</strong></p>\n<p>​\t共享内存是所有线程共享的存储空间，也就是堆内存。在JMM中,只有可以被多个线程访问的共享内存才会出问题。</p>\n<blockquote>\n<p>Memory that can be shared between threads is called shared memory or heap memory.</p>\n</blockquote>\n<p>​     所有实例域、静态域和数组元素都存储在堆内存，线程间共享。</p>\n<p>​     局部变量,方法参数和异常处理器参数不会在线程之间共享，没有内存可见性问题，不受内存模型影响。</p>\n<hr>\n<p><strong>synchronized关键字</strong></p>\n<p>​\tsynchronized具有“线程的互斥处理”和“同步处理”的两种功能</p>\n<p>​\t互斥: 线程在synchronized开始时获取锁(lock)，在synchronized终止时释放锁(unlock)</p>\n<p>​    同步: JMM保证某个线程在进行unlock操作前进行的所有写入操作对进行lock操作的线程都是可见的</p>\n<hr>\n<p><strong>volatile关键字</strong></p>\n<p>​\tvolatile具有“同步处理”和”对long和double原子处理”的两种功能</p>\n<p>​\t同步: 某个线程对volatile字段进行的写操作的结果对其他线程立即可见</p>\n<p>​    原子:  java规范无法确保对long和double的赋值操作的原子性，如果long和double的字段是volatile字段，可以确保赋值操作的原子性</p>\n<p>向volatile字段写入的值如果对线程B可见，那么之前写入的所有值就都是可见的。</p>\n<p>volatile不会进行线程的互斥处理。</p>\n<hr>\n<p><strong>happens-before</strong></p>\n<p>JMM通过happens-before关系向程序员提供跨线程的内存可见性保证。</p>\n<p>例如，A线程的写操作a与B线程的读操作b之间存在happensbefore关系，尽管a操作和b操作在不同的线程中执行，但JMM向程序员保证a操作将对b操作可见。</p>\n<p><a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\">Happens-Before Relationship</a></p>\n<blockquote>\n<p>Each action in a thread happens before every subsequent action in that thread. </p>\n<p>An unlock on a monitor happens before every subsequent lock on that monitor. </p>\n<p>A write to a volatile field happens before every subsequent read of that volatile. </p>\n<p>A call to start() on a thread happens before any actions in the started thread. </p>\n<p>All actions in a thread happen before any other thread successfully returns from a join() on that thread.</p>\n<p>If an action a happens before an action b, and b happens before an action c, then a happens before c.</p>\n</blockquote>\n<hr>\n<p><strong>final字段</strong></p>\n<p>​    JMM可以确保构造函数处理结束时final字段的值被正确初始化，对其他线程是可见的. （不要从构造函数中泄露this）</p>\n<hr>\n<p><strong>Double-Checked Locking</strong></p>\n<p>​\t<a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">The “Double-Checked Locking is Broken” Declaration</a> </p>\n<ul>\n<li><p>基于volatile的解决方案</p>\n</li>\n<li><p>基于final和构造函数的解决方案</p>\n</li>\n<li><p>Initialization On Demand Holder (原因: 类的初始化时线程安全的)</p>\n</li>\n</ul>\n<hr>\n<p><strong>操作总结</strong></p>\n<p>JMM定义的操作，归纳起来主要有:</p>\n<ul>\n<li>normal read 操作</li>\n<li>normal write 操作</li>\n<li>volatile read  操作</li>\n<li>volatile write 操作</li>\n<li>lock 操作</li>\n<li>unlock 操作</li>\n<li>线程启动操作</li>\n<li>线程终止操作</li>\n<li>线程启动后的第一个操作</li>\n<li>线程终止前的最后一个操作</li>\n</ul>\n<hr>\n<p><strong>Reference</strong></p>\n<blockquote>\n<p><a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4\">Threads and Locks, Thread Model</a></p>\n<p><a href=\"https://www.jcp.org/en/jsr/detail?id=133\">JSR133</a></p>\n<p><a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/\">Doug Lea  Blogs</a></p>\n<p><a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html\">jls-se7</a></p>\n<p>java并发编程的艺术:第3章</p>\n<p><a href=\"http://gee.cs.oswego.edu/dl/jmm/cookbook.html\">The JSR-133 Cookbook for Compiler Writers</a></p>\n</blockquote>\n<h1 id=\"Unsafe-API\"><a href=\"#Unsafe-API\" class=\"headerlink\" title=\"Unsafe API\"></a>Unsafe API</h1><h2 id=\"Method-Categories\"><a href=\"#Method-Categories\" class=\"headerlink\" title=\"Method Categories\"></a>Method Categories</h2><table>\n<thead>\n<tr>\n<th>Category</th>\n<th>Mehtod</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Info</strong></td>\n<td><code>addressSize</code> <br/> <code>pageSize</code><br/></td>\n<td>Just returns some low-level memory information.</td>\n</tr>\n<tr>\n<td><strong>Objects</strong></td>\n<td><code>allocateInstance</code>   <br/>  <code>objectFieldOffset</code><br/></td>\n<td>Provides methods for object and its fields manipulation.</td>\n</tr>\n<tr>\n<td><strong>Classes</strong></td>\n<td><code>staticFieldOffset</code><br/> <code>defineClass</code><br/> <code>defineAnonymousClass</code><br/> <code>ensureClassInitialized</code><br/></td>\n<td>Provides methods for classes and static fields manipulation</td>\n</tr>\n<tr>\n<td><strong>Arrays</strong></td>\n<td><code>arrayBaseOffset</code><br/> <code>arrayIndexScale</code><br/></td>\n<td>Arrays manipulation</td>\n</tr>\n<tr>\n<td><strong>Memory</strong></td>\n<td><code>allocateMemory</code><br/><code>copyMemory</code> <br/><code>freeMemory</code> <br/><code>reallocateMemory</code><br/><code>getAddress</code> <br/><code>getInt</code><br/><code>putInt</code> <br><code>getLong</code>  <br/><code>putLong</code>  <br/><code>getObject</code> <br/><code>putObject</code> <br/></td>\n<td>Direct memory access methods</td>\n</tr>\n<tr>\n<td><strong>CAS</strong></td>\n<td><code>compareAndSwapInt</code> <br/><code>compareAndSwapLong</code> <br/><code>compareAndSwapObject</code> <br/></td>\n<td>Compare And Swap</td>\n</tr>\n<tr>\n<td><strong>Synchronization</strong></td>\n<td><code>park</code> <br/><code>unpark</code> <br/></td>\n<td>Low level primitives for synchronization.</td>\n</tr>\n<tr>\n<td><strong>Synchronization</strong></td>\n<td><code>monitorEnter</code> <br/><code>tryMonitorEnter</code><br/><code>monitorExit</code> <br/></td>\n<td>Low level primitives for synchronization.</td>\n</tr>\n<tr>\n<td><strong>Synchronization</strong></td>\n<td><code>getIntVolatile</code> <br/><code>putIntVolatile</code>  <br/><code>getLongVolatile</code>  <br/><code>putLongVolatile</code>  <br/></td>\n<td>Low level primitives for synchronization.</td>\n</tr>\n<tr>\n<td><strong>Synchronization</strong></td>\n<td><code>putOrderedInt</code><br/><code>putOrderedLong</code><br/><code>putOrderedObject</code><br/></td>\n<td>Low level primitives for synchronization.</td>\n</tr>\n</tbody></table>\n<h2 id=\"Method-Details\"><a href=\"#Method-Details\" class=\"headerlink\" title=\"Method Details\"></a>Method Details</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sun.misc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\"> * This class should provide access to low-level operations and its</span></span><br><span class=\"line\"><span class=\"comment\"> * use should be limited to trusted code.  Fields can be accessed using</span></span><br><span class=\"line\"><span class=\"comment\"> * memory addresses, with undefined behaviour occurring if invalid memory</span></span><br><span class=\"line\"><span class=\"comment\"> * addresses are given.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Tom Tromey (tromey@redhat.com)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Andrew John Hughes (gnu_andrew@member.fsf.org)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Unsafe</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Singleton class.</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Unsafe</span> <span class=\"variable\">unsafe</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Unsafe</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Private default constructor to prevent creation of an arbitrary number of instances.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">Unsafe</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Retrieve the singleton instance of &lt;code&gt;Unsafe&lt;/code&gt;.  The calling</span></span><br><span class=\"line\"><span class=\"comment\">   * method should guard this instance from untrusted code, as it provides</span></span><br><span class=\"line\"><span class=\"comment\">   * access to low-level operations such as direct memory access.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@throws</span> SecurityException if a security manager exists and prevents</span></span><br><span class=\"line\"><span class=\"comment\">   *                           access to the system properties.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Unsafe <span class=\"title function_\">getUnsafe</span><span class=\"params\">()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"type\">SecurityManager</span> <span class=\"variable\">sm</span> <span class=\"operator\">=</span> System.getSecurityManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sm != <span class=\"literal\">null</span>)</span><br><span class=\"line\">      sm.checkPropertiesAccess();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Returns the memory address offset of the given static field.</span></span><br><span class=\"line\"><span class=\"comment\">   * The offset is merely used as a means to access a particular field</span></span><br><span class=\"line\"><span class=\"comment\">   * in the other methods of this class.  The value is unique to the given</span></span><br><span class=\"line\"><span class=\"comment\">   * field and the same value should be returned on each subsequent call.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> field the field whose offset should be returned.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> the offset of the given field.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">long</span> <span class=\"title function_\">objectFieldOffset</span><span class=\"params\">(Field field)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Compares the value of the integer field at the specified offset</span></span><br><span class=\"line\"><span class=\"comment\">   * in the supplied object with the given expected value, and updates</span></span><br><span class=\"line\"><span class=\"comment\">   * it if they match.  The operation of this method should be atomic,</span></span><br><span class=\"line\"><span class=\"comment\">   * thus providing an uninterruptible way of updating an integer field.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to modify.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the integer field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> expect the expected value of the field.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> update the new value of the field if it equals &lt;code&gt;expect&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> true if the field was changed.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSwapInt</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset, <span class=\"type\">int</span> expect, <span class=\"type\">int</span> update)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Compares the value of the long field at the specified offset</span></span><br><span class=\"line\"><span class=\"comment\">   * in the supplied object with the given expected value, and updates</span></span><br><span class=\"line\"><span class=\"comment\">   * it if they match.  The operation of this method should be atomic,</span></span><br><span class=\"line\"><span class=\"comment\">   * thus providing an uninterruptible way of updating a long field.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to modify.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the long field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> expect the expected value of the field.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> update the new value of the field if it equals &lt;code&gt;expect&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> true if the field was changed.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSwapLong</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset, <span class=\"type\">long</span> expect, <span class=\"type\">long</span> update)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Compares the value of the object field at the specified offset</span></span><br><span class=\"line\"><span class=\"comment\">   * in the supplied object with the given expected value, and updates</span></span><br><span class=\"line\"><span class=\"comment\">   * it if they match.  The operation of this method should be atomic,</span></span><br><span class=\"line\"><span class=\"comment\">   * thus providing an uninterruptible way of updating an object field.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to modify.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the object field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> expect the expected value of the field.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> update the new value of the field if it equals &lt;code&gt;expect&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> true if the field was changed.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSwapObject</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset, Object expect, Object update)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Sets the value of the integer field at the specified offset in the</span></span><br><span class=\"line\"><span class=\"comment\">   * supplied object to the given value.  This is an ordered or lazy</span></span><br><span class=\"line\"><span class=\"comment\">   * version of &lt;code&gt;putIntVolatile(Object,long,int)&lt;/code&gt;, which</span></span><br><span class=\"line\"><span class=\"comment\">   * doesn&#x27;t guarantee the immediate visibility of the change to other</span></span><br><span class=\"line\"><span class=\"comment\">   * threads.  It is only really useful where the integer field is</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;code&gt;volatile&lt;/code&gt;, and is thus expected to change unexpectedly.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to modify.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the integer field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> value the new value of the field.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #putIntVolatile(Object,long,int)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">putOrderedInt</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset, <span class=\"type\">int</span> value)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Sets the value of the long field at the specified offset in the</span></span><br><span class=\"line\"><span class=\"comment\">   * supplied object to the given value.  This is an ordered or lazy</span></span><br><span class=\"line\"><span class=\"comment\">   * version of &lt;code&gt;putLongVolatile(Object,long,long)&lt;/code&gt;, which</span></span><br><span class=\"line\"><span class=\"comment\">   * doesn&#x27;t guarantee the immediate visibility of the change to other</span></span><br><span class=\"line\"><span class=\"comment\">   * threads.  It is only really useful where the long field is</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;code&gt;volatile&lt;/code&gt;, and is thus expected to change unexpectedly.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to modify.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the long field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> value the new value of the field.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #putLongVolatile(Object,long,long)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">putOrderedLong</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset, <span class=\"type\">long</span> value)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Sets the value of the object field at the specified offset in the</span></span><br><span class=\"line\"><span class=\"comment\">   * supplied object to the given value.  This is an ordered or lazy</span></span><br><span class=\"line\"><span class=\"comment\">   * version of &lt;code&gt;putObjectVolatile(Object,long,Object)&lt;/code&gt;, which</span></span><br><span class=\"line\"><span class=\"comment\">   * doesn&#x27;t guarantee the immediate visibility of the change to other</span></span><br><span class=\"line\"><span class=\"comment\">   * threads.  It is only really useful where the object field is</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;code&gt;volatile&lt;/code&gt;, and is thus expected to change unexpectedly.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to modify.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the object field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> value the new value of the field.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">putOrderedObject</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset, Object value)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Sets the value of the integer field at the specified offset in the</span></span><br><span class=\"line\"><span class=\"comment\">   * supplied object to the given value, with volatile store semantics.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to modify.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the integer field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> value the new value of the field.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">putIntVolatile</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset, <span class=\"type\">int</span> value)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Retrieves the value of the integer field at the specified offset in the</span></span><br><span class=\"line\"><span class=\"comment\">   * supplied object with volatile load semantics.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to read.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the integer field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">int</span> <span class=\"title function_\">getIntVolatile</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Sets the value of the long field at the specified offset in the</span></span><br><span class=\"line\"><span class=\"comment\">   * supplied object to the given value, with volatile store semantics.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to modify.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the long field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> value the new value of the field.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #putLong(Object,long,long)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">putLongVolatile</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset, <span class=\"type\">long</span> value)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Sets the value of the long field at the specified offset in the</span></span><br><span class=\"line\"><span class=\"comment\">   * supplied object to the given value.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to modify.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the long field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> value the new value of the field.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #putLongVolatile(Object,long,long)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">putLong</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset, <span class=\"type\">long</span> value)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Retrieves the value of the long field at the specified offset in the</span></span><br><span class=\"line\"><span class=\"comment\">   * supplied object with volatile load semantics.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to read.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the long field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #getLong(Object,long)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">long</span> <span class=\"title function_\">getLongVolatile</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Retrieves the value of the long field at the specified offset in the</span></span><br><span class=\"line\"><span class=\"comment\">   * supplied object.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to read.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the long field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #getLongVolatile(Object,long)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">long</span> <span class=\"title function_\">getLong</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Sets the value of the object field at the specified offset in the</span></span><br><span class=\"line\"><span class=\"comment\">   * supplied object to the given value, with volatile store semantics.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to modify.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the object field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> value the new value of the field.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #putObject(Object,long,Object)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">putObjectVolatile</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset, Object value)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Sets the value of the object field at the specified offset in the</span></span><br><span class=\"line\"><span class=\"comment\">   * supplied object to the given value.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to modify.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the object field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> value the new value of the field.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #putObjectVolatile(Object,long,Object)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">putObject</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset, Object value)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Retrieves the value of the object field at the specified offset in the</span></span><br><span class=\"line\"><span class=\"comment\">   * supplied object with volatile load semantics.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> obj the object containing the field to read.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> offset the offset of the object field within &lt;code&gt;obj&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> Object <span class=\"title function_\">getObjectVolatile</span><span class=\"params\">(Object obj, <span class=\"type\">long</span> offset)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Returns the offset of the first element for a given array class.</span></span><br><span class=\"line\"><span class=\"comment\">   * To access elements of the array class, this value may be used along</span></span><br><span class=\"line\"><span class=\"comment\">   * with that returned by </span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;a href=&quot;#arrayIndexScale&quot;&gt;&lt;code&gt;arrayIndexScale&lt;/code&gt;&lt;/a&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">   * if non-zero.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arrayClass the class for which the first element&#x27;s address should</span></span><br><span class=\"line\"><span class=\"comment\">   *                   be obtained.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> the offset of the first element of the array class.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> arrayIndexScale(Class)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">int</span> <span class=\"title function_\">arrayBaseOffset</span><span class=\"params\">(Class arrayClass)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Returns the scale factor used for addressing elements of the supplied</span></span><br><span class=\"line\"><span class=\"comment\">   * array class.  Where a suitable scale factor can not be returned (e.g.</span></span><br><span class=\"line\"><span class=\"comment\">   * for primitive types), zero should be returned.  The returned value</span></span><br><span class=\"line\"><span class=\"comment\">   * can be used with </span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;a href=&quot;#arrayBaseOffset&quot;&gt;&lt;code&gt;arrayBaseOffset&lt;/code&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   * to access elements of the class.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arrayClass the class whose scale factor should be returned.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> the scale factor, or zero if not supported for this array class.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">int</span> <span class=\"title function_\">arrayIndexScale</span><span class=\"params\">(Class arrayClass)</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Releases the block on a thread created by </span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;a href=&quot;#park&quot;&gt;&lt;code&gt;park&lt;/code&gt;&lt;/a&gt;.  This method can also be used</span></span><br><span class=\"line\"><span class=\"comment\">   * to terminate a blockage caused by a prior call to &lt;code&gt;park&lt;/code&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">   * This operation is unsafe, as the thread must be guaranteed to be</span></span><br><span class=\"line\"><span class=\"comment\">   * live.  This is true of Java, but not native code.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> thread the thread to unblock.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unpark</span><span class=\"params\">(Thread thread)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">   * Blocks the thread until a matching </span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;a href=&quot;#unpark&quot;&gt;&lt;code&gt;unpark&lt;/code&gt;&lt;/a&gt; occurs, the thread is</span></span><br><span class=\"line\"><span class=\"comment\">   * interrupted or the optional timeout expires.  If an &lt;code&gt;unpark&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   * call has already occurred, this also counts.  A timeout value of zero</span></span><br><span class=\"line\"><span class=\"comment\">   * is defined as no timeout.  When &lt;code&gt;isAbsolute&lt;/code&gt; is</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;code&gt;true&lt;/code&gt;, the timeout is in milliseconds relative to the</span></span><br><span class=\"line\"><span class=\"comment\">   * epoch.  Otherwise, the value is the number of nanoseconds which must</span></span><br><span class=\"line\"><span class=\"comment\">   * occur before timeout.  This call may also return spuriously (i.e.</span></span><br><span class=\"line\"><span class=\"comment\">   * for no apparent reason).</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> isAbsolute true if the timeout is specified in milliseconds from</span></span><br><span class=\"line\"><span class=\"comment\">   *                   the epoch.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> time either the number of nanoseconds to wait, or a time in</span></span><br><span class=\"line\"><span class=\"comment\">   *             milliseconds from the epoch to wait for.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">park</span><span class=\"params\">(<span class=\"type\">boolean</span> isAbsolute, <span class=\"type\">long</span> time)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/mickole/articles/3757278.html\"><a href=\"https://www.cnblogs.com/mickole/articles/3757278.html\">Unsafe类详解</a></a></p>\n<p><a href=\"http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/\">Part 4: sun.misc.Unsafe</a></p>\n<p><a href=\"http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/misc/Unsafe.java\">Src Unsafe.java</a></p>\n</blockquote>\n<h1 id=\"Memory-Barriers\"><a href=\"#Memory-Barriers\" class=\"headerlink\" title=\"Memory Barriers\"></a>Memory Barriers</h1><blockquote>\n<p>Memory barrier instructions directly control only the interaction of a CPU with its cache, with its write-buffer that holds stores waiting to be flushed to memory, and&#x2F;or its buffer of waiting loads or speculatively executed instructions. These effects may lead to further interaction among caches, main memory and other processors.</p>\n</blockquote>\n<p><strong>Reorderings</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>Can Reorder</strong></th>\n<th><em>2nd operation</em></th>\n<th><em>2nd operation</em></th>\n<th><em>2nd operation</em></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>1st operation</em></td>\n<td>Normal Load <br/>Normal Store</td>\n<td>Volatile Load  <br/>MonitorEnter</td>\n<td>Volatile Store <br/>MonitorExit</td>\n</tr>\n<tr>\n<td>Normal Load <br/> Normal Store</td>\n<td></td>\n<td></td>\n<td>No</td>\n</tr>\n<tr>\n<td>Volatile Load <br/> MonitorEnter</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Volatile store <br/> MonitorExit</td>\n<td></td>\n<td>No</td>\n<td>No</td>\n</tr>\n</tbody></table>\n<p>Where:</p>\n<ul>\n<li>Normal Loads are getfield, getstatic, array load of non-volatile fields.</li>\n<li>Normal Stores are putfield, putstatic, array store of non-volatile fields</li>\n<li>Volatile Loads are getfield, getstatic of volatile fields that are accessible by multiple threads</li>\n<li>Volatile Stores are putfield, putstatic of volatile fields that are accessible by multiple threads</li>\n<li>MonitorEnters (including entry to synchronized methods) are for lock objects accessible by multiple threads.</li>\n<li>MonitorExits (including exit from synchronized methods) are for lock objects accessible by multiple threads.</li>\n</ul>\n<p><strong>Final Fields</strong></p>\n<blockquote>\n<p>Loads and Stores of final fields act as “normal” accesses with respect to locks and volatiles, but impose two additional reordering rules:</p>\n<ol>\n<li>A store of a final field (inside a constructor) and, if the field is a reference, any store that this final can reference, cannot be reordered with a subsequent store (outside that constructor) of the reference to the object holding that field into a variable accessible to other threads.</li>\n<li>The initial load (i.e., the very first encounter by a thread) of a final field cannot be reordered with the initial load of the reference to the object containing the final field.</li>\n</ol>\n<p>These rules imply that reliable use of final fields by Java programmers requires that the load of a shared reference to an object with a final field itself be synchronized, volatile, or final, or derived from such a load, thus ultimately ordering the initializing stores in constructors with subsequent uses outside constructors.</p>\n</blockquote>\n<hr>\n<p><strong>Barriers Categories</strong></p>\n<table>\n<thead>\n<tr>\n<th>Barriers</th>\n<th>Sequence</th>\n<th>Desc</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>LoadLoad</td>\n<td><code>Load1; LoadLoad; Load2</code></td>\n<td>ensures that Load1’s data are loaded before data accessed by Load2 and all subsequent load instructions are loaded. In general, explicit LoadLoad barriers are needed on processors that perform speculative loads and&#x2F;or out-of-order processing in which waiting load instructions can bypass waiting stores. On processors that guarantee to always preserve load ordering, the barriers amount to no-ops.</td>\n<td></td>\n</tr>\n<tr>\n<td>StoreStore</td>\n<td><code>Store1; StoreStore; Store2</code></td>\n<td>ensures that Store1’s data are visible to other processors (i.e., flushed to memory) before the data associated with Store2 and all subsequent store instructions. In general, StoreStore barriers are needed on processors that do not otherwise guarantee strict ordering of flushes from write buffers and&#x2F;or caches to other processors or main memory.</td>\n<td></td>\n</tr>\n<tr>\n<td>LoadStore</td>\n<td><code>Load1; LoadStore; Store2</code></td>\n<td>ensures that Load1’s data are loaded before all data associated with Store2 and subsequent store instructions are flushed. LoadStore barriers are needed only on those out-of-order procesors in which waiting store instructions can bypass loads.</td>\n<td></td>\n</tr>\n<tr>\n<td>StoreLoad</td>\n<td><code>Store1; StoreLoad; Load2</code></td>\n<td>ensures that Store1’s data are made visible to other processors (i.e., flushed to main memory) before data accessed by Load2 and all subsequent load instructions are loaded. StoreLoad barriers protect against a subsequent load incorrectly using Store1’s data value rather than that from a more recent store to the same location performed by a different processor. Because of this, on the processors discussed below, a StoreLoad is strictly necessary only for separating stores from subsequent loads of the same location(s) as were stored before the barrier. StoreLoad barriers are needed on nearly all recent multiprocessors, and are usually the most expensive kind. Part of the reason they are expensive is that they must disable mechanisms that ordinarily bypass cache to satisfy loads from write-buffers. This might be implemented by letting the buffer fully flush, among other possible stalls.</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>The following table shows how these barriers correspond to JSR-133 ordering rules.</p>\n<table>\n<thead>\n<tr>\n<th><strong>Required barriers</strong></th>\n<th><em>2nd operation</em></th>\n<th><em>2nd operation</em></th>\n<th><em>2nd operation</em></th>\n<th><em>2nd operation</em></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>1st operation</em></td>\n<td>Normal Load</td>\n<td>Normal Store</td>\n<td>Volatile Load <br/>MonitorEnter</td>\n<td>Volatile Store<br/> MonitorExit</td>\n</tr>\n<tr>\n<td>Normal Load</td>\n<td></td>\n<td></td>\n<td></td>\n<td>LoadStore</td>\n</tr>\n<tr>\n<td>Normal Store</td>\n<td></td>\n<td></td>\n<td></td>\n<td>StoreStore</td>\n</tr>\n<tr>\n<td>Volatile Load <br/>MonitorEnter</td>\n<td>LoadLoad</td>\n<td>LoadStore</td>\n<td>LoadLoad</td>\n<td>LoadStore</td>\n</tr>\n<tr>\n<td>Volatile Store <br/>MonitorExit</td>\n<td></td>\n<td></td>\n<td>StoreLoad</td>\n<td>StoreStore</td>\n</tr>\n</tbody></table>\n<hr>\n<p><strong>Interactions with Atomic Instructions</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>Required Barriers</strong></th>\n<th><em>2nd operation</em></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>1st operation</em></td>\n<td>Normal Load</td>\n<td>Normal Store</td>\n<td>Volatile Load</td>\n<td>Volatile Store</td>\n<td>MonitorEnter</td>\n<td>MonitorExit</td>\n</tr>\n<tr>\n<td>Normal Load</td>\n<td></td>\n<td></td>\n<td></td>\n<td>LoadStore</td>\n<td></td>\n<td>LoadStore</td>\n</tr>\n<tr>\n<td>Normal Store</td>\n<td></td>\n<td></td>\n<td></td>\n<td>StoreStore</td>\n<td></td>\n<td>StoreExit</td>\n</tr>\n<tr>\n<td>Volatile Load</td>\n<td>LoadLoad</td>\n<td>LoadStore</td>\n<td>LoadLoad</td>\n<td>LoadStore</td>\n<td>LoadEnter</td>\n<td>LoadExit</td>\n</tr>\n<tr>\n<td>Volatile Store</td>\n<td></td>\n<td></td>\n<td>StoreLoad</td>\n<td>StoreStore</td>\n<td>StoreEnter</td>\n<td>StoreExit</td>\n</tr>\n<tr>\n<td>MonitorEnter</td>\n<td>EnterLoad</td>\n<td>EnterStore</td>\n<td>EnterLoad</td>\n<td>EnterStore</td>\n<td>EnterEnter</td>\n<td>EnterExit</td>\n</tr>\n<tr>\n<td>MonitorExit</td>\n<td></td>\n<td></td>\n<td>ExitLoad</td>\n<td>ExitStore</td>\n<td>ExitEnter</td>\n<td>ExitExit</td>\n</tr>\n</tbody></table>\n<p>In this table, “Enter” is the same as “Load” and “Exit” is the same as “Store”, unless overridden by the use and nature of atomic instructions. In particular:</p>\n<ul>\n<li>EnterLoad is needed on entry to any synchronized block&#x2F;method that performs a load. It is the same as LoadLoad unless an atomic instruction is used in MonitorEnter and itself provides a barrier with at least the properties of LoadLoad, in which case it is a no-op.</li>\n<li>StoreExit is needed on exit of any synchronized block&#x2F;method that performs a store. It is the same as StoreStore unless an atomic instruction is used in MonitorExit and itself provides a barrier with at least the properties of StoreStore, in which case it is a no-op.</li>\n<li>ExitEnter is the same as StoreLoad unless atomic instructions are used in MonitorExit and&#x2F;or MonitorEnter and at least one of these provide a barrier with at least the properties of StoreLoad, in which case it is a no-op.</li>\n</ul>\n<hr>\n<p><strong>Recipes</strong></p>\n<blockquote>\n<ol>\n<li>Issue a StoreStore barrier before each volatile store.<br>(On ia64 you must instead fold this and most barriers into corresponding load or store instructions.)</li>\n<li>Issue a StoreStore barrier after all stores but before return from any constructor for any class with a final field.</li>\n<li>Issue a StoreLoad barrier after each volatile store.<br>Note that you could instead issue one before each volatile load, but this would be slower for typical programs using volatiles in which reads greatly outnumber writes. Alternatively, if available, you can implement volatile store as an atomic instruction (for example XCHG on x86) and omit the barrier. This may be more efficient if atomic instructions are cheaper than StoreLoad barriers.</li>\n<li>Issue LoadLoad and LoadStore barriers after each volatile load.<br>On processors that preserve data dependent ordering, you need not issue a barrier if the next access instruction is dependent on the value of the load. In particular, you do not need a barrier after a load of a volatile reference if the subsequent instruction is a null-check or load of a field of that reference.</li>\n<li>Issue an ExitEnter barrier either before each MonitorEnter or after each MonitorExit.<br>(As discussed above, ExitEnter is a no-op if either MonitorExit or MonitorEnter uses an atomic instruction that supplies the equivalent of a StoreLoad barrier. Similarly for others involving Enter and Exit in the remaining steps.)</li>\n<li>Issue EnterLoad and EnterStore barriers after each MonitorEnter.</li>\n<li>Issue StoreExit and LoadExit barriers before each MonitorExit.</li>\n<li>If on a processor that does not intrinsically provide ordering on indirect loads, issue a LoadLoad barrier before each load of a final field.</li>\n</ol>\n</blockquote>\n<p>removing redundant barriers. The above tables indicate that barriers can be eliminated as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Original</th>\n<th></th>\n<th></th>\n<th>&#x3D;&gt;</th>\n<th>Transformed</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1st</td>\n<td>ops</td>\n<td>2nd</td>\n<td>&#x3D;&gt;</td>\n<td>1st</td>\n<td>ops</td>\n<td>2nd</td>\n</tr>\n<tr>\n<td>LoadLoad</td>\n<td>[no loads]</td>\n<td>LoadLoad</td>\n<td>&#x3D;&gt;</td>\n<td></td>\n<td>[no loads]</td>\n<td>LoadLoad</td>\n</tr>\n<tr>\n<td>LoadLoad</td>\n<td>[no loads]</td>\n<td>StoreLoad</td>\n<td>&#x3D;&gt;</td>\n<td></td>\n<td>[no loads]</td>\n<td>StoreLoad</td>\n</tr>\n<tr>\n<td>StoreStore</td>\n<td>[no stores]</td>\n<td>StoreStore</td>\n<td>&#x3D;&gt;</td>\n<td></td>\n<td>[no stores]</td>\n<td>StoreStore</td>\n</tr>\n<tr>\n<td>StoreStore</td>\n<td>[no stores]</td>\n<td>StoreLoad</td>\n<td>&#x3D;&gt;</td>\n<td></td>\n<td>[no stores]</td>\n<td>StoreLoad</td>\n</tr>\n<tr>\n<td>StoreLoad</td>\n<td>[no loads]</td>\n<td>LoadLoad</td>\n<td>&#x3D;&gt;</td>\n<td>StoreLoad</td>\n<td>[no loads]</td>\n<td></td>\n</tr>\n<tr>\n<td>StoreLoad</td>\n<td>[no stores]</td>\n<td>StoreStore</td>\n<td>&#x3D;&gt;</td>\n<td>StoreLoad</td>\n<td>[no stores]</td>\n<td></td>\n</tr>\n<tr>\n<td>StoreLoad</td>\n<td>[no volatile loads]</td>\n<td>StoreLoad</td>\n<td>&#x3D;&gt;</td>\n<td></td>\n<td>[no volatile loads]</td>\n<td>StoreLoad</td>\n</tr>\n</tbody></table>\n<hr>\n<p><strong>Reference</strong></p>\n<blockquote>\n<p><a href=\"http://gee.cs.oswego.edu/dl/jmm/cookbook.html\">The JSR-133 Cookbook for Compiler Writers</a><br><a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html\">JSR 133 (Java Memory Model) FAQ</a></p>\n<p><a href=\"https://www.jianshu.com/p/2ab5e3d7e510\">内存屏障</a><br><a href=\"https://stackoverflow.com/questions/15360598/what-does-a-loadload-barrier-really-do\">what-does-a-loadload-barrier-really-do</a><a href=\"https://stackoverflow.com/questions/48615456/what-is-difference-between-getxxxvolatile-vs-getxxx-in-java-unsafe\">What is difference between getXXXVolatile vs getXXX in java unsafe?</a></p>\n<p>Atomic*.lazySet<br>    <a href=\"https://stackoverflow.com/questions/1468007/atomicinteger-lazyset-vs-set/14020946\">AtomicInteger lazySet vs set</a><br>    <a href=\"http://psy-lob-saw.blogspot.com/2012/12/atomiclazyset-is-performance-win-for.html\">Atomic lazySet</a><br>    <a href=\"http://psy-lob-saw.blogspot.com/2016/12/what-is-lazyset-putordered.html\">What do Atomic::lazySet&#x2F;Atomic FieldUpdater::lazySet&#x2F;Unsafe::putOrdered actually mean?</a><br>    <a href=\"https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6275329\">Add lazySet methods to atomic classes</a></p>\n<blockquote>\n<p>UNSAFE.putOrderedLong:<br>    a Store&#x2F;Store barrier between this write and any previous store.</p>\n<p>UNSAFE.putLongVolatile:<br>    Store&#x2F;Store barrier between this write and any previous write ,</p>\n<p>​    and a Store&#x2F;Load barrier between this write and any subsequent volatile read.</p>\n</blockquote>\n</blockquote>\n<h1 id=\"Threads-Basics\"><a href=\"#Threads-Basics\" class=\"headerlink\" title=\"Threads  Basics\"></a>Threads  Basics</h1><p><strong>线程状态</strong></p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NEW</td>\n<td>初始状态，线程被构建还没有调用start()方法</td>\n</tr>\n<tr>\n<td>RUNNABLE</td>\n<td>运行状态，java线程将OS中的就绪和运行两种状态笼统地称作运行中</td>\n</tr>\n<tr>\n<td>BLOCKED</td>\n<td>阻塞状态，表示线程阻塞于锁</td>\n</tr>\n<tr>\n<td>WAITING</td>\n<td>等待状态，表示线程进入等待状态，进入该状态表示当前线程需要等待其他线程做出一些特定动作(通知或中断)</td>\n</tr>\n<tr>\n<td>TIME_WAITING</td>\n<td>超时等待状态，该状态不同于WAITING，是可以在指定的时间自行返回的</td>\n</tr>\n<tr>\n<td>TERMINATED</td>\n<td>终止状态，表示当前线程已经执行完毕</td>\n</tr>\n</tbody></table>\n<p><strong>线程相关的方法和线程状态迁移</strong></p>\n<p><img src=\"/flame/images/java/concurrency/java-thread-status-migration-graph.png\" alt=\"线程相关的方法和线程状态迁移\"></p>\n<hr>\n<h2 id=\"java-lang-Object\"><a href=\"#java-lang-Object\" class=\"headerlink\" title=\"java.lang.Object\"></a><strong>java.lang.Object</strong></h2><table>\n<thead>\n<tr>\n<th>METHOD</th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>notify()</code></td>\n<td>Wakes up a single thread that is waiting on this object’s monitor.</td>\n</tr>\n<tr>\n<td><code>notifyAll()</code></td>\n<td>Wakes up all threads that are waiting on this object’s monitor.</td>\n</tr>\n<tr>\n<td><code>wait()</code></td>\n<td>Causes the current thread to wait until another thread invokes the <code>notify()</code>method or the <code>notifyAll()</code>method for this object.</td>\n</tr>\n<tr>\n<td><code>wait(long timeout)</code></td>\n<td>Causes the current thread to wait until either another thread invokes the <code>notify()</code>method or the <code>notifyAll()</code> method for this object, or a specified amount of time has elapsed.</td>\n</tr>\n<tr>\n<td><code>wait(long timeout, int nanos)</code></td>\n<td>Causes the current thread to wait until another thread invokes the <code>notify()</code> method or the <code>notifyAll()</code> method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed.</td>\n</tr>\n</tbody></table>\n<p><strong>nogify()</strong></p>\n<blockquote>\n<p>Wakes up a single thread that is waiting on this object’s monitor.</p>\n<p>This method should only be called by a thread that is the owner of this object’s monitor. A thread becomes the owner of the object’s monitor in one of three ways:</p>\n<ul>\n<li>By executing a synchronized instance method of that object.</li>\n<li>By executing the body of a <code>synchronized</code> statement that synchronizes on the object.</li>\n<li>For objects of type <code>Class,</code> by executing a synchronized static method of that class.</li>\n</ul>\n<p>Only one thread at a time can own an object’s monitor.</p>\n</blockquote>\n<p><strong>notifyAll()</strong></p>\n<blockquote>\n<p>This method should only be called by a thread that is the owner of this object’s monitor. </p>\n<p>A thread becomes the owner of the object’s monitor in one of three ways:</p>\n<ul>\n<li>By executing a synchronized instance method of that object.</li>\n<li>By executing the body of a <code>synchronized</code> statement that synchronizes on the object.</li>\n<li>For objects of type <code>Class,</code> by executing a synchronized static method of that class.</li>\n</ul>\n<p>Only one thread at a time can own an object’s monitor.</p>\n</blockquote>\n<p><strong>wait()</strong></p>\n<blockquote>\n<p>Causes the current thread to wait until another thread invokes the <code>notify()</code>method or the <code>notifyAll()</code>method for this object.</p>\n<p>The current thread must own this object’s monitor. </p>\n<p>The thread releases ownership of this monitor and waits until another thread notifies threads waiting on this object’s monitor to wake up either through a call to the <code>notify</code> method or the <code>notifyAll</code> method.</p>\n</blockquote>\n<p><strong>wait(long timeout)</strong></p>\n<blockquote>\n<p>Causes the current thread to wait until either another thread invokes the <code>notify()</code>method or the <code>notifyAll()</code> method for this object, or a specified amount of time has elapsed.</p>\n<p>The current thread must own this object’s monitor.</p>\n<p>This method causes the current thread (call it T) to place itself in the wait set for this object and then to relinquish any and all synchronization claims on this object. Thread T becomes disabled for thread scheduling purposes and lies dormant until one of four things happens:</p>\n<ul>\n<li>Some other thread invokes the <code>notify</code> method for this object and thread T happens to be arbitrarily chosen as the thread to be awakened.</li>\n<li>Some other thread invokes the <code>notifyAll</code> method for this object.</li>\n<li>Some other thread <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#interrupt--\">interrupts</a> thread T.</li>\n<li>The specified amount of real time has elapsed, more or less. If <code>timeout</code> is zero, however, then real time is not taken into consideration and the thread simply waits until notified.</li>\n</ul>\n<p>The thread T is then removed from the wait set for this object and re-enabled for thread scheduling. </p>\n<p>A thread can also wake up without being notified, interrupted, or timing out, a so-called <strong>spurious wakeup</strong>. While this will rarely occur in practice, applications must guard against it by testing for the condition that should have caused the thread to be awakened, and continuing to wait if the condition is not satisfied. In other words, waits should always occur in loops, like this one:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (&lt;condition does not hold&gt;)</span><br><span class=\"line\">        obj.wait(timeout);</span><br><span class=\"line\">    ... <span class=\"comment\">// Perform action appropriate to condition</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>wait(long timeout, int nanos)</strong></p>\n<blockquote>\n<p>This method is similar to the <code>wait</code> method of one argument, but it allows finer control over the amount of time to wait for a notification before giving up.</p>\n</blockquote>\n<p><strong>线程状态迁移</strong></p>\n<p><img src=\"/flame/images/java/concurrency/java-thread-status-migration.png\" alt=\"线程状态迁移\"></p>\n<h2 id=\"java-lang-Thread\"><a href=\"#java-lang-Thread\" class=\"headerlink\" title=\"java.lang.Thread\"></a><strong>java.lang.Thread</strong></h2><p><strong>methods</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Returns this thread&#x27;s priority.         </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getPriority</span><span class=\"params\">()</span></span><br><span class=\"line\"><span class=\"comment\">// Changes the priority of this thread.  </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setPriority</span><span class=\"params\">(<span class=\"type\">int</span> newPriority)</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// Marks this thread as either a daemon thread or a user thread.   </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setDaemon</span><span class=\"params\">(<span class=\"type\">boolean</span> on)</span></span><br><span class=\"line\"><span class=\"comment\">// Tests if this thread is a daemon thread. </span></span><br><span class=\"line\"><span class=\"type\">boolean</span>\t<span class=\"title function_\">isDaemon</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Causes the currently executing thread to sleep (temporarily cease execution)</span></span><br><span class=\"line\"><span class=\"comment\">// for the specified number of milliseconds,</span></span><br><span class=\"line\"><span class=\"comment\">// subject to the precision and accuracy of system timers and schedulers.</span></span><br><span class=\"line\">sleep(<span class=\"type\">long</span> millis) <span class=\"keyword\">throws</span>  InterruptedException</span><br><span class=\"line\"><span class=\"comment\">// Causes the currently executing thread to sleep (temporarily cease execution) </span></span><br><span class=\"line\"><span class=\"comment\">// for the specified number of milliseconds plus the specified number of nanoseconds, </span></span><br><span class=\"line\"><span class=\"comment\">// subject to the precision and accuracy of system timers and schedulers.</span></span><br><span class=\"line\">sleep(<span class=\"type\">long</span> millis, <span class=\"type\">int</span> nanos) <span class=\"keyword\">throws</span>  InterruptedException</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//Waits for this thread to die.</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">join</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span><br><span class=\"line\"><span class=\"comment\">// Waits at most millis milliseconds for this thread to die.</span></span><br><span class=\"line\"><span class=\"comment\">// A timeout of 0 means to wait forever.</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">join</span><span class=\"params\">(<span class=\"type\">long</span> millis)</span> <span class=\"keyword\">throws</span> InterruptedException</span><br><span class=\"line\"><span class=\"comment\">// Waits at most millis milliseconds plus nanos nanoseconds for this thread to die. </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">join</span><span class=\"params\">(<span class=\"type\">long</span> millis, <span class=\"type\">int</span> nanos)</span> <span class=\"keyword\">throws</span> InterruptedException</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Interrupts this thread. </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">interrupt</span><span class=\"params\">()</span></span><br><span class=\"line\"><span class=\"comment\">// Tests whether the current thread has been interrupted. </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">interrupted</span><span class=\"params\">()</span></span><br><span class=\"line\"><span class=\"comment\">// Tests whether this thread has been interrupted.</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isInterrutped</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a><strong>中断</strong></h2><p><code>void interrupt()</code>方法只是改变中断状态，<br><code>boolean isInterrutped()</code>是Thread类的实例方法，用于检查指定线程的中断状态，并不会改变中断状态。<br><code>static boolean interrupted()</code>是Thread类的静态方法，用于检查并<strong>清除</strong>当前线程的中断状态。只有这个方法才可以清除中断状态，操作的是当前线程，该方法并不能用于清除其他线程的中断状态。</p>\n<p><img src=\"/flame/images/java/concurrency/java-thread-interupt-migration.png\" alt=\"线程的中断状态\"></p>\n<p><strong>void interrupt()</strong></p>\n<blockquote>\n<p>Interrupts this thread.</p>\n<p>If this thread is blocked in an invocation of the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\"><code>wait()</code></a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\"><code>wait(long)</code></a>, or <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\"><code>wait(long, int)</code></a> methods of the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\"><code>Object</code></a> class, or of the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#join--\"><code>join()</code></a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#join-long-\"><code>join(long)</code></a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#join-long-int-\"><code>join(long, int)</code></a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#sleep-long-\"><code>sleep(long)</code></a>, or <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#sleep-long-int-\"><code>sleep(long, int)</code></a>, methods of this class, then its interrupt status will be cleared and it will receive an <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/InterruptedException.html\"><code>InterruptedException</code></a>.</p>\n<p>If this thread is blocked in an I&#x2F;O operation upon an <a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/channels/InterruptibleChannel.html\"><code>InterruptibleChannel</code></a> then the channel will be closed, the thread’s interrupt status will be set, and the thread will receive a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/channels/ClosedByInterruptException.html\"><code>ClosedByInterruptException</code></a>.</p>\n<p>If this thread is blocked in a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/channels/Selector.html\"><code>Selector</code></a> then the thread’s interrupt status will be set and it will return immediately from the selection operation, possibly with a non-zero value, just as if the selector’s <a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/channels/Selector.html#wakeup--\"><code>wakeup</code></a> method were invoked.</p>\n<p>If none of the previous conditions hold then this thread’s interrupt status will be set.</p>\n<p>Interrupting a thread that is not alive need not have any effect.</p>\n<p>如果没有调用sleep 、wait、join等方法，或者没有编写检查线程的中断状态并抛出InterruptedException异常的代码，那么InterruptedException异常就不会被抛出</p>\n</blockquote>\n<p><strong>InterruptedException</strong></p>\n<blockquote>\n<p>Thrown when a thread is waiting, sleeping, or otherwise occupied, and the thread is interrupted, either before or during the activity. Occasionally a method may wish to test whether the current thread has been interrupted, and if so, to immediately throw this exception. The following code can be used to achieve this effect:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Thread.interrupted())  <span class=\"comment\">// Clears interrupted status!</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"Reference-1\"><a href=\"#Reference-1\" class=\"headerlink\" title=\"Reference\"></a><strong>Reference</strong></h2><blockquote>\n<p><a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.2\">Chapter 17. Threads and Locks</a><br><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html\">Thread Document</a><br><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object Document</a><br><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html\">Runnable Document</a><br><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html\">ThreadLocal Document</a></p>\n</blockquote>\n<h1 id=\"Concurrent-Package\"><a href=\"#Concurrent-Package\" class=\"headerlink\" title=\"Concurrent Package\"></a>Concurrent Package</h1><table>\n<thead>\n<tr>\n<th>package</th>\n<th>reference</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>java.util.concurrent</td>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-tree.html\">package tree</a><br/><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html\">package summary</a></td>\n</tr>\n<tr>\n<td>java.util.concurrent.locks</td>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/package-tree.html\">package tree</a><br/><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/package-summary.html\">package summary</a></td>\n</tr>\n<tr>\n<td>java.util.concurrent.atomic</td>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/package-tree.html\">package tree</a> <br/><a href=\"https://docs.oracle.com/javase/8/docs/api/index.html?java/util/concurrent/atomic/package-summary.html\">package summary</a></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.cs.rochester.edu/research/synchronization/pseudocode/duals.html</span><br><span class=\"line\">http://www.cs.rochester.edu/u/scott/papers/2004_DISC_dual_DS.pdf</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"AQS\"><a href=\"#AQS\" class=\"headerlink\" title=\"AQS\"></a>AQS</h2><p>构建并发包工具的基本框架</p>\n<p><a href=\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\">Doug Lea 论文</a></p>\n<p>JDK中的AbstractQueuedSynchronizer源码</p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/AbstractQueuedSynchronizer.html\">AbstractQueuedSynchronizer Document</a></p>\n<h2 id=\"usual-sync-tools\"><a href=\"#usual-sync-tools\" class=\"headerlink\" title=\"usual sync tools\"></a>usual sync tools</h2><table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html\">Semaphore</a></td>\n<td>A counting semaphore.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html\">CountDownLatch</a></td>\n<td>A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html\">CyclicBarrier</a></td>\n<td>A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Exchanger.html\">Exchanger</a><V></td>\n<td>A synchronization point at which threads can pair and swap elements within pairs.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html\">Phaser</a></td>\n<td>A reusable synchronization barrier, similar in functionality to <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html\"><code>CyclicBarrier</code></a> and <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html\"><code>CountDownLatch</code></a> but supporting more flexible usage.</td>\n</tr>\n</tbody></table>\n<h2 id=\"queue\"><a href=\"#queue\" class=\"headerlink\" title=\"queue\"></a>queue</h2><table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html\">BlockingQueue</a><E></td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html\"><code>Queue</code></a> that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html\">ArrayBlockingQueue</a><E></td>\n<td>A bounded <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html\">blocking queue</a> backed by an array.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html\">LinkedBlockingQueue</a><E></td>\n<td>An optionally-bounded <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html\">blocking queue</a> based on linked nodes.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html\">PriorityBlockingQueue</a><E></td>\n<td>An unbounded <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html\">blocking queue</a> that uses the same ordering rules as class <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html\"><code>PriorityQueue</code></a> and supplies blocking retrieval operations.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html\">DelayQueue</a>&lt;E extends <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Delayed.html\">Delayed</a>&gt;</td>\n<td>An unbounded <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html\">blocking queue</a> of <code>Delayed</code> elements, in which an element can only be taken when its delay has expired.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html\">SynchronousQueue</a><E></td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html\">blocking queue</a> in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html\">ConcurrentLinkedQueue</a><E></td>\n<td>An unbounded thread-safe <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html\">queue</a> based on linked nodes.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TransferQueue.html\">TransferQueue</a><E></td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html\"><code>BlockingQueue</code></a> in which producers may wait for consumers to receive elements.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TransferQueue.html\">TransferQueue</a><E></td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html\"><code>BlockingQueue</code></a> in which producers may wait for consumers to receive elements.</td>\n</tr>\n</tbody></table>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html\">ConcurrentMap</a>&lt;K,V&gt;</td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\"><code>Map</code></a> providing thread safety and atomicity guarantees.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html\">ConcurrentHashMap</a>&lt;K,V&gt;</td>\n<td>A hash table supporting full concurrency of retrievals and high expected concurrency for updates.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html\">ConcurrentSkipListMap</a>&lt;K,V&gt;</td>\n<td>A scalable concurrent <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html\"><code>ConcurrentNavigableMap</code></a> implementation.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html\">ConcurrentNavigableMap</a>&lt;K,V&gt;</td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html\"><code>ConcurrentMap</code></a> supporting <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/NavigableMap.html\"><code>NavigableMap</code></a> operations, and recursively so for its navigable sub-maps.</td>\n</tr>\n</tbody></table>\n<h2 id=\"copy-on-write\"><a href=\"#copy-on-write\" class=\"headerlink\" title=\"copy on write\"></a>copy on write</h2><table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html\">CopyOnWriteArrayList</a><E></td>\n<td>A thread-safe variant of <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html\"><code>ArrayList</code></a> in which all mutative operations (<code>add</code>, <code>set</code>, and so on) are implemented by making a fresh copy of the underlying array.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html\">CopyOnWriteArraySet</a><E></td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Set.html\"><code>Set</code></a> that uses an internal <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html\"><code>CopyOnWriteArrayList</code></a> for all of its operations.</td>\n</tr>\n</tbody></table>\n<h2 id=\"locks\"><a href=\"#locks\" class=\"headerlink\" title=\"locks\"></a>locks</h2><table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Condition.html\">Condition</a></td>\n<td><code>Condition</code> factors out the <code>Object</code> monitor methods (<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\"><code>wait</code></a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\"><code>notify</code></a> and <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\"><code>notifyAll</code></a>) into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Lock.html\"><code>Lock</code></a> implementations.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Lock.html\">Lock</a></td>\n<td><code>Lock</code> implementations provide more extensive locking operations than can be obtained using <code>synchronized</code> methods and statements.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReadWriteLock.html\">ReadWriteLock</a></td>\n<td>A <code>ReadWriteLock</code> maintains a pair of associated <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Lock.html\"><code>locks</code></a>, one for read-only operations and one for writing.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/AbstractOwnableSynchronizer.html\">AbstractOwnableSynchronizer</a></td>\n<td>A synchronizer that may be exclusively owned by a thread.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html\">AbstractQueuedLongSynchronizer</a></td>\n<td>A version of <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/AbstractQueuedSynchronizer.html\"><code>AbstractQueuedSynchronizer</code></a> in which synchronization state is maintained as a <code>long</code>.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/AbstractQueuedSynchronizer.html\">AbstractQueuedSynchronizer</a></td>\n<td>Provides a framework for implementing blocking locks and related synchronizers (semaphores, events, etc) that rely on first-in-first-out (FIFO) wait queues.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/LockSupport.html\">LockSupport</a></td>\n<td>Basic thread blocking primitives for creating locks and other synchronization classes.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantLock.html\">ReentrantLock</a></td>\n<td>A reentrant mutual exclusion <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Lock.html\"><code>Lock</code></a> with the same basic behavior and semantics as the implicit monitor lock accessed using <code>synchronized</code> methods and statements, but with extended capabilities.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html\">ReentrantReadWriteLock</a></td>\n<td>An implementation of <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReadWriteLock.html\"><code>ReadWriteLock</code></a> supporting similar semantics to <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantLock.html\"><code>ReentrantLock</code></a>.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html\">ReentrantReadWriteLock.ReadLock</a></td>\n<td>The lock returned by method <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html#readLock--\"><code>ReentrantReadWriteLock.readLock()</code></a>.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html\">ReentrantReadWriteLock.WriteLock</a></td>\n<td>The lock returned by method <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html#writeLock--\"><code>ReentrantReadWriteLock.writeLock()</code></a>.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/StampedLock.html\">StampedLock</a></td>\n<td>A capability-based lock with three modes for controlling read&#x2F;write access.</td>\n</tr>\n</tbody></table>\n<h2 id=\"atomic\"><a href=\"#atomic\" class=\"headerlink\" title=\"atomic\"></a>atomic</h2><table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicBoolean.html\">AtomicBoolean</a></td>\n<td>A <code>boolean</code> value that may be updated atomically.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html\">AtomicInteger</a></td>\n<td>An <code>int</code> value that may be updated atomically.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html\">AtomicIntegerArray</a></td>\n<td>An <code>int</code> array in which elements may be updated atomically.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html\">AtomicIntegerFieldUpdater</a><T></td>\n<td>A reflection-based utility that enables atomic updates to designated <code>volatile int</code> fields of designated classes.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html\">AtomicLong</a></td>\n<td>A <code>long</code> value that may be updated atomically.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html\">AtomicLongArray</a></td>\n<td>A <code>long</code> array in which elements may be updated atomically.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html\">AtomicLongFieldUpdater</a><T></td>\n<td>A reflection-based utility that enables atomic updates to designated <code>volatile long</code> fields of designated classes.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicMarkableReference.html\">AtomicMarkableReference</a><V></td>\n<td>An <code>AtomicMarkableReference</code> maintains an object reference along with a mark bit, that can be updated atomically.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html\">AtomicReference</a><V></td>\n<td>An object reference that may be updated atomically.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html\">AtomicReferenceArray</a><E></td>\n<td>An array of object references in which elements may be updated atomically.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html\">AtomicReferenceFieldUpdater</a>&lt;T,V&gt;</td>\n<td>A reflection-based utility that enables atomic updates to designated <code>volatile</code> reference fields of designated classes.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicStampedReference.html\">AtomicStampedReference</a><V></td>\n<td>An <code>AtomicStampedReference</code> maintains an object reference along with an integer “stamp”, that can be updated atomically.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAccumulator.html\">DoubleAccumulator</a></td>\n<td>One or more variables that together maintain a running <code>double</code> value updated using a supplied function.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAdder.html\">DoubleAdder</a></td>\n<td>One or more variables that together maintain an initially zero <code>double</code> sum.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAccumulator.html\">LongAccumulator</a></td>\n<td>One or more variables that together maintain a running <code>long</code> value updated using a supplied function.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html\">LongAdder</a></td>\n<td>One or more variables that together maintain an initially zero <code>long</code> sum.</td>\n</tr>\n</tbody></table>\n<h2 id=\"task\"><a href=\"#task\" class=\"headerlink\" title=\"task\"></a>task</h2><table>\n<thead>\n<tr>\n<th>class</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>java.lang.Runnable</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Callable.html\">Callable</a><V></td>\n<td>A task that returns a result and may throw an exception.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Delayed.html\">Delayed</a></td>\n<td>A mix-in style interface for marking objects that should be acted upon after a given delay.</td>\n</tr>\n</tbody></table>\n<h2 id=\"future-amp-amp-futureTask\"><a href=\"#future-amp-amp-futureTask\" class=\"headerlink\" title=\"future &amp;&amp; futureTask\"></a>future &amp;&amp; futureTask</h2><table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html\">CompletionStage</a><T></td>\n<td>A stage of a possibly asynchronous computation, that performs an action or computes a value when another CompletionStage completes.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html\">Future</a><V></td>\n<td>A <code>Future</code> represents the result of an asynchronous computation.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RunnableFuture.html\">RunnableFuture</a><V></td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html\"><code>Future</code></a> that is <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html\"><code>Runnable</code></a>.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RunnableScheduledFuture.html\">RunnableScheduledFuture</a><V></td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledFuture.html\"><code>ScheduledFuture</code></a> that is <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html\"><code>Runnable</code></a>.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledFuture.html\">ScheduledFuture</a><V></td>\n<td>A delayed result-bearing action that can be cancelled.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html\">FutureTask</a><V></td>\n<td>A cancellable asynchronous computation.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html\">CompletableFuture</a><T></td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html\"><code>Future</code></a> that may be explicitly completed (setting its value and status), and may be used as a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html\"><code>CompletionStage</code></a>, supporting dependent functions and actions that trigger upon its completion.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionService.html\">CompletionService</a><V></td>\n<td>A service that decouples the production of new asynchronous tasks from the consumption of the results of completed tasks.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.AsynchronousCompletionTask.html\">CompletableFuture.AsynchronousCompletionTask</a></td>\n<td>A marker interface identifying asynchronous tasks produced by <code>async</code> methods.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorCompletionService.html\">ExecutorCompletionService</a><V></td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionService.html\"><code>CompletionService</code></a> that uses a supplied <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html\"><code>Executor</code></a> to execute tasks.</td>\n</tr>\n</tbody></table>\n<h2 id=\"executor\"><a href=\"#executor\" class=\"headerlink\" title=\"executor\"></a>executor</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">线程池的使用</span><br><span class=\"line\">   如何合理地配置线程池</span><br><span class=\"line\">   创建的api和参数</span><br><span class=\"line\">   提交任务execute submit的区别</span><br><span class=\"line\">   关闭线程池;shutdown和shutdownNow的区别;当任务是不可中断</span><br><span class=\"line\">   线程池的监控 及 cpu负载监控</span><br><span class=\"line\"></span><br><span class=\"line\">Executor框架的主要成员：</span><br><span class=\"line\">\tThreadPoolExecutor、ScheduledThreadPoolExecutor、 Future接口、Runnable接口、Callable接口和</span><br><span class=\"line\"></span><br><span class=\"line\">Executors</span><br><span class=\"line\">\tExecutor框架的使用示意图</span><br><span class=\"line\">\t业务：Runnable接口或Callable接口封装的</span><br><span class=\"line\">\t异步计算的结果：包括接口Future和实现Future接口的FutureTask类；get() cancel()方法</span><br><span class=\"line\">\t任务的执行：ExecutorService接口的实现ThreadPoolExecutor和ScheduledThreadPoolExecutor</span><br><span class=\"line\">\tExecutors可以创建3种类型的 ThreadPoolExecutor：</span><br><span class=\"line\">\t\tSingleThreadExecutors:适用于需要保证顺序地执行各个任务；并且在任意时间点，不会有多 个线程是活动的应用场景</span><br><span class=\"line\">\t\tFixedThreadPool:适用于为了满足资源管理的需求，而需要限制当前线程数量的应用场 景，它适用于负载比较重的服务器</span><br><span class=\"line\">\t\tCachedThreadPool:是大小无界的线程池，适用于执行很多的短期异步任务的小程序，或者 是负载较轻的服务器</span><br><span class=\"line\">\tExecutors可以创建2种ScheduledThreadPoolExecutor</span><br><span class=\"line\">\t\tScheduledThreadPoolExecutor适用于需要多个后台线程执行周期任务，同时为了满足资源 管理的需求而需要限制后台线程的数量的应用场景。</span><br><span class=\"line\">\t\tSingleThreadScheduledExecutor适用于需要单个后台线程执行周期任务，同时需要保证顺 序地执行各个任务的应用场景。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadFactory.html\">ThreadFactory</a></td>\n<td>An object that creates new threads on demand.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html\">Executors</a></td>\n<td>Factory and utility methods for <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html\"><code>Executor</code></a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html\"><code>ExecutorService</code></a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html\"><code>ScheduledExecutorService</code></a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadFactory.html\"><code>ThreadFactory</code></a>, and <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Callable.html\"><code>Callable</code></a> classes defined in this package.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html\">Executor</a></td>\n<td>An object that executes submitted <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html\"><code>Runnable</code></a> tasks.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html\">ExecutorService</a></td>\n<td>An <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html\"><code>Executor</code></a> that provides methods to manage termination and methods that can produce a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html\"><code>Future</code></a> for tracking progress of one or more asynchronous tasks.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/AbstractExecutorService.html\">AbstractExecutorService</a></td>\n<td>Provides default implementations of <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html\"><code>ExecutorService</code></a> execution methods.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html\">ScheduledExecutorService</a></td>\n<td>An <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html\"><code>ExecutorService</code></a> that can schedule commands to run after a given delay, or to execute periodically.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html\">ThreadPoolExecutor</a></td>\n<td>An <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html\"><code>ExecutorService</code></a> that executes each submitted task using one of possibly several pooled threads, normally configured using <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html\"><code>Executors</code></a> factory methods.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html\">ScheduledThreadPoolExecutor</a></td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html\"><code>ThreadPoolExecutor</code></a> that can additionally schedule commands to run after a given delay, or to execute periodically.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RejectedExecutionHandler.html\">RejectedExecutionHandler</a></td>\n<td>A handler for tasks that cannot be executed by a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html\"><code>ThreadPoolExecutor</code></a>.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.AbortPolicy.html\">ThreadPoolExecutor.AbortPolicy</a></td>\n<td>A handler for rejected tasks that throws a <code>RejectedExecutionException</code>.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.CallerRunsPolicy.html\">ThreadPoolExecutor.CallerRunsPolicy</a></td>\n<td>A handler for rejected tasks that runs the rejected task directly in the calling thread of the <code>execute</code> method, unless the executor has been shut down, in which case the task is discarded.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.DiscardOldestPolicy.html\">ThreadPoolExecutor.DiscardOldestPolicy</a></td>\n<td>A handler for rejected tasks that discards the oldest unhandled request and then retries <code>execute</code>, unless the executor is shut down, in which case the task is discarded.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.DiscardPolicy.html\">ThreadPoolExecutor.DiscardPolicy</a></td>\n<td>A handler for rejected tasks that silently discards the rejected task.</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">阅读JDK-ThreadPoolExecutor注释:</span><br><span class=\"line\"></span><br><span class=\"line\">- Thread pools address two different problems; 解决的场景</span><br><span class=\"line\">- newCachedThreadPool vs newFixedThreadPool vs newSingleThreadExecutor;常用工具</span><br><span class=\"line\">- Core and maximum pool sizes; 讨论coreSize maxSize queue与创建线程、运行线程的关系</span><br><span class=\"line\">- On-demand construction; prestartCoreThread、prestartAllCoreThreads与提交任务时创建运行线程的区别</span><br><span class=\"line\">- Creating new threads; 默认或自定义的线程工厂类,the thread&#x27;s name, thread group, priority, daemon status</span><br><span class=\"line\">- Keep-alive times;  大于coreSize小于maxSize的线程idle时间到限制情形;小于coreSize的线程idle时间到限制情形;</span><br><span class=\"line\">- Queuing; Direct handoffs(SynchronousQueue);  Unbounded queues(LinkedBlockingQueue); Bounded queues(ArrayBlockingQueue)   关于maxSize与queue类型和queue的限制数量的平衡，及不同平衡下cpu使用率与吞吐量的关系，不同平衡方式的适用场景</span><br><span class=\"line\">- Rejected tasks;  AbortPolicy,CallerRunsPolicy,DiscardPolicy,DiscardOldestPolicy</span><br><span class=\"line\">- Hook methods;扩展beforeExecute,afterExecute;扩展方法中抛出异常的场景</span><br><span class=\"line\">- Queue maintenance;</span><br><span class=\"line\">- Finalization;  不在使用pool,且未shutdown的场景时，如何处理</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"ForkJoin\"><a href=\"#ForkJoin\" class=\"headerlink\" title=\"ForkJoin\"></a>ForkJoin</h2><table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html\">ForkJoinPool</a></td>\n<td>An <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html\"><code>ExecutorService</code></a> for running <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html\"><code>ForkJoinTask</code></a>s.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html\">ForkJoinTask</a><V></td>\n<td>Abstract base class for tasks that run within a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html\"><code>ForkJoinPool</code></a>.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinWorkerThread.html\">ForkJoinWorkerThread</a></td>\n<td>A thread managed by a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html\"><code>ForkJoinPool</code></a>, which executes <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html\"><code>ForkJoinTask</code></a>s.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html\">ForkJoinPool.ForkJoinWorkerThreadFactory</a></td>\n<td>Factory for creating new <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinWorkerThread.html\"><code>ForkJoinWorkerThread</code></a>s.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.ManagedBlocker.html\">ForkJoinPool.ManagedBlocker</a></td>\n<td>Interface for extending managed parallelism for tasks running in <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html\"><code>ForkJoinPool</code></a>s.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html\">CountedCompleter</a><T></td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html\"><code>ForkJoinTask</code></a> with a completion action performed when triggered and there are no remaining pending actions.</td>\n</tr>\n</tbody></table>\n<h2 id=\"deque-and-others\"><a href=\"#deque-and-others\" class=\"headerlink\" title=\"deque and others\"></a>deque and others</h2><table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html\">BlockingDeque</a><E></td>\n<td>A <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html\"><code>Deque</code></a> that additionally supports blocking operations that wait for the deque to become non-empty when retrieving an element, and wait for space to become available in the deque when storing an element.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html\">LinkedBlockingDeque</a><E></td>\n<td>An optionally-bounded <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html\">blocking deque</a> based on linked nodes.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html\">ConcurrentLinkedDeque</a><E></td>\n<td>An unbounded concurrent <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html\">deque</a> based on linked nodes.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html\">ConcurrentSkipListSet</a><E></td>\n<td>A scalable concurrent <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/NavigableSet.html\"><code>NavigableSet</code></a> implementation based on a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html\"><code>ConcurrentSkipListMap</code></a>.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html\">ThreadLocalRandom</a></td>\n<td>A random number generator isolated to the current thread.</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html\">TimeUnit</a></td>\n<td>A <code>TimeUnit</code> represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units</td>\n</tr>\n</tbody></table>\n<h1 id=\"ThreadMXBean\"><a href=\"#ThreadMXBean\" class=\"headerlink\" title=\"ThreadMXBean\"></a>ThreadMXBean</h1><p>ThreadMXBean  &amp;&amp;  java.lang.management.ThreadInfo</p>\n<p>Some Tips</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Disruptor的多线程  </span><br><span class=\"line\">Netty中的多线程</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">LinkedTransferQueue用一种追加字节的方式来优化队列出队和入队的性能</span><br><span class=\"line\"></span><br><span class=\"line\">开发技巧: JDK工具的内存填充   Disruptor中的内存填充</span><br><span class=\"line\">Unsafe:cas   Disruptor的多线程  Netty中的多线程</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">性能测试</span><br><span class=\"line\">- 系统负载、cpu利用率、网络流量、系统内存</span><br><span class=\"line\">- 性能指标  测试的目标</span><br><span class=\"line\">- 性能测试工具</span><br><span class=\"line\">- 定位性能瓶颈(数据库链接、线程池、cpu、内存等)，重新调整，再次测试</span><br><span class=\"line\"></span><br><span class=\"line\">线上问题的常见定位思路:日志、系统状态、 dump线程</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"Pattern\"><a href=\"#Pattern\" class=\"headerlink\" title=\"Pattern\"></a>Pattern</h1><p><img src=\"/flame/images/java/java-concurrency-pattern-outline.png\" alt=\"pattern outline\"></p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>语境</th>\n<th>问题</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Single Threaded Execution</td>\n<td>多个线程共享实例时</td>\n<td>如果各个线程随时地改变实例状态，实例会失去安全性</td>\n</tr>\n<tr>\n<td>Immutable</td>\n<td>多个线程共享实例，但是实例的状态不会发生变化</td>\n<td>如果使用Single Threaded Execution，吞吐量会下降</td>\n</tr>\n<tr>\n<td>Guarded Suspension</td>\n<td>多个线程共享实例时</td>\n<td>如果各个线程都随意地访问实例，实例会失去安全性</td>\n</tr>\n<tr>\n<td>Balking</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Producer-Consumer</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Read-Write Lock</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Thread-Per-Message</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Worker Pool</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Future</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Two-Phase Termination</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Thread-Specific Storage</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Active Object</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>解决方案</th>\n<th>实现</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Single Threaded Execution</td>\n<td>严格规定临界区，确保临界区只能被一个线程执行</td>\n<td>可以使用synchronized来实现</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Immutable</td>\n<td>为了防止不小心写出改变实例状态的代码，请修改代码，让线程无法改变表示实例状态的字段。</td>\n<td>可以使用private隐藏字段，还可以使用final来确保字段无法改变</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Guarded Suspension</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Balking</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Producer-Consumer</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Read-Write Lock</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Thread-Per-Message</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Worker Pool</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Future</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Two-Phase Termination</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Thread-Specific Storage</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Active Object</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n","categories":["java","concurrency"],"tags":["java","concurrency"]},{"title":"java features","url":"/flame/2021/11/29/java/java-features/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>​\tjava中常用feature</p>\n<span id=\"more\"></span>\n\n<p>3</p>\n","categories":["java","features"],"tags":["java"]},{"title":"mysql jdbc","url":"/flame/2021/11/18/java/java-jdbc/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>​\t关于Mysql-JDBC的使用</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h1><p>JDBC(Java Database Connectivity)是java应用统一访问数据库层的api。</p>\n<table>\n<thead>\n<tr>\n<th>JDK</th>\n<th>JDBC Version</th>\n<th>JSR Specification</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>jdk8</td>\n<td>JDBC 4.2</td>\n<td>JSR 221</td>\n</tr>\n<tr>\n<td>jdk7</td>\n<td>JDBC 4.1</td>\n<td>JSR 221</td>\n</tr>\n<tr>\n<td>jdk6</td>\n<td>JDBC 4.0</td>\n<td>JSR 221</td>\n</tr>\n</tbody></table>\n<h1 id=\"Mysql-JDBC\"><a href=\"#Mysql-JDBC\" class=\"headerlink\" title=\"Mysql JDBC\"></a>Mysql JDBC</h1><p>Mysql-JDBC是用于mysql的JDBC驱动</p>\n<h2 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h2><p>Mysql Connection URL 格式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">jdbc:mysql:<span class=\"comment\">//[host][:port]/[database][?property1][=value1]...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  host - The host name where MySQL server is running.</span><br><span class=\"line\">         Default is <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> - the IP address of localhost.</span><br><span class=\"line\"></span><br><span class=\"line\">  port - The port number where MySQL is listening <span class=\"keyword\">for</span> connection.</span><br><span class=\"line\">         Default is <span class=\"number\">3306.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Database - The name of an existing database on MySQL server.</span><br><span class=\"line\">         If not specified, the connection starts no current database.</span><br><span class=\"line\"></span><br><span class=\"line\">  Property - The name of a supported connection properties.</span><br><span class=\"line\">         <span class=\"string\">&quot;user&quot;</span> and <span class=\"string\">&quot;password&quot;</span> are <span class=\"number\">2</span> most important properties.</span><br><span class=\"line\">    </span><br><span class=\"line\">  Value - The value <span class=\"keyword\">for</span> the specified connection property.</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<p>样例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">jdbc:mysql:<span class=\"comment\">//localhost:3306/testDb?user=root&amp;password=123456</span></span><br><span class=\"line\">jdbc:mysql:<span class=\"comment\">//:3306/testDb?user=root&amp;password=123456</span></span><br><span class=\"line\">jdbc:mysql:<span class=\"comment\">//localhost/testDb?user=root&amp;password=123456</span></span><br><span class=\"line\">jdbc:mysql:<span class=\"comment\">//localhost:3306/?user=root&amp;password=123456</span></span><br><span class=\"line\">jdbc:mysql:<span class=\"comment\">//localhost/?user=root&amp;password=123456</span></span><br><span class=\"line\">jdbc:mysql:<span class=\"comment\">//:3306/?user=root&amp;password=123456</span></span><br><span class=\"line\">jdbc:mysql:<span class=\"comment\">///HerongDB?user=root&amp;password=123456</span></span><br><span class=\"line\">jdbc:mysql:<span class=\"comment\">///?user=root&amp;password=123456</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h2><ul>\n<li><p>Class.forName</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Load the MySQL JDBC driver，前提是mysql driver jar存在</span></span><br><span class=\"line\">Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>system prperties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">-Djdbc.drivers=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动(驱动自定义: META-INF&#x2F;services&#x2F;jdbc.sql.Driver)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//JDK8会自动加载类路径下存在的Mysql Jdbc Driver。</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><p>建立connection的两种方式：</p>\n<ul>\n<li><p>by DriverManager</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Connection con = DriverManager.getConnection(String mysqlConnectionUrl);</span><br><span class=\"line\"></span><br><span class=\"line\">Connection con = DriverManager.getConnection(String mysqlConnectionUrl, Properties info)</span><br><span class=\"line\"></span><br><span class=\"line\">Connection con = DriverManager.getConnection(String mysqlConnectionUrl,  String user, String password)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>by DataSource</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">dataSource.getConnection</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"Experiments\"><a href=\"#Experiments\" class=\"headerlink\" title=\"Experiments\"></a>Experiments</h1><p><a href=\"https://github.com/agui93/agui93-moonlight/tree/master/java-projects/middlewares/jdbc\">JDBC experiments</a></p>\n<table>\n<thead>\n<tr>\n<th>类</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>JdbcCase1</td>\n<td>list jdbc dirvers</td>\n</tr>\n<tr>\n<td>JdbcCase2</td>\n<td>build connection by DriverManager <br/>build connection by DataSource</td>\n</tr>\n<tr>\n<td>JdbcCase3</td>\n<td>java.sql.Statement api usage</td>\n</tr>\n<tr>\n<td>JdbcCase</td>\n<td>java.sql.PreparedStatement api usage</td>\n</tr>\n<tr>\n<td>JdbcCase5</td>\n<td>java.sql.PreparedStatement Insert Performance</td>\n</tr>\n</tbody></table>\n<h1 id=\"Statement\"><a href=\"#Statement\" class=\"headerlink\" title=\"Statement\"></a>Statement</h1><p>使用Statement处理SQL.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Statement</span> <span class=\"variable\">statement</span> <span class=\"operator\">=</span> connection.createStatement();</span><br><span class=\"line\"></span><br><span class=\"line\">statement.executeUpdate...</span><br><span class=\"line\"></span><br><span class=\"line\">statement.executeQuery...</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"PreparedStatement\"><a href=\"#PreparedStatement\" class=\"headerlink\" title=\"PreparedStatement\"></a>PreparedStatement</h1><p>If you have a SQL statement that needs to be executed <strong>multiple times</strong>, it is more efficient to use a JDBC PreparedStatement object to run it.</p>\n<p>JDBC PreparedStatement features:</p>\n<ul>\n<li>SQL statements PreparedStatement objects are <strong>pre-compiled</strong> on the database server side.</li>\n<li><strong>IN</strong> parameters are supported in SQL statements in PreparedStatement objects.</li>\n<li><strong>Batch execution mode</strong> is supported to run the run SQL statement multiple times in a single transaction.</li>\n</ul>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p>To make a PreparedStatement object more flexible, you can add parameters to the <strong>embedded SQL statement</strong> with question marks (?). </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//by?符号</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">embeddedSQL</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;SELECT * FROM Profile WHERE ID = ?&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//get prepareStatement</span></span><br><span class=\"line\"><span class=\"type\">PreparedStatement</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> connection.prepareStatement(embeddedSQL);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Sets value to the n-th parameter.</span></span><br><span class=\"line\">ps.setXXX(<span class=\"number\">1</span>, value);</span><br><span class=\"line\">ps.setXXX(<span class=\"number\">2</span>, value);</span><br><span class=\"line\">...</span><br><span class=\"line\">ps.setXXX(n, value);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//execute</span></span><br><span class=\"line\">ps.execute...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"批量处理\"><a href=\"#批量处理\" class=\"headerlink\" title=\"批量处理\"></a>批量处理</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ps.setXXX(...);  <span class=\"comment\">// Set parameters for the first copy</span></span><br><span class=\"line\">...</span><br><span class=\"line\">ps.addBatch();   <span class=\"comment\">// Create the first copy of the SQL statement</span></span><br><span class=\"line\">ps.setXXX(...);  <span class=\"comment\">// Set parameters for the second copy</span></span><br><span class=\"line\">...</span><br><span class=\"line\">ps.addBatch();   <span class=\"comment\">// Create the second copy of the SQL statement</span></span><br><span class=\"line\">ps.setXXX(...);  <span class=\"comment\">// Set parameters for the third copy</span></span><br><span class=\"line\">...</span><br><span class=\"line\">ps.addBatch();   <span class=\"comment\">// Create the third copy of the SQL statement</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ps.executeBatch(); <span class=\"comment\">// Execute all copies together as a batch</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><p>结论: If you have a SQL statement that needs to be executed <strong>multiple times</strong>, it is more efficient to use a JDBC PreparedStatement object to run it.</p>\n<p><a href=\"https://github.com/agui93/agui93-moonlight/tree/master/java-projects/middlewares/jdbc\">实验代码JdbcCase5</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"number\">551</span> ms used when insert   <span class=\"number\">100</span> records by ResultSet.</span><br><span class=\"line\">  <span class=\"number\">202</span> ms used when insert   <span class=\"number\">100</span> records by Statement.</span><br><span class=\"line\">  <span class=\"number\">188</span> ms used when insert   <span class=\"number\">100</span> records by PreparedStatement.</span><br><span class=\"line\">  <span class=\"number\">183</span> ms used when insert   <span class=\"number\">100</span> records by PreparedStatement-BatchInsert.</span><br><span class=\"line\">=====================</span><br><span class=\"line\">  <span class=\"number\">610</span> ms used when insert   <span class=\"number\">200</span> records by ResultSet.</span><br><span class=\"line\">  <span class=\"number\">416</span> ms used when insert   <span class=\"number\">200</span> records by Statement.</span><br><span class=\"line\">  <span class=\"number\">337</span> ms used when insert   <span class=\"number\">200</span> records by PreparedStatement.</span><br><span class=\"line\">  <span class=\"number\">386</span> ms used when insert   <span class=\"number\">200</span> records by PreparedStatement-BatchInsert.</span><br><span class=\"line\">=====================</span><br><span class=\"line\"> <span class=\"number\">2309</span> ms used when insert   <span class=\"number\">500</span> records by ResultSet.</span><br><span class=\"line\">  <span class=\"number\">970</span> ms used when insert   <span class=\"number\">500</span> records by Statement.</span><br><span class=\"line\">  <span class=\"number\">920</span> ms used when insert   <span class=\"number\">500</span> records by PreparedStatement.</span><br><span class=\"line\">  <span class=\"number\">820</span> ms used when insert   <span class=\"number\">500</span> records by PreparedStatement-BatchInsert.</span><br><span class=\"line\">=====================</span><br><span class=\"line\"> <span class=\"number\">3502</span> ms used when insert  <span class=\"number\">1000</span> records by ResultSet.</span><br><span class=\"line\"> <span class=\"number\">2000</span> ms used when insert  <span class=\"number\">1000</span> records by Statement.</span><br><span class=\"line\"> <span class=\"number\">2019</span> ms used when insert  <span class=\"number\">1000</span> records by PreparedStatement.</span><br><span class=\"line\"> <span class=\"number\">2020</span> ms used when insert  <span class=\"number\">1000</span> records by PreparedStatement-BatchInsert.</span><br><span class=\"line\">=====================</span><br><span class=\"line\"> <span class=\"number\">7362</span> ms used when insert  <span class=\"number\">2000</span> records by ResultSet.</span><br><span class=\"line\"> <span class=\"number\">4972</span> ms used when insert  <span class=\"number\">2000</span> records by Statement.</span><br><span class=\"line\"> <span class=\"number\">4218</span> ms used when insert  <span class=\"number\">2000</span> records by PreparedStatement.</span><br><span class=\"line\"> <span class=\"number\">6301</span> ms used when insert  <span class=\"number\">2000</span> records by PreparedStatement-BatchInsert.</span><br><span class=\"line\">=====================</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"CallableStatement\"><a href=\"#CallableStatement\" class=\"headerlink\" title=\"CallableStatement\"></a>CallableStatement</h1><p>CallableStatement : 支持调用存储过程,提供了对输出和输入&#x2F;输出参数(INOUT)的支持;</p>\n<ul>\n<li>A JDBC CallableStatement object allows you to call stored procedures in the database server.</li>\n<li>IN and OUT parameters can be passed to stored procedures from JDBC CallableStatement objects.</li>\n</ul>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/\">Java Jdbc Guides</a></p>\n<p><a href=\"https://docs.oracle.com/javase/tutorial/jdbc/basics/index.html\">JDBC Basics Tutorial</a></p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/sql/package-summary.html\">Java Sql Package Summary</a></p>\n<p><a href=\"http://www.herongyang.com/JDBC/\">JDBC Tutorials Examples</a></p>\n<p><a href=\"https://www.cnblogs.com/noteless/category/1382609.html\">JDBC介绍</a></p>\n","categories":["java","jdbc"],"tags":["java","jdbc","mysql"]},{"title":"Java NIO","url":"/flame/2021/10/23/java/java-nio-socket/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​\t本文是对java中nio(non-blocking io)的总结:</p>\n<ul>\n<li><p>网络服务的总结</p>\n</li>\n<li><p>Reactor模式</p>\n</li>\n<li><p>java.nio的api</p>\n</li>\n<li><p>代码实现</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"NIO-新的还是非阻塞的\"><a href=\"#NIO-新的还是非阻塞的\" class=\"headerlink\" title=\"NIO-新的还是非阻塞的\"></a>NIO-新的还是非阻塞的</h2><blockquote>\n<p>新的还是非阻塞的</p>\n<p>NIO 最开始是新的输入&#x2F;输出（New Input&#x2F;Output）的英文缩写，但是，该Java API 已经出现足够长的时间 了，不再是“新的”了，因此，如今大多数的用户认为NIO 代表非阻塞 I&#x2F;O（Non-blocking I&#x2F;O），而阻塞I&#x2F;O（blocking I&#x2F;O）是旧的输入&#x2F;输出（old input&#x2F;output，OIO）。你也可能遇到它被称为普通I&#x2F;O（plain I&#x2F;O）的时候。</p>\n</blockquote>\n<p>java.nio.channels.Selector是 Java 的非阻塞 I&#x2F;O 实现的关键。</p>\n<p>它使用了事件通知 API 以确定在一组非阻塞套接字中有哪些已经就绪能够进 行 I&#x2F;O 相关的操作。</p>\n<p>使用较少的线程便可以处理许多连接，因此也减少了内存管理和上下文切换所带来开销。</p>\n<p>当没有 I&#x2F;O 操作需要处理的时候，线程也可以被用于其他任务。</p>\n<h2 id=\"网络服务\"><a href=\"#网络服务\" class=\"headerlink\" title=\"网络服务\"></a>网络服务</h2><p>下图是网络服务经典设计, 每个handler都是在自己的单独线程中执行</p>\n<p><img src=\"/flame/images/java/nio-network-service-classic-design.png\" alt=\"Classic Network Service Designs\"></p>\n<p>从上图中可以看出, 网络服务中的任务可以划分为:</p>\n<ul>\n<li><p>Read request </p>\n</li>\n<li><p>Decode request </p>\n</li>\n<li><p>Process service </p>\n</li>\n<li><p>Encode reply </p>\n</li>\n<li><p>Send reply</p>\n</li>\n</ul>\n<p>而在不同类型的网络服务中，任务的性质和成本是有区别，例如：解析XML、传送文件、生成web页面、纯计算任务等等</p>\n<h3 id=\"C10K-C10M问题\"><a href=\"#C10K-C10M问题\" class=\"headerlink\" title=\"C10K C10M问题\"></a>C10K C10M问题</h3><p>见于 <a href=\"http://www.kegel.com/c10k.html\">C10K C10M的经典问题</a></p>\n<h3 id=\"可扩展的目标\"><a href=\"#可扩展的目标\" class=\"headerlink\" title=\"可扩展的目标\"></a>可扩展的目标</h3><p>在网络服务中，我们会关注如下目标:</p>\n<ul>\n<li>负载持续增加时可以优雅的降级</li>\n<li>能够通过增加系统硬件资源(CPU, memory, disk, bandwidth)，持续提升系统的处理能力</li>\n<li>低延迟</li>\n<li>能够满足峰值需要</li>\n<li>可调优的服务质量</li>\n</ul>\n<p>而在实现可扩展的目标时，最优的策略一般是<strong>分而治之</strong></p>\n<h3 id=\"设计策略-分而治之\"><a href=\"#设计策略-分而治之\" class=\"headerlink\" title=\"设计策略:分而治之\"></a>设计策略:分而治之</h3><ul>\n<li><p>任务划分  </p>\n<p>把任务划分为更小的任务进行处理，每个任务的执行都是<strong>非阻塞</strong>的</p>\n</li>\n<li><p>事件触发  </p>\n<p>一个IO事件看作是任务执行的触发器</p>\n</li>\n<li><p>基本机制: java.nio的支持</p>\n<p><strong>非阻塞</strong>的读和写 </p>\n<p><strong>监听</strong>事件, 把事件<strong>分发</strong>给事件<strong>关联</strong>的任务</p>\n</li>\n<li><p>变化的可能  </p>\n<p>基于事件驱动的模式</p>\n</li>\n</ul>\n<h4 id=\"基于事件驱动的模式\"><a href=\"#基于事件驱动的模式\" class=\"headerlink\" title=\"基于事件驱动的模式\"></a>基于事件驱动的模式</h4><p>Usually more efficient than alternatives</p>\n<ul>\n<li><p>Fewer resources</p>\n<p>Don’t usually need a thread per client</p>\n</li>\n<li><p>Less overhead</p>\n<p>Less context switching, often less locking</p>\n</li>\n<li><p>But dispatching can be slower</p>\n<p>Must manually bind actions to events</p>\n</li>\n</ul>\n<p>Usually harder to program</p>\n<ul>\n<li><p>Must break up into simple non-blocking actions</p>\n<p>Similar to GUI event-driven actions</p>\n<p>Cannot eliminate all blocking: GC, page faults, etc</p>\n</li>\n<li><p>Must keep track of logical state of service</p>\n</li>\n</ul>\n<h2 id=\"Reactor模式\"><a href=\"#Reactor模式\" class=\"headerlink\" title=\"Reactor模式\"></a>Reactor模式</h2><p>Reactor是基于事件驱动的模式，常用于网络编程</p>\n<p>在Reactor Pattern中的作用划分</p>\n<ul>\n<li><p>Reactor </p>\n<p>responds to IO events by dispatching the appropriate handler</p>\n</li>\n<li><p>Handlers </p>\n<p>perform non-blocking actions</p>\n</li>\n<li><p>Manage </p>\n<p>by binding handlers to events</p>\n</li>\n</ul>\n<h3 id=\"Reactor论文\"><a href=\"#Reactor论文\" class=\"headerlink\" title=\"Reactor论文\"></a>Reactor论文</h3><p>论文详情:  <a href=\"http://www.dre.vanderbilt.edu/~schmidt/PDF/reactor-siemens.pdf\">An Object Behavioral Pattern for Demultiplexing and Dispatching Handles for Synchronous Events</a></p>\n<p>Reactor论文的解决方案:</p>\n<blockquote>\n<p>Solution</p>\n<p>Integrate the synchronous demultiplexing of events and the dispatching of their corresponding event handlers that process the events. In addition, decouple the applicationspecific dispatching and implementation of services from the general-purpose event demultiplexing and dispatching mechanisms. For each service the application offers, introduce a separate Event Handler that processes certain types of events. All Event Handlers implement the same interface. Event Handlers register with an Initiation Dispatcher, which uses a Synchronous Event Demultiplexer to wait for events to occur. When events occur, the Synchronous Event Demultiplexer notifies the Initiation Dispatcher, which synchronously calls back to the Event Handler associated with the event. The Event Handler then dispatches the event to the method that implements the requested service.</p>\n</blockquote>\n<p>下图是Reactor论文总结的基本结构</p>\n<p><img src=\"/flame/images/java/reactor-pattern-structure.png\" alt=\"Reactor论文总结的基本结构\"></p>\n<p>下图是Reactor论文总结的协作</p>\n<p><img src=\"/flame/images/java/reactor-pattern-general-collaborations.png\" alt=\"Reactor论文总结的协作\"></p>\n<h4 id=\"Reactor-Paper-Collaboration-Scenarios\"><a href=\"#Reactor-Paper-Collaboration-Scenarios\" class=\"headerlink\" title=\"Reactor Paper Collaboration Scenarios\"></a>Reactor Paper Collaboration Scenarios</h4><p>下图是Reactor论文的举例 : Client Connects to a Reactive Logging Server</p>\n<p><img src=\"/flame/images/java/reactor-pattern-paper-collaboration-scenarios-one.png\" alt=\"Scenarios: Client Connects to a Reactive Logging Server\"></p>\n<blockquote>\n<p>This sequence of steps can be summarized as follows:</p>\n<ol>\n<li>The logging server (1) registers the Logging Acceptor with the Initiation Dispatcher to handle connection requests; </li>\n<li>The logging server invokes the handle events method (2) of the Initiation Dispatcher; </li>\n<li>The Initiation Dispatcher invokes the synchronous event demultiplexing select (3) operation to wait for connection requests or logging data to arrive; </li>\n<li>A client connects (4) to the logging server; </li>\n<li>The Logging Acceptor is notified by the Initiation Dispatcher (5) of the new connection request; </li>\n<li>The Logging Acceptor accepts (6) the new connection;</li>\n<li>The Logging Acceptor creates (7) a Logging Handler to service the new client; </li>\n<li>Logging Handler registers (8) its socket handle with the Initiation Dispatcher and instructs the dispatcher to notify it when the socket becomes “ready for reading.”</li>\n</ol>\n</blockquote>\n<p>下图是Reactor模式的举例：Client Sends Logging Record to a Reactive Logging Server</p>\n<p><img src=\"/flame/images/java/reactor-pattern-paper-collaboration-scenarios-second.png\" alt=\"Scenarios:Client Sends Logging Record to a Reactive Logging Server\"></p>\n<blockquote>\n<p>The sequence of steps that the reactive logging server takes to service a logging record.</p>\n<ol>\n<li>The client sends (1) a logging record; </li>\n<li>The Initiation Dispatcher notifies (2) the associated Logging Handler when a client logging record is queued on its socket handle by OS; </li>\n<li>The record is received (3) in a non-blocking manner (steps 2 and 3 repeat until the logging record has been received completely); </li>\n<li>The Logging Handler processes the logging record and writes (4) it to the standard output.</li>\n<li>The Logging Handler returns (5) control to the Initiation Dispatcher’s event loop.</li>\n</ol>\n</blockquote>\n<h3 id=\"Basic-version\"><a href=\"#Basic-version\" class=\"headerlink\" title=\"Basic version\"></a>Basic version</h3><p><img src=\"/flame/images/java/nio-reactor-single-thread-version.png\" alt=\"Single thread version\"></p>\n<h3 id=\"Multithreaded-versions\"><a href=\"#Multithreaded-versions\" class=\"headerlink\" title=\"Multithreaded versions\"></a>Multithreaded versions</h3><p><img src=\"/flame/images/java/nio-reactor-worker-thread-pool-version.png\" alt=\"Worker Thread Pools\"></p>\n<h3 id=\"Using-multiple-reactors\"><a href=\"#Using-multiple-reactors\" class=\"headerlink\" title=\"Using multiple reactors\"></a>Using multiple reactors</h3><p><img src=\"/flame/images/java/nio-reactor-multi-reactors-version.png\" alt=\"Using Multiple Reactors\"></p>\n<h2 id=\"java-nio\"><a href=\"#java-nio\" class=\"headerlink\" title=\"java nio\"></a>java nio</h2><p><a href=\"http://gee.cs.oswego.edu/dl/cpjslides/nio.pdf\">Doug Lea : Scalable IO in Java</a></p>\n<p>java-nio原理是基于非阻塞同步IO模型(见于<a href=\"/flame/2021/10/22/io-model/\" title=\"&lt;strong&gt;I&#x2F;O模型&lt;&#x2F;strong&gt;\"><strong>I/O模型</strong></a>)， 解决的是IO执行的性能问题。</p>\n<p>java nio的特性主要分为四大类:</p>\n<ul>\n<li><p><strong>Channel</strong></p>\n<p>Connections to files, sockets etc that support non-blocking reads</p>\n</li>\n<li><p><strong>Buffer</strong></p>\n<p>Array-like objects that can be directly read or written by Channels </p>\n</li>\n<li><p><strong>Selector</strong></p>\n<p>Tell which of a set of Channels have IO events </p>\n</li>\n<li><p><strong>SelectionKey</strong></p>\n<p>Maintain IO event status and bindings</p>\n</li>\n</ul>\n<h2 id=\"Api详情\"><a href=\"#Api详情\" class=\"headerlink\" title=\"Api详情\"></a>Api详情</h2><h3 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h3><p>Buffer   ByteBuffe  r (CharBuffer, LongBuffer, etc not shown)</p>\n<p><img src=\"/flame/images/java/java-nio-buffer.png\" alt=\"buffer的内部结构\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Buffer</span> &#123;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">capacity</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">position</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> Buffer <span class=\"title function_\">position</span><span class=\"params\">(<span class=\"type\">int</span> newPosition)</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">limit</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> Buffer <span class=\"title function_\">limit</span><span class=\"params\">(<span class=\"type\">int</span> newLimit)</span>;</span><br><span class=\"line\"> Buffer <span class=\"title function_\">mark</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> Buffer <span class=\"title function_\">reset</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> Buffer <span class=\"title function_\">clear</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> Buffer <span class=\"title function_\">flip</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> Buffer <span class=\"title function_\">rewind</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">remaining</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">hasRemaining</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isReadOnly</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ByteBuffer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Buffer</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> ByteBuffer <span class=\"title function_\">allocateDirect</span><span class=\"params\">(<span class=\"type\">int</span> capacity)</span>;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> ByteBuffer <span class=\"title function_\">allocate</span><span class=\"params\">(<span class=\"type\">int</span> capacity)</span>;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> ByteBuffer <span class=\"title function_\">wrap</span><span class=\"params\">(<span class=\"type\">byte</span>[] src, <span class=\"type\">int</span> offset, <span class=\"type\">int</span> len)</span>;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> ByteBuffer <span class=\"title function_\">wrap</span><span class=\"params\">(<span class=\"type\">byte</span>[] src)</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isDirect</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> ByteOrder <span class=\"title function_\">order</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">order</span><span class=\"params\">(ByteOrder bo)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">slice</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">duplicate</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">compact</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">asReadOnlyBuffer</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">byte</span> <span class=\"title function_\">get</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">byte</span> <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">byte</span>[] dst, <span class=\"type\">int</span> offset, <span class=\"type\">int</span> length)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">byte</span>[] dst)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"type\">byte</span> b)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">byte</span> b)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"type\">byte</span>[] src, <span class=\"type\">int</span> offset, <span class=\"type\">int</span> length)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">put</span><span class=\"params\">(ByteBuffer src)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"type\">byte</span>[] src)</span>;</span><br><span class=\"line\"> <span class=\"type\">char</span> <span class=\"title function_\">getChar</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">char</span> <span class=\"title function_\">getChar</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">putChar</span><span class=\"params\">(<span class=\"type\">char</span> value)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">putChar</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">char</span> value)</span>;</span><br><span class=\"line\"> CharBuffer <span class=\"title function_\">asCharBuffer</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">short</span> <span class=\"title function_\">getShort</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">short</span> <span class=\"title function_\">getShort</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">putShort</span><span class=\"params\">(<span class=\"type\">short</span> value)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">putShort</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">short</span> value)</span>;</span><br><span class=\"line\"> ShortBuffer <span class=\"title function_\">asShortBuffer</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">getInt</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">getInt</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">putInt</span><span class=\"params\">(<span class=\"type\">int</span> value)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">putInt</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">int</span> value)</span>;</span><br><span class=\"line\"> IntBuffer <span class=\"title function_\">asIntBuffer</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">long</span> <span class=\"title function_\">getLong</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">long</span> <span class=\"title function_\">getLong</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">putLong</span><span class=\"params\">(<span class=\"type\">long</span> value)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">putLong</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">long</span> value)</span>;</span><br><span class=\"line\"> LongBuffer <span class=\"title function_\">asLongBuffer</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">float</span> <span class=\"title function_\">getFloat</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">float</span> <span class=\"title function_\">getFloat</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">putFloat</span><span class=\"params\">(<span class=\"type\">float</span> value)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">putFloat</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">float</span> value)</span>;</span><br><span class=\"line\"> FloatBuffer <span class=\"title function_\">asFloatBuffer</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">double</span> <span class=\"title function_\">getDouble</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">double</span> <span class=\"title function_\">getDouble</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">putDouble</span><span class=\"params\">(<span class=\"type\">double</span> value)</span>;</span><br><span class=\"line\"> ByteBuffer <span class=\"title function_\">putDouble</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">double</span> value)</span>;</span><br><span class=\"line\"> DoubleBuffer <span class=\"title function_\">asDoubleBuffer</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Channel</span> &#123;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isOpen</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ReadableByteChannel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Channel</span> &#123;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(ByteBuffer dst)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">WritableByteChannel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Channel</span> &#123;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">write</span><span class=\"params\">(ByteBuffer src)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ScatteringByteChannel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ReadableByteChannel</span> &#123;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(ByteBuffer[] dsts, <span class=\"type\">int</span> offset, <span class=\"type\">int</span> length)</span></span><br><span class=\"line\"> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(ByteBuffer[] dsts)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">GatheringByteChannel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WritableByteChannel</span> &#123;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">write</span><span class=\"params\">(ByteBuffer[] srcs, <span class=\"type\">int</span> offset, <span class=\"type\">int</span> length)</span></span><br><span class=\"line\"> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">write</span><span class=\"params\">(ByteBuffer[] srcs)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"SelectableChannel\"><a href=\"#SelectableChannel\" class=\"headerlink\" title=\"SelectableChannel\"></a>SelectableChannel</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SelectableChannel</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Channel</span> &#123;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">validOps</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isRegistered</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> SelectionKey <span class=\"title function_\">keyFor</span><span class=\"params\">(Selector sel)</span>;</span><br><span class=\"line\"> SelectionKey <span class=\"title function_\">register</span><span class=\"params\">(Selector sel, <span class=\"type\">int</span> ops)</span></span><br><span class=\"line\"> <span class=\"keyword\">throws</span> ClosedChannelException;</span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">configureBlocking</span><span class=\"params\">(<span class=\"type\">boolean</span> block)</span></span><br><span class=\"line\"> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isBlocking</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> Object <span class=\"title function_\">blockingLock</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"SocketChannel\"><a href=\"#SocketChannel\" class=\"headerlink\" title=\"SocketChannel\"></a>SocketChannel</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SocketChannel</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ByteChannel</span> ... &#123;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> SocketChannel <span class=\"title function_\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> Socket <span class=\"title function_\">socket</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">validOps</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isConnected</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isConnectionPending</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isInputOpen</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isOutputOpen</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">connect</span><span class=\"params\">(SocketAddress remote)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">finishConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">shutdownInput</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">shutdownOutput</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(ByteBuffer dst)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(ByteBuffer[] dsts, <span class=\"type\">int</span> offset, <span class=\"type\">int</span> length)</span></span><br><span class=\"line\"> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(ByteBuffer[] dsts)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">write</span><span class=\"params\">(ByteBuffer src)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">write</span><span class=\"params\">(ByteBuffer[] srcs, <span class=\"type\">int</span> offset, <span class=\"type\">int</span> length)</span></span><br><span class=\"line\"> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">write</span><span class=\"params\">(ByteBuffer[] srcs)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"ServerSocketChannel\"><a href=\"#ServerSocketChannel\" class=\"headerlink\" title=\"ServerSocketChannel\"></a>ServerSocketChannel</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServerSocketChannel</span> extends ... &#123;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> ServerSocketChannel <span class=\"title function_\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">validOps</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> ServerSocket <span class=\"title function_\">socket</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> SocketChannel <span class=\"title function_\">accept</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"FileChannel\"><a href=\"#FileChannel\" class=\"headerlink\" title=\"FileChannel\"></a>FileChannel</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileChannel</span> implements ... &#123;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(ByteBuffer dst)</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(ByteBuffer dst, <span class=\"type\">long</span> position)</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(ByteBuffer[] dsts, <span class=\"type\">int</span> offset, <span class=\"type\">int</span> length)</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(ByteBuffer[] dsts)</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">write</span><span class=\"params\">(ByteBuffer src)</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">write</span><span class=\"params\">(ByteBuffer src, <span class=\"type\">long</span> position)</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">write</span><span class=\"params\">(ByteBuffer[] srcs, <span class=\"type\">int</span> offset, <span class=\"type\">int</span> length)</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">write</span><span class=\"params\">(ByteBuffer[] srcs)</span>;</span><br><span class=\"line\"> <span class=\"type\">long</span> <span class=\"title function_\">position</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">position</span><span class=\"params\">(<span class=\"type\">long</span> newPosition)</span>;</span><br><span class=\"line\"> <span class=\"type\">long</span> <span class=\"title function_\">size</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">truncate</span><span class=\"params\">(<span class=\"type\">long</span> size)</span>;</span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">force</span><span class=\"params\">(<span class=\"type\">boolean</span> flushMetaDataToo)</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">transferTo</span><span class=\"params\">(<span class=\"type\">long</span> position, <span class=\"type\">int</span> count,</span></span><br><span class=\"line\"><span class=\"params\"> WritableByteChannel dst)</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">transferFrom</span><span class=\"params\">(ReadableByteChannel src,</span></span><br><span class=\"line\"><span class=\"params\"> <span class=\"type\">long</span> position, <span class=\"type\">int</span> count)</span>;</span><br><span class=\"line\"> FileLock <span class=\"title function_\">lock</span><span class=\"params\">(<span class=\"type\">long</span> position, <span class=\"type\">long</span> size, <span class=\"type\">boolean</span> shared)</span>;</span><br><span class=\"line\"> FileLock <span class=\"title function_\">lock</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> FileLock <span class=\"title function_\">tryLock</span><span class=\"params\">(<span class=\"type\">long</span> pos, <span class=\"type\">long</span> size, <span class=\"type\">boolean</span> shared)</span>;</span><br><span class=\"line\"> FileLock <span class=\"title function_\">tryLock</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> MAP_RO, MAP_RW, MAP_COW;</span><br><span class=\"line\"> MappedByteBuffer <span class=\"title function_\">map</span><span class=\"params\">(<span class=\"type\">int</span> mode, <span class=\"type\">long</span> position, <span class=\"type\">int</span> size)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NOTE: ALL methods <span class=\"keyword\">throw</span> IOException</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Selector</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> Selector <span class=\"title function_\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> Set <span class=\"title function_\">keys</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> Set <span class=\"title function_\">selectedKeys</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">selectNow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">select</span><span class=\"params\">(<span class=\"type\">long</span> timeout)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">select</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">wakeup</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"SelectionKey\"><a href=\"#SelectionKey\" class=\"headerlink\" title=\"SelectionKey\"></a>SelectionKey</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SelectionKey</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> OP_READ, OP_WRITE,</span><br><span class=\"line\"> OP_CONNECT, OP_ACCEPT;</span><br><span class=\"line\"> SelectableChannel <span class=\"title function_\">channel</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> Selector <span class=\"title function_\">selector</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">cancel</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">interestOps</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">interestOps</span><span class=\"params\">(<span class=\"type\">int</span> ops)</span>;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">readyOps</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isReadable</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isWritable</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isConnectable</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"type\">boolean</span> <span class=\"title function_\">isAcceptable</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> Object <span class=\"title function_\">attach</span><span class=\"params\">(Object ob)</span>;</span><br><span class=\"line\"> Object <span class=\"title function_\">attachment</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"代码样例\"><a href=\"#代码样例\" class=\"headerlink\" title=\"代码样例\"></a>代码样例</h2><p>Client发送Ping, Server响应Pong</p>\n","categories":["java","nio","socket","selector"],"tags":["nio","java","socket"]},{"title":"分布式消息系统-kafka","url":"/flame/2021/12/09/kafka/kafka/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Apache Kafka是一种分布式的、基于发布&#x2F;订阅的消息系统，本文对其在以下3个层面进行了总结:</p>\n<ul>\n<li>使用</li>\n<li>运维</li>\n<li>原理</li>\n</ul>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><ul>\n<li>解耦</li>\n<li>削峰 </li>\n<li>异步</li>\n</ul>\n<h1 id=\"关键特性\"><a href=\"#关键特性\" class=\"headerlink\" title=\"关键特性\"></a>关键特性</h1><ul>\n<li>近乎实时性的消息处理能力，即使面对海量消息也能够高效地存储消息和查询消息</li>\n<li>支持批量读写消息，并且会对消息进行批量压缩，这样既提高了网络的利用率，也提高了压 缩效率。</li>\n<li>支持消息分区，每个分区中的消息保证顺序传输，而分区之间则可以并发操作</li>\n<li>支持在线增加分区进行水平扩展</li>\n<li>为每个分区创建多个副本，提高数据的容灾能力</li>\n</ul>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><h2 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a><strong>整体架构</strong></h2><p><img src=\"/flame/images/kafka/kafka-all-logical-structure.png\" alt=\"Kafka集群的整体架构\"></p>\n<p>生产者会根据业务逻辑产生消息，之后根据路由规则将消息发送到指定分区的Leader副本所在的Broker上。<br>在Kafka服务端接收到消息后，会将消息追加到Log中保存，之后Follower副本会与 Leader副本进行同步，当ISR集合中所有副本都完成了此消息的同步后，则Leader副本的HW会增加，并向生产者返回响应。<br> 当消费者加入到Consumer Group时，会触发Rebalance操作将分区分配给不同的消费者消费。随后，消费者会恢复其消费位置，并向Kafka服务端发送拉取消息的请求，Leader副本会验证请求的offset以及其他相关信息，最后返回消息。</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p><strong>Message</strong><br>消息是Kafka中最基本的数据单元，其中主要由key和value构成，key和value都是byte数组<br>Conceptually, an message has a key, value, timestamp, and optional metadata headers.<br>Also called record or event</p>\n<p><strong>Broker</strong><br>Broker：一个的Kafka Server</p>\n<p><strong>Cluster ＆ Controller</strong><br>Cluster：由多个Broker组成，对外提供服务。<br>Controller：是Kafka集群的指挥中心。Cluster会选举出一个Broker来担任 Controller，其他Broker则听从Controller指挥实现相应的功能。</p>\n<p><strong>Topic &amp; Partition ＆ Log</strong><br>Topic: 是用于存储消息的逻辑概念，可以看作一个消息集合。<br>Partition：<br>每个Topic可以划分对个分区，同一Topic下的不同分区包含的消息是不同的。<br>分区在逻辑上对应着一个Log，Log是一个逻辑概念，对应到磁盘上的一个文件夹。<br>Log由多个Segment组成，每个Segment对应一个日志文件和索引文件。</p>\n<p><strong>Offset</strong><br>每个消息在被添加到分区时，都会被分配一个offset，是消息在此分区中的唯一编号。<br>Kafka只保证在同一个分区内的消息是有序的；同一Topic的多个分区内的消息，Kafka并不保证其顺序性。</p>\n<p><strong>Producer</strong><br>Producer是生产者，主要工作是将消息按照一定的规则推送到某Topic下的分区中<br>Producer is a Client application that publish (write) events to Kafka</p>\n<p><strong>Consumer</strong><br>Consumer是消费者，主要工作是从Topic中拉取消息，并对消息进行消费<br>Consumers are those that subscribe to (read and process) these events.</p>\n<p><strong>Consumer Group</strong><br>一组Consumer集合。一个Consumer只能属于一个Consumer Group，Consumer Group保证其订阅的Topic的每个分区只被分配给此Consumer Group中的一个消费者处理。 如果不同Consumer Group订阅了同一Topic，Consumer Group彼此之间不会干扰。<br>Consumer Group中消费者的数量并不是越多越好，当其中消费者数量超过分区的数量时，会导致有消费者分配不到分区，从而造成消费者的浪费</p>\n<hr>\n<p><strong>Event如何Partitioned</strong></p>\n<p><img src=\"/flame/images/kafka/kafka-producer-push-event-2-topic.png\" alt=\"Events Partitioned\"></p>\n<hr>\n<p><strong>一组ConsumerGroup下的消费者如何消费消息</strong></p>\n<p><img src=\"/flame/images/kafka/kafka-one-consumer-group-consume-events.png\" alt=\"一组ConsumerGroup中的消费者消费消息\"></p>\n<hr>\n<h2 id=\"副本机制\"><a href=\"#副本机制\" class=\"headerlink\" title=\"副本机制\"></a>副本机制</h2><p><strong>副本</strong><br>每个Partition可以有多个副本，每个副本中包含的消息是一样的。</p>\n<p><strong>Leader &amp; Follower</strong><br>每个分区的副本集合中，都会选举出一个副本作为Leader副本，所有的读写请求都由选举出的Leader副本处理，其他都作为 Follower副本，Follower副本仅仅是从Leader 副本处把数据拉取到本地之后，同步更新到自己的Log中。</p>\n<p><img src=\"/flame/images/kafka/kafka-partition-leader-follower.png\" alt=\"Leader和Follower间的关系\"></p>\n<p><strong>ISR集合</strong><br>ISR（In-Sync Replica）集合表示的是目前“可用”（alive）且消息量与Leader相差不多的副本集合，是整个副本集合的一个子集。ISR集合中的副本必须满 足下面两个条件：<br>1）副本所在节点必须维持着与ZooKeeper的连接。<br>2）副本最后一条消息的offset与Leader副本的最后一条消息的offset之间的差值不能超出指定的阈值。<br>每个分区中的Leader副本都会维护此分区的ISR集合。写请求首先由Leader副本处理，之后Follower副本会从Leader上拉取写入的消息，这个过程会有一定的延迟，导致Follower副本中保存的消息略少于Leader副 本，只要未超出阈值都是可以容忍的。<br>另外，ISR集合是权衡同步复制和异步复制后的策略</p>\n<p><strong>HW</strong><br>HW（HighWatermark）标记了一个特殊的offset，当消费者处理消息的时候，只能拉取到HW之前的消息，HW之后的消息对消费者来说是不可见的。<br>HW是由Leader副本管理的。当ISR集合中全部的Follower副本都拉取HW指定消息进行同步后，Leader副本会递增HW的值。<br>Kafka将HW之前的消息的状态称为“commit”，其含义是这些消息在多个副本中同时存在，即使此时Leader副本损坏，也不会出现数据丢失。</p>\n<p><strong>LEO</strong><br>LEO（Log End Offset）是所有的副本都会有的一个offset标记，它指向追加到当前副本的最后一个消息的offset。<br>当生产者向Leader副本追加消息的时候，Leader副本的LEO标记会递增；当Follower副本成功从Leader副本拉取消息并更新到本地的时候，Follower副本的LEO就会增加。</p>\n<h1 id=\"Server端原理\"><a href=\"#Server端原理\" class=\"headerlink\" title=\"Server端原理\"></a>Server端原理</h1><h2 id=\"整体架构-1\"><a href=\"#整体架构-1\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h2><p><img src=\"/flame/images/kafka/kafka-server-simple-arch.png\" alt=\"Kafka Server的架构\"></p>\n<p><strong>server端源码</strong></p>\n<blockquote>\n<p>代码module : core包<br>入口代码: kafka.Kafka</p>\n<p><strong>kafka.server.KafkaServer</strong>   :  Represents the lifecycle of a single Kafka broker. Handles all functionality required to start up and shutdown a single Kafka node.</p>\n</blockquote>\n<h2 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h2><p>面对高并发、低延迟的需求，Kafka服务端使用Reactor模式实现其网络层。<br>Kafka的网络层管理的网络连接中不仅有来自客户端的，还会有来自其他Broker的网络连接。</p>\n<h3 id=\"Reactor模式\"><a href=\"#Reactor模式\" class=\"headerlink\" title=\"Reactor模式\"></a>Reactor模式</h3><p><img src=\"/flame/images/kafka/kafka-server-network-reactor-pattern-design.png\" alt=\"Reactor模式\"></p>\n<p>Reactor模式通过将网络处理与业务逻辑进行切分后，读取、写入、业务处理都实现了多线程处理，不再存在性能瓶颈。<br>通过多个selector监听不同的I&#x2F;O事件避免单个Selector带来的瓶颈问题。<br>根据实际的业务需求权衡和设计MessageQueue队列长度，匹配读取请求与业务处理之间的速度。</p>\n<h3 id=\"网络层Model\"><a href=\"#网络层Model\" class=\"headerlink\" title=\"网络层Model\"></a>网络层Model</h3><blockquote>\n<p>The threading model is<br>1 Acceptor thread that handles new connections<br>Acceptor has N Processor threads that each have their own selector and read requests from sockets<br>M Handler threads that handle requests and produce responses back to the processor threads for writing.</p>\n</blockquote>\n<p><img src=\"/flame/images/kafka/kafka-server-network-structure.png\" alt=\"网络层整体结构\"></p>\n<h3 id=\"内部细节\"><a href=\"#内部细节\" class=\"headerlink\" title=\"内部细节\"></a>内部细节</h3><p><strong>Acceptor集合</strong><br>一般的服务器都有多块网卡配置IP，当需要同时监听多个端口，所以需要多个Acceptor。<br><strong>Endpoint</strong>中封装了需要监听的host、port及使用的网络协议。<br>Endpoint集合中每个Endpoint都会创建一个对应的Acceptor对象。</p>\n<p><img src=\"/flame/images/kafka/kafka-server-network-multi-acceptors.png\" alt=\"Accpeptors集合\"></p>\n<hr>\n<p><strong>网络层内部的如何协作</strong><br><strong>Acceptor</strong>的主要功能是接收客户端建立连接的请求，创建Socket连接并分配给Processor处理。<br><strong>Processor</strong>主要用于完成读取请求和写回响应的操作，不参与具体业务逻辑的处理，每个Processor线程对应一个responseQueue。<br><strong>RequestChannel</strong>主要用于Processor线程与Handler线程之间传递数据，包含了一个requestQueue队列和多个responseQueues队列。</p>\n<p><strong>Processor线程</strong>将读取到的请求存入requestQueue中，<br><strong>Handler线程</strong>从requestQueue队列中取出请求进行处理，处理请求产生的响应会存放到Processor对应的responseQueue中，<br><strong>Processor线程</strong>从其对应的responseQueue中取出响应并发送给客户端。</p>\n<hr>\n<p><strong>RequestChannel的结构</strong></p>\n<p><img src=\"/flame/images/kafka/kafka-server-network-requestchannel-structure.png\" alt=\"RequestChannel的结构\"></p>\n<p><strong>网络层面: 一个请求数据从生产者发送到服务端的流转过程</strong></p>\n<p><img src=\"/flame/images/kafka/kafka-server-network-how-produce-message-to-server.png\" alt=\"一个请求数据从生产者发送到服务端的流转过程\"></p>\n<h2 id=\"API层\"><a href=\"#API层\" class=\"headerlink\" title=\"API层\"></a>API层</h2><p>KafkaApis是Kafka服务器处理请求的入口类，负责将KafkaRequestHandler传递过来的请求分发到不同的handle*()处理方法。</p>\n<p>KafkaRequestHandler线程对应的是网络层里的Handler线程，使用简易线程池KafkaRequestHandlerPool来管理</p>\n<p>如下所示是不同的handle*方法分类:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span></span>(request: <span class=\"type\">RequestChannel</span>.<span class=\"type\">Request</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ApiKeys</span>.forId(request.requestId) <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">PRODUCE</span> =&gt; handleProducerRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">FETCH</span> =&gt; handleFetchRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">LIST_OFFSETS</span> =&gt; handleOffsetRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">METADATA</span> =&gt; handleTopicMetadataRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">LEADER_AND_ISR</span> =&gt; handleLeaderAndIsrRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">STOP_REPLICA</span> =&gt; handleStopReplicaRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">UPDATE_METADATA_KEY</span> =&gt; handleUpdateMetadataRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">CONTROLLED_SHUTDOWN_KEY</span> =&gt; handleControlledShutdownRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">OFFSET_COMMIT</span> =&gt; handleOffsetCommitRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">OFFSET_FETCH</span> =&gt; handleOffsetFetchRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">GROUP_COORDINATOR</span> =&gt; handleGroupCoordinatorRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">JOIN_GROUP</span> =&gt; handleJoinGroupRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">HEARTBEAT</span> =&gt; handleHeartbeatRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">LEAVE_GROUP</span> =&gt; handleLeaveGroupRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">SYNC_GROUP</span> =&gt; handleSyncGroupRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">DESCRIBE_GROUPS</span> =&gt; handleDescribeGroupRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">LIST_GROUPS</span> =&gt; handleListGroupsRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">SASL_HANDSHAKE</span> =&gt; handleSaslHandshakeRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">API_VERSIONS</span> =&gt; handleApiVersionsRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">CREATE_TOPICS</span> =&gt; handleCreateTopicsRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">ApiKeys</span>.<span class=\"type\">DELETE_TOPICS</span> =&gt; handleDeleteTopicsRequest(request)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> requestId =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">KafkaException</span>(<span class=\"string\">&quot;Unknown api code &quot;</span> + requestId)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> e: <span class=\"type\">Throwable</span> =&gt;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (request.requestObj != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t.....</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span></span><br><span class=\"line\">    request.apiLocalCompleteTimeMs = time.milliseconds</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"日志存储\"><a href=\"#日志存储\" class=\"headerlink\" title=\"日志存储\"></a>日志存储</h2><p><strong>设计</strong><br>Kafka使用日志文件的方式保存生产者发送的消息。<br>每条消息都有一个offset值来表示它在分区中的偏移量，这个offset值是逻辑值，并不是消息实际存放的物理地址。<br>为了提高写入的性能，同一个分区中的消息是顺序写入的，避免随机写入带来的性能问题。</p>\n<p><img src=\"/flame/images/kafka/kafka-log-store-logical-mechanism.png\" alt=\"Kafka存储机制-逻辑视图\"></p>\n<p>Kafka通过分段的方式将Log分为多个LogSegment，LogSegment是一个逻辑上的概念。<br>一个LogSegment 对应磁盘上的一个日志文件和一个索引文件，其中日志文件用于记录消息，索引文件中保存了消息的索引。<br>随着消息的不断写入，日志文件的大小到达一个阈值时，就创建新的日志文件和索引文件继续写入后续的消息和索引信息。</p>\n<p><img src=\"/flame/images/kafka/kafka-log-logical-structure.png\" alt=\"Log的逻辑结构视图\"></p>\n<p>为了提高查询消息的效率，每个日志文件都对应一个索引文件，这个索引文件并没有为每条消息都建立索引项，而是使用稀疏索引方式为日志文件中的部分消息建立了索引。<br><img src=\"/flame/images/kafka/kafka-log-indexfile-logical-structure.png\" alt=\"索引文件-逻辑视图\"></p>\n<hr>\n<p><strong>实现</strong></p>\n<p>每个日志文件对应一个LogSegment，提供日志文件和索引文件的读写功能以及其他辅助功能。<br>Log是对多个LogSegment对象的顺序组合，形成一个逻辑的日志。<br>LogManager进行管理一个Broker上的所有Log，提供了加载Log、创建Log集合、删除Log集合、查询Log集合等功能<br>LogManager启动了3个周期性的后台任务以及Cleaner线程，分别是：log-flusher（日志刷写）任务、log-retention（日志保留）任务、recovery-pointcheckpoint（检查点刷新）任务以及Cleaner线程（日志清理）</p>\n<table>\n<thead>\n<tr>\n<th>任务</th>\n<th>描述</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>log-retention任务</td>\n<td>按照两个条件进行LogSegment的清理工作：一是LogSegment 的存活时长，二是整个Log的大小。log-retention任务不仅会将过期的LogSegment删除，还会根据Log的大小决定是否删除最旧的LogSegment，以控制整个Log的大小。</td>\n<td></td>\n</tr>\n<tr>\n<td>log-flusher任务</td>\n<td>根据配置的时长定时对Log进行flush操作，保证数据的持久性</td>\n<td></td>\n</tr>\n<tr>\n<td>recovery-pointcheckpoint任务</td>\n<td>定时将每个Log的recoveryPoint写入RecoveryPointCheckpoint文件中</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"延迟操作\"><a href=\"#延迟操作\" class=\"headerlink\" title=\"延迟操作\"></a>延迟操作</h2><p>为了将定时任务的存取操作以及取消操作的时间复杂度降为O(1)，Kafka底层基于时间轮实现的DelayedOperationPurgatory组件，提供了管理延迟操作的功能。JDK提供java.util.Timer和DelayedQueue底层实现使用的是堆，存取操作的复杂度都是 O(nlog(n))，无法支持大量的定时任务。</p>\n<p><strong>时间轮资料</strong></p>\n<p><a href=\"http://www.cs.columbia.edu/~nahum/w6998/papers/ton97-timing-wheels.pdf?from=shareyun.com\">时间轮Paper: Hashed and Hierarchical Timing Wheels: Efficient Data Structures for Implementing a Timer Facility</a><br><a href=\"https://blog.csdn.net/xinzhongtianxia/article/details/86221241\">时间轮算法</a><br><a href=\"https://zhuanlan.zhihu.com/p/102476356\">时间轮对比</a></p>\n<p><strong>时间轮组件</strong></p>\n<blockquote>\n<p>源码:</p>\n<p>DelayedOperationPurgatory<br>DelayedOperation  :   DelayedProduce &amp; DelayedFetch  &amp; DelayedHeartbeat &amp; DelayedJoin &amp;  DelayedCreateTopics &amp; DelayedDeleteTopics<br>SystemTimer<br>TimingWheel</p>\n</blockquote>\n<p><strong>ProducerRequest和DelayedProduce的整体处理流程</strong></p>\n<p><img src=\"/flame/images/kafka/kafka-ProducerRequest-DelayedProduce-process.png\" alt=\"ProducerRequest和DelayedProduce\"></p>\n<p><strong>FetchRequest和DelayFetch的整体处理流程</strong></p>\n<p><img src=\"/flame/images/kafka/kafka-FetchRequest-DelayFetch-process.png\" alt=\"FetchRequest和DelayFetch\"></p>\n<h2 id=\"副本机制-1\"><a href=\"#副本机制-1\" class=\"headerlink\" title=\"副本机制\"></a>副本机制</h2><p>副本机制是为了保证集群的高可用性。每个分区可以有多个副本，均匀地分布在多个Broker上，从副本集合中选举出Leader副本，所有的读写请求都由选举出的Leader副本处理。剩余的其他副本都作为Follower副本， Follower副本会从Leader副本处获取消息并更新到自己的Log中。</p>\n<p><strong>基础概念</strong><br> Leader副本、Follower副本 、AR集合、ISR集合、HW、LEO</p>\n<p><strong>kafka.cluster.Replica</strong><br>表示一个分区的副本，维护了副本信息以及“Local Replica”和“Remote Replica”<br>“Local Replica”是指副本对应的Log分配在当前的Broker上。<br>“Remote Replica”是指副本对应的Log分配在其他的Broker上，在当前Broker上仅仅维护了其LEO等信息。<br>在一个分区的Leader副本中会维护自身以及所有Follower副本的相关状态，而Follower副本只维护自己的状态。</p>\n<p><strong>kafka.cluster.Partition</strong><br>Data structure that represents a topic partition. The leader maintains the AR, ISR, CUR, RAR<br>主要功能:<br>1）管理Replica<br>2）切换副本Leader&#x2F;Follower角色<br>3）管理ISR集合<br>4）通过日志存储子系统追加消息<br>5）检测HW的位置</p>\n<p><strong>kafka.server.ReplicaManager</strong><br>主要功能是管理一个Broker范围内的Partition信息<br>1）副本角色切换: 处理LeaderAndIsrRequest<br>2）追加&#x2F;读取消息: 处理ProducerRequest 、处理FetchRequest<br>3）消息同步: Follower副本与Leader副本同步的功能由ReplicaFetcherManager组件实现<br>4）关闭副本: 处理StopReplicaRequest<br>5）定时任务: highwatermark-checkpoint:会周期性地记录每个Replica的HW并保存到其log目录中的replicationoffset-checkpoint文件中、isr-expiration: 周期性地检测每个分区是否需要缩减其ISR集合、isr-change-propagation: 周期性地将ISR集合发生变化的分区记录到ZooKeeper中<br>6）管理MetadataCache: MetadataCache是Broker用来缓存整个集群中全部分区状态的组件</p>\n<h2 id=\"KafkaController\"><a href=\"#KafkaController\" class=\"headerlink\" title=\"KafkaController\"></a>KafkaController</h2><p>Controller Leader通过发送多种请求管理集群中的其他Broker，KafkaController使用 ControllerChannelManager管理其与集群中各个Broker之间的网络交互。</p>\n<p>ControllerContext中维护了Controller使用到的上下文信息</p>\n<p>ControllerBrokerRequestBatch组件实现批量发送请求的功能</p>\n","categories":["kafka"],"tags":["kafka"]},{"title":"TCP","url":"/flame/2021/10/22/networks/networks-tcp/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>传输控制协议TCP(Transmission Control Protocol)提供可靠的端到端传输，能够处理数据的顺序和错误恢复。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"TCP头\"><a href=\"#TCP头\" class=\"headerlink\" title=\"TCP头\"></a>TCP头</h2><p><img src=\"/flame/images/networks/tcp_protocol_head.png\" alt=\"tcp协议\"></p>\n<p>所有基于TCP的通信: 选择一个随机的源端口与一个已知的目的端口进行通信。</p>\n<h2 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h2><p><img src=\"/flame/images/networks/tcp_handshake_1.png\" alt=\"握手\"></p>\n<h2 id=\"TCP-终止\"><a href=\"#TCP-终止\" class=\"headerlink\" title=\"TCP 终止\"></a>TCP 终止</h2><h2 id=\"TCP-重置\"><a href=\"#TCP-重置\" class=\"headerlink\" title=\"TCP 重置\"></a>TCP 重置</h2>","categories":["网络","tcp"],"tags":["网络","tcp"]},{"title":"网络系统","url":"/flame/22022/07/16/networks/networks/","content":"<p>网络系统概貌</p>\n<span id=\"more\"></span>\n\n\n\n\n<h1 id=\"Network-Overview\"><a href=\"#Network-Overview\" class=\"headerlink\" title=\"Network Overview\"></a>Network Overview</h1><h2 id=\"Terminology\"><a href=\"#Terminology\" class=\"headerlink\" title=\"Terminology\"></a>Terminology</h2><p>Interface</p>\n<p>Packet</p>\n<p>Frame</p>\n<p>Socket</p>\n<p>Bandwidth</p>\n<p>Throughput</p>\n<p>Latency</p>\n<h2 id=\"Models\"><a href=\"#Models\" class=\"headerlink\" title=\"Models\"></a>Models</h2><h3 id=\"Network-Interface\"><a href=\"#Network-Interface\" class=\"headerlink\" title=\"Network Interface\"></a>Network Interface</h3><p>A network interface is an operating system endpoint for network connections; it is an abstraction configured and managed by the system administrators.<br>Network interfaces are mapped to physical network ports as part of their configuration. Ports connect to the network and typically have separate transmit and receive channels.</p>\n<p><img src=\"/flame/images/networks/networks/network-interface-model.png\" alt=\"network-interface-model.png\"></p>\n<h3 id=\"Network-Controller\"><a href=\"#Network-Controller\" class=\"headerlink\" title=\"Network Controller\"></a>Network Controller</h3><p>A network interface card (NIC) provides one or more network ports for the system and houses a network controller: a microprocessor for transferring packets between the ports and the system I&#x2F;O transport.</p>\n<p>The controller is typically provided as a separate expansion card or is built into the system board.</p>\n<p><img src=\"/flame/images/networks/networks/network-controller-model.png\" alt=\"network-controller-model.png\"></p>\n<h3 id=\"Network-Protocol-Stack\"><a href=\"#Network-Protocol-Stack\" class=\"headerlink\" title=\"Network Protocol  Stack\"></a>Network Protocol  Stack</h3><p>Lower layers are drawn wider to indicate protocol encapsulation. Sent messages move down the stack from the application to the physical network. Received messages move up.</p>\n<p>Messages at different layers also use different terminology. Using the OSI model: at the transport layer a message is a segment or datagram; at the network layer a message is a packet; and at the data link layer a message is a frame.</p>\n<p><img src=\"/flame/images/networks/networks/network-protocol-stacks.png\" alt=\"network-protocol-stacks.png\"></p>\n<h2 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h2><h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h2><h3 id=\"Protocols\"><a href=\"#Protocols\" class=\"headerlink\" title=\"Protocols\"></a>Protocols</h3><h3 id=\"Hardware\"><a href=\"#Hardware\" class=\"headerlink\" title=\"Hardware\"></a>Hardware</h3><h3 id=\"Software\"><a href=\"#Software\" class=\"headerlink\" title=\"Software\"></a>Software</h3><p>Networking software includes the network stack, TCP, and device drivers.</p>\n<p><strong>Network Stack</strong></p>\n<p><img src=\"/flame/images/networks/networks/generic-nentwork-stack.png\" alt=\"generic-nentwork-stack.png\"></p>\n<p>On Linux systems, the network stack is a core kernel component, and device drivers are additional modules.Packets are passed through these kernel components as the struct sk_buff (socket buffer) data type. Note that there may also be queueing in the IP layer (not pictured) for packet reassembly</p>\n<p><img src=\"/flame/images/networks/networks/linux-network-stack.png\" alt=\"linux-network-stack.png\"></p>\n<p>Linux implementation details related to performance: TCP connection queues, TCP buffering, queueing disciplines, network device drivers, CPU scaling, and kernel bypass.</p>\n<p><strong>TCP Connection Queues</strong></p>\n<p>Bursts of inbound connections are handled by using backlog queues. There are two such queues, one for incomplete connections while the TCP handshake completes (also known as the SYN backlog), and one for established sessions waiting to be accepted by the application (also known as the listen backlog).</p>\n<p><img src=\"/flame/images/networks/networks/tcp-backlog-queues.png\" alt=\"tcp-backlog-queues.png\"></p>\n<p>With two queues, the first can act as a staging area for potentially bogus connections, which are promoted to the second queue only once the connection is established. The first queue can be made long to absorb SYN floods and optimized to store only the minimum amount of metadata necessary.</p>\n<p>The use of SYN cookies bypasses the first queue, as they show the client is already authorized.</p>\n<p>The length of these queues can be tuned independently. The second can also be set by the application as the backlog argument to listen(2).</p>\n<p><strong>TCP Buffering</strong></p>\n<p>Data throughput is improved by using send and receive buffers associated with the socket.</p>\n<p><img src=\"/flame/images/networks/networks/tcp-send_receive-buffers.png\" alt=\"tcp-send_receive-buffers.png\"></p>\n<p>The size of both the send and receive buffers is tunable. Larger sizes improve throughput performance, at the cost of more main memory spent per connection.</p>\n<p>One buffer may be set to be larger than the other if the server is expected to perform more sending or receiving. The Linux kernel will also dynamically increase the size of these buffers based on connection activity, and allows tuning of their minimum, default, and maximum sizes.</p>\n<p><strong>Segmentation Offload: GSO and TSO</strong></p>\n<p>Network devices and networks accept packet sizes up to a maximum segment size (MSS) that may be as small as 1500 bytes. To avoid the network stack overheads of sending many small packets, Linux uses generic segmentation offload (GSO) to send packets up to 64 Kbytes in size (“super packets”), which are split into MSS-sized segments just before delivery to the network device. If the NIC and driver support TCP segmentation offload (TSO), GSO leaves splitting to the device, improving network stack throughput.5 There is also a generic receive offload (GRO) complement to GSO [Linux 20i].6 GRO and GSO are implemented in kernel software, and TSO is implemented by NIC hardware.</p>\n<p>关于 GSO and TSO 的概念: <a href=\"https://zhuanlan.zhihu.com/p/487385344\">图解网络Offload</a></p>\n<p><strong>Queueing Discipline</strong></p>\n<p>This is an optional layer for managing traffic classification (tc), scheduling, manipulation, filtering, and shaping of network packets. Linux provides numerous queueing discipline algorithms (qdiscs), which can be configured using the tc(8) command.</p>\n<p>As each has a man page, the man(1) command can be used to list them: <code>man -k tc</code></p>\n<p><img src=\"/flame/images/networks/networks/queueing-discipline_man-k-tc.png\" alt=\"queueing-discipline_man-k-tc.png\"></p>\n<p>The Linux kernel sets pfifo_fast as the default qdisc, whereas systemd is less conservative and sets it to fq_codel to reduce potential bufferbloat, at the cost of slightly higher complexity in the qdisc layer.</p>\n<p>BPF can enhance the capabilities of this layer with the programs of type BPF_PROG_TYPE_SCHED_CLS and BPF_PROG_TYPE_SCHED_ACT. These BPF programs can be attached to kernel ingress and egress points for packet filtering, mangling, and forwarding, as used by load balancers and firewalls.</p>\n<p>关于 Queueing Discipline 的概念:</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/276815076/p/5502200.html\">linux 流量控制全攻略(TC)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/67304874\">TC及Netem简介</a></li>\n<li><a href=\"https://www.cnblogs.com/charlieroro/p/13962281.html\">流量控制</a></li>\n</ul>\n<p><strong>Network Device Drivers</strong></p>\n<p>The network device driver usually has an additional buffer — a ring buffer— for sending and receiving packets between kernel memory and the NIC.</p>\n<p>A performance feature that has become more common with high-speed networking is the use of <strong>interrupt coalescing mode</strong>. Instead of interrupting the kernel for every arrived packet, an interrupt is sent only when either a timer (polling) or a certain number of packets is reached. This reduces the rate at which the kernel communicates with the NIC, allowing larger transfers to be buffered, resulting in greater throughput, though at some cost in latency.</p>\n<p>The Linux kernel uses a new API (NAPI) framework that uses an interrupt mitigation technique: for low packet rates, interrupts are used (processing is scheduled via a softirq); for high packet rates, interrupts are disabled, and polling is used to allow coalescing. This provides low latency or high throughput, depending on the workload.</p>\n<p>Other features of NAPI include:</p>\n<ul>\n<li>Packet throttling, which allows early packet drop in the network adapter to prevent the system from being overwhelmed by packet storms.</li>\n<li>Interface scheduling, where a quota is used to limit the buffers processed in a polling cycle, to ensure fairness between busy network interfaces.</li>\n<li>Support for the SO_BUSY_POLL socket option, where user-level applications can reduce network receive latency by requesting to busy wait (spin on CPU until an event occurs) on a socket.</li>\n</ul>\n<p>Coalescing can be especially important for improving virtual machine networking, and is used by the ena network driver used by AWS EC2.</p>\n<p><strong>NIC Send and Receive</strong></p>\n<p>For sent packets, the NIC is notified and typically reads the packet (frame) from kernel memory using direct memory access (DMA) for efficiency. NICs provide transmit descriptors for managing DMA packets; if the NIC does not have free descriptors, the network stack will pause transmission to allow the NIC to catch up.7</p>\n<p>For received packets, NICs can use DMA to place the packet into kernel ring-buffer memory and then notify the kernel using an interrupt (which may be ignored to allow coalescing). The interrupt triggers a softirq to deliver the packet to the network stack for further processing.</p>\n<p><strong>CPU Scaling</strong></p>\n<p>High packet rates can be achieved by engaging multiple CPUs to process packets and the TCP&#x2F; IP stack. Linux supports various methods for multi-CPU packet processing (see Documentation&#x2F; networking&#x2F;scaling.txt):</p>\n<ul>\n<li>RSS: Receive Side Scaling: For modern NICs that support multiple queues and can hash packets to different queues, which are in turn processed by different CPUs, interrupting them directly. This hash may be based on the IP address and TCP port numbers, so that packets from the same connection end up being processed by the same CPU.</li>\n<li>RPS: Receive Packet Steering: A software implementation of RSS, for NICs that do not support multiple queues. This involves a short interrupt service routine to map the inbound packet to a CPU for processing. A similar hash can be used to map packets to CPUs, based on fields from the packet headers.</li>\n<li>RFS: Receive Flow Steering: This is similar to RPS, but with affinity for where the socket was last processed on-CPU, to improve CPU cache hit rates and memory locality.</li>\n<li>Accelerated Receive Flow Steering: This achieves RFS in hardware, for NICs that support this functionality. It involves updating the NIC with flow information so that it can determine which CPU to interrupt.</li>\n<li>XPS: Transmit Packet Steering: For NICs with multiple transmit queues, this supports transmission by multiple CPUs to the queues.</li>\n</ul>\n<p>Without a CPU load-balancing strategy for network packets, a NIC may interrupt only one CPU, which can reach 100% utilization and become a bottleneck. This may show up as high softirq CPU time on a single CPU. This may especially happen for load balancers or proxy servers (e.g., nginx), as their intended workload is a high rate of inbound packets.</p>\n<p>Mapping interrupts to CPUs based on factors such as cache coherency, as is done by RFS, can noticeably improve network performance. This can also be accomplished by the irqbalance process, which assigns interrupt request (IRQ) lines to CPUs.</p>\n<p><strong>Kernel Bypass</strong></p>\n<p>Applications can bypass the kernel network stack using technologies such as the Data Plane Development Kit (DPDK) in order to achieve higher packet rates and performance. This involves an application implementing its own network protocols in user-space, and making writes to the network driver via a DPDK library and a kernel user space I&#x2F;O (UIO) or virtual function I&#x2F;O (VFIO) driver. The expense of copying packet data can be avoided by directly accessing memory on the NIC.</p>\n<p>The eXpress Data Path (XDP) technology provides another path for network packets: a programmable fast path that uses extended BPF and that integrates into the existing kernel stack rather than bypassing it.</p>\n<p>With kernel network stack bypass, instrumentation using traditional tools and metrics is not available because the counters and tracing events they use are also bypassed. This makes performance analysis more difficult.</p>\n<p>Apart from full stack bypass, there are capabilities for avoiding the expense of copying data: the MSG_ZEROCOPY send(2) flag, and zero-copy receive via mmap(2).</p>\n<p><strong>Other Optimizations</strong></p>\n<p>There are other algorithms in use throughout the Linux network stack to improve performance.</p>\n<p><img src=\"/flame/images/networks/networks/tcp-send-path.png\" alt=\"tcp-send-path.png\"></p>\n<p>Some of these components and algorithms were described earlier (socket send buffers, TSO, congestion controls, Nagle, and qdiscs); others include:</p>\n<ul>\n<li>Pacing: This controls when to send packets, spreading out transmissions (pacing) to avoid bursts that may hurt performance (this may help avoid TCP micro-bursts that can lead to queueing delay, or even cause network switches to drop packets. It may also help with the incast problem, when many end points transmit to one at the same time.</li>\n<li>TCP Small Queues (TSQ): This controls (reduces) how much is queued by the network stack to avoid problems including bufferbloat.</li>\n<li>Byte Queue Limits (BQL): These automatically size the driver queues large enough to avoid starvation, but also small enough to reduce the maximum latency of queued packets, and to avoid exhausting NIC TX descriptors. It works by pausing the addition of packets to the driver queue when necessary, and was added in Linux 3.3.</li>\n<li>Earliest Departure Time (EDT): This uses a timing wheel instead of a queue to order packets sent to the NIC. Timestamps are set on every packet based on policy and rate configuration. This was added in Linux 4.20, and has BQL- and TSQ-like capabilities.</li>\n</ul>\n<p>These algorithms often work in combination to improve performance. A TCP sent packet can be processed by any of the congestion controls, TSO, TSQ, pacing, and queueing disciplines, before it ever arrives at the NIC.</p>\n<h1 id=\"Network-Analysis-Methodologies\"><a href=\"#Network-Analysis-Methodologies\" class=\"headerlink\" title=\"Network Analysis Methodologies\"></a>Network Analysis Methodologies</h1><p>todo</p>\n<h1 id=\"Network-Observability-Tools\"><a href=\"#Network-Observability-Tools\" class=\"headerlink\" title=\"Network Observability Tools\"></a>Network Observability Tools</h1><p>todo </p>\n","categories":["网络"],"tags":["网络"]},{"title":"nginx","url":"/flame/2021/12/03/nginx/nginx/","content":"<p>Nginx</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Nginx（发音同“engine x”）是一个高性能的反向代理和Web服务器软件，还实现了访问代理、负载均衡、内容缓存、访问安全及带宽控制等功能，其基于模块化的代码架构及可与其他开发语言（如Perl、JavaScript和Lua）有效集成的可编程特性，使其具有强大的扩展能力。</p>\n<blockquote>\n<p>nginx [engine x] is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP&#x2F;UDP proxy server</p>\n</blockquote>\n<p><img src=\"/flame/images/nginx/what-is-nginx.png\" alt=\"NGINX\"></p>\n<p><strong>特性</strong></p>\n<ul>\n<li>访问路由</li>\n<li>反向代理(Reverse Proxy)   </li>\n<li>负载均衡(load balance)     </li>\n<li>内容缓存</li>\n<li>可编程</li>\n</ul>\n<p><img src=\"/flame/images/nginx/nginx-reverse-proxy.png\" alt=\"反向代理\"></p>\n<p><img src=\"/flame/images/nginx/nginx-load-balance.png\" alt=\"负载均衡\"></p>\n<p><strong>版本</strong></p>\n<table>\n<thead>\n<tr>\n<th>Nginx</th>\n<th>Type</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Nginx</td>\n<td>开源版</td>\n<td>由Nginx公司负责开发与维护</td>\n</tr>\n<tr>\n<td>Nginx Plus</td>\n<td>商业版</td>\n<td>其代码在单独的私有代码库中维护</td>\n</tr>\n<tr>\n<td>Tengine</td>\n<td>分支版本</td>\n<td>由淘宝网技术团队发起的Nginx二次开发项目</td>\n</tr>\n<tr>\n<td>OpenResty</td>\n<td>扩展版本</td>\n<td>基于Nginx开源版本的扩展版本</td>\n</tr>\n</tbody></table>\n<p>Nginx开源版一直处于活跃开发状态，由Nginx公司负责开发与维护。维护了两个版本分支，分别为主线（mainline）分支和稳定（stable）分支。稳定分支由版本号中的第二位偶数标识。</p>\n<p>Nginx Plus是Nginx推出的商业版本，在开源版本的基础上增加了使用户对Nginx的管理和监控更轻松的功能，具有独有的企业级功能，包括实时活动监视数据、通过API配置上游服务器负载平衡和主动健康检查等。</p>\n<p>Tengine是由淘宝网技术团队发起的Nginx二次开发项目，是在开源版Nginx及诸多第三方模块的基础上，针对淘宝网的高并发需求进行的二次开发。其中添加了很多针对互联网网站中使用Nginx应对高并发负载、安全及维护等的功能和特性。</p>\n<p>OpenResty是基于Nginx开源版本的扩展版本，它利用Nginx的模块特性，使Nginx支持Lua语言的脚本编程，鉴于Lua本身嵌入应用程序中增强应用程序扩展和定制功能的设计初衷，开源版本Nginx的可编程性得到大大增强。</p>\n<br/>\n\n<p><strong>基本架构</strong></p>\n<p>Nginx低资源消耗、高稳定、高性能的并发处理能力，来源于其优秀的代码架构。</p>\n<ul>\n<li><p>采用了多进程模型：使自身具有低资源消耗的特性。</p>\n</li>\n<li><p>以事件驱动的异步非阻塞多进程请求处理模型：使Nginx的工作进程通过异步非阻塞的事件处理机制，实现了高性能的并发处理能力，让每个连接的请求均可在Nginx进程中以工作流的方式得到快速处理。</p>\n</li>\n<li><p>充分利用操作系统的各种机制：发挥了软硬件的最大性能，使它在普通硬件上也可以处理数十万个并发连接。</p>\n</li>\n</ul>\n<blockquote>\n<p>多进程模型</p>\n<p>​\t信号 频道 共享内存  进程调度 事件驱动</p>\n<p>工作流程</p>\n<p>模块</p>\n</blockquote>\n<h1 id=\"编译部署\"><a href=\"#编译部署\" class=\"headerlink\" title=\"编译部署\"></a>编译部署</h1><p>OS的配置 源码编译 模块加载等</p>\n<h1 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h1><p><a href=\"https://github.com/agui93/agui93-moonlight/tree/master/nginx/experiments\"><strong>搭建实验环境</strong></a></p>\n<table>\n<thead>\n<tr>\n<th>case</th>\n<th>ENV</th>\n<th>DESC</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>case01</td>\n<td>nginx experiment env</td>\n<td>by offical docker image</td>\n</tr>\n<tr>\n<td>case02</td>\n<td>nginx experiment env</td>\n<td>by customizable docker image, install with source</td>\n</tr>\n<tr>\n<td>case03</td>\n<td>nginx experiment env</td>\n<td>by customizable docker image, install with OpenResty and configure module</td>\n</tr>\n<tr>\n<td>case04</td>\n<td>nginx experiment env</td>\n<td>by customizable docker image, mount local volumme for conf</td>\n</tr>\n</tbody></table>\n<p><strong>常用命令</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -s stop       快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。</span><br><span class=\"line\">nginx -s quit       平稳关闭Nginx，保存相关信息，有安排的结束web服务。</span><br><span class=\"line\">nginx -s reload     因改变了Nginx相关配置，需要重新加载配置而重载。</span><br><span class=\"line\">nginx -s reopen     重新打开日志文件。</span><br><span class=\"line\">nginx -c filename   为 Nginx 指定一个配置文件，来代替缺省的。</span><br><span class=\"line\">nginx -t            不运行，仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。</span><br><span class=\"line\">nginx -v            显示 nginx 的版本。</span><br><span class=\"line\">nginx -V            显示 nginx 的版本，编译器版本和配置参数。</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/taobao/nginx-book</span><br><span class=\"line\">http://tengine.taobao.org/book/index.html</span><br><span class=\"line\">https://www.w3cschool.cn/nginx/</span><br><span class=\"line\">http://www.nginx.cn/doc/</span><br><span class=\"line\">https://nginx.org/en/</span><br><span class=\"line\">http://nginx.org/en/docs/beginners_guide.html</span><br><span class=\"line\">http://tutorials.jenkov.com/nginx/index.html</span><br><span class=\"line\">https://www.nginx.com/resources/wiki/start/</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<p>Nginx的配置指令按照其在代码中的分布，核心配置指令和模块配置指令两大类</p>\n<p>核心配置指令分为事件核心配置指令和HTTP核心配置指令</p>\n<p>​\t事件核心配置指令主要是与Nginx自身软件运行管理及Nginx事件驱动架构有关的配置指令；</p>\n<p>​\tHTTP核心配置指令是对客户端从发起HTTP请求、完成HTTP请求处理、返回处理结果，到关闭HTTP连接的完整过程中的各个处理方法进行配置的配置指令；</p>\n<p>模块配置指令是在每个Nginx模块中对所在模块的操作方法进行配置的配置指令。</p>\n","categories":["nginx"],"tags":["nginx"]},{"title":"redis配置","url":"/flame/2021/11/10/redis/redis-config-list/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>redis配置</p>\n<span id=\"more\"></span>\n\n<h1 id=\"info命令\"><a href=\"#info命令\" class=\"headerlink\" title=\"info命令\"></a>info命令</h1><p>info命令格式</p>\n<ul>\n<li><p>info : 部分Redis系统状态统计信息</p>\n</li>\n<li><p>info all : 全部Redis系统状态统计信息</p>\n</li>\n<li><p>info section : 某一块的系统状态统计信息</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>info section</th>\n<th>section含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>info server</td>\n<td>服务端信息</td>\n</tr>\n<tr>\n<td>info clients</td>\n<td>客户端信息</td>\n</tr>\n<tr>\n<td>info memeory</td>\n<td>内存信息</td>\n</tr>\n<tr>\n<td>info persistence</td>\n<td>持久化信息</td>\n</tr>\n<tr>\n<td>info stats</td>\n<td>全局统计信息</td>\n</tr>\n<tr>\n<td>info replication</td>\n<td>复制信息</td>\n</tr>\n<tr>\n<td>info cpu</td>\n<td>CPU消耗信息</td>\n</tr>\n<tr>\n<td>info commandstats</td>\n<td>命令统计信息</td>\n</tr>\n<tr>\n<td>info cluster</td>\n<td>集群信息</td>\n</tr>\n<tr>\n<td>info keyspace</td>\n<td>数据库健统计信息</td>\n</tr>\n</tbody></table>\n<h2 id=\"Server模块\"><a href=\"#Server模块\" class=\"headerlink\" title=\"Server模块\"></a>Server模块</h2><p>info server 命令: 包含了Redis服务本身的一些信息，例如版本号、运行模式、操作系统的版本、TCP端口等</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>属性值-样例</th>\n<th>属性描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>redis_version</td>\n<td>3.0.7</td>\n<td>Redis服务版本</td>\n</tr>\n<tr>\n<td>redis_git_sha1</td>\n<td></td>\n<td>Git SHA1</td>\n</tr>\n<tr>\n<td>redis_git_dirty</td>\n<td></td>\n<td>Git dirty flag</td>\n</tr>\n<tr>\n<td>redis_build_id</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>os</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>arch_bits</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>multiplexing_api</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"Clients\"><a href=\"#Clients\" class=\"headerlink\" title=\"Clients\"></a>Clients</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"Persistence\"><a href=\"#Persistence\" class=\"headerlink\" title=\"Persistence\"></a>Persistence</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"Stats\"><a href=\"#Stats\" class=\"headerlink\" title=\"Stats\"></a>Stats</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"Replication\"><a href=\"#Replication\" class=\"headerlink\" title=\"Replication\"></a>Replication</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"Commandstats\"><a href=\"#Commandstats\" class=\"headerlink\" title=\"Commandstats\"></a>Commandstats</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"Cluster\"><a href=\"#Cluster\" class=\"headerlink\" title=\"Cluster\"></a>Cluster</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"Keyspace\"><a href=\"#Keyspace\" class=\"headerlink\" title=\"Keyspace\"></a>Keyspace</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"tandalone模式\"><a href=\"#tandalone模式\" class=\"headerlink\" title=\"tandalone模式\"></a>tandalone模式</h1><h2 id=\"总体\"><a href=\"#总体\" class=\"headerlink\" title=\"总体\"></a>总体</h2><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n<th>默认值</th>\n<th>可选值</th>\n<th>可否支持config set热生效</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h2><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n<th>默认值</th>\n<th>可选值</th>\n<th>可否支持config set热生效</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"AOF\"><a href=\"#AOF\" class=\"headerlink\" title=\"AOF\"></a>AOF</h2><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n<th>默认值</th>\n<th>可选值</th>\n<th>可否支持config set热生效</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"RDB\"><a href=\"#RDB\" class=\"headerlink\" title=\"RDB\"></a>RDB</h2><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n<th>默认值</th>\n<th>可选值</th>\n<th>可否支持config set热生效</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"慢查询\"><a href=\"#慢查询\" class=\"headerlink\" title=\"慢查询\"></a>慢查询</h2><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n<th>默认值</th>\n<th>可选值</th>\n<th>可否支持config set热生效</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"数据结构优化\"><a href=\"#数据结构优化\" class=\"headerlink\" title=\"数据结构优化\"></a>数据结构优化</h2><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n<th>默认值</th>\n<th>可选值</th>\n<th>可否支持config set热生效</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h2><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n<th>默认值</th>\n<th>可选值</th>\n<th>可否支持config set热生效</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n<th>默认值</th>\n<th>可选值</th>\n<th>可否支持config set热生效</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n<th>默认值</th>\n<th>可选值</th>\n<th>可否支持config set热生效</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"Sentinel\"><a href=\"#Sentinel\" class=\"headerlink\" title=\"Sentinel\"></a>Sentinel</h1><p>Sentinel节点是特殊的Redis节点，有几个相关配置。</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n<th>默认值</th>\n<th>可选值</th>\n<th>可否支持config set热生效</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"Cluster-1\"><a href=\"#Cluster-1\" class=\"headerlink\" title=\"Cluster\"></a>Cluster</h1><p>Cluster节点是特殊的Redis节点，有几个相关配置。</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n<th>默认值</th>\n<th>可选值</th>\n<th>可否支持config set热生效</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n","categories":["redis"],"tags":["redis"]},{"title":"Redis","url":"/flame/2021/11/10/redis/redis/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇博客是对Redis的总结.</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"Redis简述\"><a href=\"#Redis简述\" class=\"headerlink\" title=\"Redis简述\"></a>Redis简述</h1><blockquote>\n<p>Redis is an open source (BSD licensed), in-memory <strong>data structure store</strong>, used as a database, cache, and message broker.</p>\n<p>Redis provides data structures such as <a href=\"https://redis.io/topics/data-types-intro#strings\">strings</a>, <a href=\"https://redis.io/topics/data-types-intro#hashes\">hashes</a>, <a href=\"https://redis.io/topics/data-types-intro#lists\">lists</a>, <a href=\"https://redis.io/topics/data-types-intro#sets\">sets</a>, <a href=\"https://redis.io/topics/data-types-intro#sorted-sets\">sorted sets</a> with range queries, <a href=\"https://redis.io/topics/data-types-intro#bitmaps\">bitmaps</a>, <a href=\"https://redis.io/topics/data-types-intro#hyperloglogs\">hyperloglogs</a>, <a href=\"https://redis.io/commands/geoadd\">geospatial indexes</a>, and <a href=\"https://redis.io/topics/streams-intro\">streams</a>. Redis has built-in <a href=\"https://redis.io/topics/replication\">replication</a>, <a href=\"https://redis.io/commands/eval\">Lua scripting</a>, <a href=\"https://redis.io/topics/lru-cache\">LRU eviction</a>, <a href=\"https://redis.io/topics/transactions\">transactions</a>, and different levels of <a href=\"https://redis.io/topics/persistence\">on-disk persistence</a>, and provides high availability via <a href=\"https://redis.io/topics/sentinel\">Redis Sentinel</a> and automatic partitioning with <a href=\"https://redis.io/topics/cluster-tutorial\">Redis Cluster</a>.</p>\n<p>Redis works with an <strong>in-memory dataset</strong>. Depending on your use case, you can persist your data either by periodically <a href=\"https://redis.io/topics/persistence#snapshotting\">dumping the dataset to disk</a> or by <a href=\"https://redis.io/topics/persistence#append-only-file\">appending each command to a disk-based log</a>. You can also disable persistence if you just need a feature-rich, networked, in-memory cache.</p>\n<p>Redis also supports <a href=\"https://redis.io/topics/replication\">asynchronous replication</a>, with very fast non-blocking first synchronization, auto-reconnection with partial resynchronization on net split.</p>\n<p>Other features include:</p>\n<ul>\n<li><a href=\"https://redis.io/topics/transactions\">Transactions</a></li>\n<li><a href=\"https://redis.io/topics/pubsub\">Pub&#x2F;Sub</a></li>\n<li><a href=\"https://redis.io/commands/eval\">Lua scripting</a></li>\n<li><a href=\"https://redis.io/commands/expire\">Keys with a limited time-to-live</a></li>\n<li><a href=\"https://redis.io/topics/lru-cache\">LRU eviction of keys</a></li>\n<li><a href=\"https://redis.io/topics/sentinel\">Automatic failover</a></li>\n</ul>\n</blockquote>\n<br/>\n\n<p><strong>典型应用场景</strong></p>\n<ul>\n<li>缓存</li>\n<li>排行榜系统</li>\n<li>计数器</li>\n<li>社交网络</li>\n<li>消息队列系统</li>\n</ul>\n<br/>\n\n<p><strong>安装和启动</strong></p>\n<p>有三种方法启动Redis：默认配置、运行配置、配置文件启动。生产环境中建议使用配置文件启动Redis。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认配置启动</span></span><br><span class=\"line\">redis-server</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行配置</span></span><br><span class=\"line\">redis-server --configKey1 configValue1 --configKey2 configValue2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用配置文件启动Redis</span></span><br><span class=\"line\">redis-server  /dir/redis.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Redis架构模型\"><a href=\"#Redis架构模型\" class=\"headerlink\" title=\"Redis架构模型\"></a>Redis架构模型</h1><p>Redis使用了<strong>单线程架构</strong>和<strong>I&#x2F;O多路复用</strong>模型来实现高性能的<strong>内存数据库</strong>服务。<br>Redis单线程架构：保证server端所有命令在一个队列里排队等待被执行。<br>Redis事件处理模型：结合I&#x2F;O多路复用模型，将连接、读写、关闭都转换为事件，不在网络I&#x2F;O上浪费过多的时间。</p>\n<p><strong>单线程机制的问题</strong><br>对于每个命令的执行时间是有要求的。如果某个命令执行过长，会造成其他命令的阻塞，对于Redis这种高性能的服务来说是致命的，所以Redis是面向快速执行场景的数据库。</p>\n<p><strong>为什么Redis使用单线程模型会达到每秒万级别的处理能力呢？</strong><br>1.纯内存访问，内存的响应时长大约为100纳秒，这是Redis达到每秒万级别访问的重要基础<br>2.非阻塞I&#x2F;O<br>3.单线程避免了线程切换和竞态产生的消耗</p>\n<h1 id=\"Redis基础\"><a href=\"#Redis基础\" class=\"headerlink\" title=\"Redis基础\"></a>Redis基础</h1><p>数据结构和内部编码<br>1.多种内部编码实现可以在不同场景下发挥各自的优势<br>2.可以改进内部编码，而对外的数据结构和命令没有影响</p>\n<p><img src=\"/flame/images/redis/redis-five-data-structure.png\" alt=\"Redis数据结构和内部编码\"></p>\n<h2 id=\"字符串命令\"><a href=\"#字符串命令\" class=\"headerlink\" title=\"字符串命令\"></a>字符串命令</h2><p>Redis字符串命令的实现<br><img src=\"/flame/images/redis/redis-string-command-impl.png\" alt=\"Redis字符串命令的实现\"></p>\n<p>Redis字符串命令时间复杂度<br><img src=\"/flame/images/redis/redis-string-time-complexity.png\" alt=\"Redis字符串命令时间复杂度\"></p>\n<h2 id=\"哈希命令\"><a href=\"#哈希命令\" class=\"headerlink\" title=\"哈希命令\"></a>哈希命令</h2><p><img src=\"/flame/images/redis/redis-hash-command-impl.png\" alt=\"Redis哈希命令的实现\"></p>\n<p><img src=\"/flame/images/redis/redis-hash-command-time-complexity.png\" alt=\"Redis哈希命令时间复杂度\"></p>\n<h2 id=\"列表命令\"><a href=\"#列表命令\" class=\"headerlink\" title=\"列表命令\"></a>列表命令</h2><p><img src=\"/flame/images/redis/redis-list-command-impl.png\" alt=\"Redis列表命令的实现\"></p>\n<p><img src=\"/flame/images/redis/redis-list-command-time-complexity.png\" alt=\"Redis列表命令时间复杂度\"></p>\n<h2 id=\"集合命令\"><a href=\"#集合命令\" class=\"headerlink\" title=\"集合命令\"></a>集合命令</h2><p><img src=\"/flame/images/redis/redis-set-command-impl.png\" alt=\"Redis集合命令的实现\"></p>\n<p><img src=\"/flame/images/redis/redis-set-command-time-complexity.png\" alt=\"Redis集合命令的时间复杂度\"></p>\n<h2 id=\"有序集合命令\"><a href=\"#有序集合命令\" class=\"headerlink\" title=\"有序集合命令\"></a>有序集合命令</h2><p><img src=\"/flame/images/redis/redis-zset-command-impl.png\" alt=\"Redis有序集合命令的实现\"></p>\n<p><img src=\"/flame/images/redis/redis-zset-command-time-complexity.png\" alt=\"Redis有序集合命令的时间复杂度\"></p>\n<h2 id=\"键管理\"><a href=\"#键管理\" class=\"headerlink\" title=\"键管理\"></a>键管理</h2><p>基本命令：type、 object、del、exists<br>键随机：randomkey<br>键重命名：rename、renamenx<br>键过期：expire、ttl、expireat、pexpire、pexpireat、pttl、persis<br>迁移键：move、dump+restore、migrate <strong>(迁移的原理)</strong><br>遍历键：keys和scan</p>\n<p>切换数据库：select dbIndex<br>清除数据库：flushdb&#x2F;flushall命令用于清除数据库，两者的区别的是flushdb只清除当 前数据库，flushall会清除所有数据库，<strong>误操作的危害，误操作的避免策略</strong></p>\n<h2 id=\"Bitmaps\"><a href=\"#Bitmaps\" class=\"headerlink\" title=\"Bitmaps\"></a>Bitmaps</h2><blockquote>\n<p>Bitmaps are not an actual data type, but a set of bit-oriented operations defined on the String type.<br>Since strings are binary safe blobs and their maximum length is 512 MB, they are suitable to set up to 2^32 different bits.</p>\n</blockquote>\n<p>Bitmaps可以用来做独立用户统计，有效节省内存。<br>Bitmaps中setbit一个大的偏移量时，由于申请大量内存会导致阻塞。</p>\n<h2 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h2><p>通过HyperLogLog可以利用极小的内存空间完成独立总数 的统计，数据集可以是IP、Email、ID等.<br>HyperLogLog虽然在统计独立总量时存在一定的误差，但是节省的内存量十分惊人。</p>\n<h2 id=\"GEO\"><a href=\"#GEO\" class=\"headerlink\" title=\"GEO\"></a>GEO</h2><p>GEO支持存储地理位置信息，用来实现基于地理位置信息的应用，底层实现是zset。例如实现附近位置、摇一摇功能。</p>\n<p>GEO相关命令细节</p>\n<ul>\n<li><a href=\"http://www.redis.cn/commands/geoadd.html\">GEOADD</a></li>\n<li><a href=\"http://www.redis.cn/commands/geodist.html\">GEODIST</a></li>\n<li><a href=\"http://www.redis.cn/commands/geohash.html\">GEOHASH</a></li>\n<li><a href=\"http://www.redis.cn/commands/geopos.html\">GEOPOS</a></li>\n<li><a href=\"http://www.redis.cn/commands/georadius.html\">GEORADIUS</a></li>\n<li><a href=\"http://www.redis.cn/commands/georadiusbymember.html\">GEORADIUSBYMEMBER</a></li>\n</ul>\n<h1 id=\"Redis-Shell\"><a href=\"#Redis-Shell\" class=\"headerlink\" title=\"Redis Shell\"></a>Redis Shell</h1><table>\n<thead>\n<tr>\n<th>shell</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>redis-server</td>\n<td>启动redis</td>\n</tr>\n<tr>\n<td>redis-cli</td>\n<td>Redis命令行客户端</td>\n</tr>\n<tr>\n<td>redis-benchmark</td>\n<td>Redis基准测试工具</td>\n</tr>\n<tr>\n<td>redis-check-aof</td>\n<td>Redis AOF持久化文件检测和修复工具</td>\n</tr>\n<tr>\n<td>redis-check-dump</td>\n<td>Redis RDB持久化文件检测和修复工具</td>\n</tr>\n<tr>\n<td>redis-sentinel</td>\n<td>启动Redis Sentinel</td>\n</tr>\n</tbody></table>\n<h2 id=\"redis-server\"><a href=\"#redis-server\" class=\"headerlink\" title=\"redis-server\"></a>redis-server</h2><p>redis-server除了启动Redis外,  可以用–test-memory来检测当前操作系统能否稳定地分配指定容量的内存给Redis，通过这种检测可以有效避免因为内存问题造成Redis崩溃。<br>通常无需每次开启Redis实例时都执行–test-memory选项，该功能更偏向于调试和测试，例如，想快速占满机器内存做一些极端条件的测试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检测当前操作系统能否提供1G的内存给Redis</span></span><br><span class=\"line\">redis-server --test-memory 1024</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--<span class=\"built_in\">help</span>: 查看redis-server命令的Usage</span></span><br><span class=\"line\">redis-server --help</span><br><span class=\"line\">Usage: ./redis-server [/path/to/redis.conf] [options]</span><br><span class=\"line\">       ./redis-server - (read config from stdin)</span><br><span class=\"line\">       ./redis-server -v or --version</span><br><span class=\"line\">       ./redis-server -h or --help</span><br><span class=\"line\">       ./redis-server --test-memory &lt;megabytes&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Examples:</span><br><span class=\"line\">       ./redis-server (run the server with default conf)</span><br><span class=\"line\">       ./redis-server /etc/redis/6379.conf</span><br><span class=\"line\">       ./redis-server --port 7777</span><br><span class=\"line\">       ./redis-server --port 7777 --replicaof 127.0.0.1 8888</span><br><span class=\"line\">       ./redis-server /etc/myredis.conf --loglevel verbose</span><br><span class=\"line\"></span><br><span class=\"line\">Sentinel mode:</span><br><span class=\"line\">       ./redis-server /etc/sentinel.conf --sentinel</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"redis-benchmark\"><a href=\"#redis-benchmark\" class=\"headerlink\" title=\"redis-benchmark\"></a>redis-benchmark</h2><p>redis-benchmark可以为Redis做基准性能测试，它提供了很多选项帮助开发和运维人员测试Redis的相关性能</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-c（clients）选项代表客户端的并发数量（默认是50）</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-n（num）选项代表客户端请求总量（默认是100000）</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">redis-benchmark -c 10 -n 200: 代表10各个客户端同时请求Redis，一共执行2000次</span></span><br><span class=\"line\">redis-benchmark -c 10 -n 2000</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-q选项仅仅显示redis-benchmark的requests per second信息</span></span><br><span class=\"line\">redis-benchmark -c 10 -n 2000 -q</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-r（random）选项，可以向Redis插入更多随机的键。-r选项会在key、counter键上加一个12位的后缀，-r10000代表只对后四位做随机处理（-r不是随机数的个数）</span></span><br><span class=\"line\">redis-benchmark -c 10 -n 2000 -r 10000</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-P选项代表每个请求pipeline的数据量（默认为1）</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-k &lt;boolean&gt;选项: 代表客户端是否使用keepalive，1为使用，0为不使用，默认值为1</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-t选项可以对指定命令进行基准测试</span></span><br><span class=\"line\">redis-benchmark -t get,set -q</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--csv选项会将结果按照csv格式输出，便于后续处理</span></span><br><span class=\"line\">redis-benchmark -t get,set --csv</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--<span class=\"built_in\">help</span>选项: 查看redis-benchmark命令使用详情</span></span><br><span class=\"line\">redis-benchmark --help</span><br><span class=\"line\"></span><br><span class=\"line\">Usage: redis-benchmark [-h &lt;host&gt;] [-p &lt;port&gt;] [-c &lt;clients&gt;] [-n &lt;requests&gt;] [-k &lt;boolean&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\"> -h &lt;hostname&gt;      Server hostname (default 127.0.0.1)</span><br><span class=\"line\"> -p &lt;port&gt;          Server port (default 6379)</span><br><span class=\"line\"> -s &lt;socket&gt;        Server socket (overrides host and port)</span><br><span class=\"line\"> -a &lt;password&gt;      Password for Redis Auth</span><br><span class=\"line\"> -c &lt;clients&gt;       Number of parallel connections (default 50)</span><br><span class=\"line\"> -n &lt;requests&gt;      Total number of requests (default 100000)</span><br><span class=\"line\"> -d &lt;size&gt;          Data size of SET/GET value in bytes (default 3)</span><br><span class=\"line\"> --dbnum &lt;db&gt;       SELECT the specified db number (default 0)</span><br><span class=\"line\"> -k &lt;boolean&gt;       1=keep alive 0=reconnect (default 1)</span><br><span class=\"line\"> -r &lt;keyspacelen&gt;   Use random keys for SET/GET/INCR, random values for SADD</span><br><span class=\"line\">  Using this option the benchmark will expand the string __rand_int__</span><br><span class=\"line\">  inside an argument with a 12 digits number in the specified range</span><br><span class=\"line\">  from 0 to keyspacelen-1. The substitution changes every time a command</span><br><span class=\"line\">  is executed. Default tests use this to hit random keys in the</span><br><span class=\"line\">  specified range.</span><br><span class=\"line\"> -P &lt;numreq&gt;        Pipeline &lt;numreq&gt; requests. Default 1 (no pipeline).</span><br><span class=\"line\"> -e                 If server replies with errors, show them on stdout.</span><br><span class=\"line\">                    (no more than 1 error per second is displayed)</span><br><span class=\"line\"> -q                 Quiet. Just show query/sec values</span><br><span class=\"line\"> --csv              Output in CSV format</span><br><span class=\"line\"> -l                 Loop. Run the tests forever</span><br><span class=\"line\"> -t &lt;tests&gt;         Only run the comma separated list of tests. The test</span><br><span class=\"line\">                    names are the same as the ones produced as output.</span><br><span class=\"line\"> -I                 Idle mode. Just open N idle connections and wait.</span><br><span class=\"line\"></span><br><span class=\"line\">Examples:</span><br><span class=\"line\"> Run the benchmark with the default configuration against 127.0.0.1:6379:</span><br><span class=\"line\"><span class=\"meta prompt_\">   $ </span><span class=\"language-bash\">redis-benchmark</span></span><br><span class=\"line\"> Use 20 parallel clients, for a total of 100k requests, against 192.168.1.1:</span><br><span class=\"line\"><span class=\"meta prompt_\">   $ </span><span class=\"language-bash\">redis-benchmark -h 192.168.1.1 -p 6379 -n 100000 -c 20</span></span><br><span class=\"line\"> Fill 127.0.0.1:6379 with about 1 million keys only using the SET test:</span><br><span class=\"line\"><span class=\"meta prompt_\">   $ </span><span class=\"language-bash\">redis-benchmark -t <span class=\"built_in\">set</span> -n 1000000 -r 100000000</span></span><br><span class=\"line\"> Benchmark 127.0.0.1:6379 for a few commands producing CSV output:</span><br><span class=\"line\"><span class=\"meta prompt_\">   $ </span><span class=\"language-bash\">redis-benchmark -t ping,<span class=\"built_in\">set</span>,get -n 100000 --csv</span></span><br><span class=\"line\"> Benchmark a specific command line:</span><br><span class=\"line\"><span class=\"meta prompt_\">   $ </span><span class=\"language-bash\">redis-benchmark -r 10000 -n 10000 <span class=\"built_in\">eval</span> <span class=\"string\">&#x27;return redis.call(&quot;ping&quot;)&#x27;</span> 0</span></span><br><span class=\"line\"> Fill a list with 10000 random elements:</span><br><span class=\"line\"><span class=\"meta prompt_\">   $ </span><span class=\"language-bash\">redis-benchmark -r 10000 -n 10000 lpush mylist __rand_int__</span></span><br><span class=\"line\"> On user specified command lines __rand_int__ is replaced with a random integer</span><br><span class=\"line\"> with a range of values selected by the -r option.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"redis-cli\"><a href=\"#redis-cli\" class=\"headerlink\" title=\"redis-cli\"></a>redis-cli</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-r选项: 代表将命令执行多次</span></span><br><span class=\"line\">redis-cli -r 3 ping</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-i选项: 代表每隔几秒执行一次命令</span></span><br><span class=\"line\">redis-cli -r 5 -i 1 ping</span><br><span class=\"line\">redis-cli -r 5 -i 0.01 ping</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli -r 100 -i 1 info | grep used_memory_human</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-x选项: 代表从标准输入读取数据作为redis-cli的最后一个参数</span></span><br><span class=\"line\">echo &quot;world&quot; | redis-cli -x set hello</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-c（cluster）选项是连接Redis Cluster节点时需要使用的，-c选项可以防止moved和ask异常</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">有了这个选项就不需要手动输入auth命令</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--slave选项是把当前客户端模拟成当前Redis节点的从节点，可以用来获取当前Redis节点的更新操作，合理的利用这个选项可以记录当前连接Redis节点的一些更新操作。背后原理: Redis复制</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--rdb选项会请求Redis实例生成并发送RDB持久化文件，保存在本地。可使用它做持久化文件的定期备份。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--pipe选项用于将命令封装成Redis通信协议定义的数据格式，批量发送给Redis执行</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--bigkeys选项使用scan命令对Redis的键进行采样，从中找到内存占用比较大的键值，这些键可能是系统的瓶颈。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--<span class=\"built_in\">eval</span>选项用于执行指定Lua脚本</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--latency:  latency有三个选项，分别是--latency、--latency-history、--latency-dist。它们都可以检测网络延迟，对于Redis的开发和运维非常有帮助</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--<span class=\"built_in\">stat</span>选项可以实时获取Redis的重要统计信息，虽然info命令中的统计信息更全，但是能实时看到一些增量的数据（例如requests）对于Redis的运维还是有一定帮助的</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--raw和--no-raw: --no-raw选项要求命令的返回结果必须是原始的格式，--raw选项要求返回格式化后的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--<span class=\"built_in\">help</span>选项: 查看redis-cli命令的使用详情</span></span><br><span class=\"line\">redis-cli --help </span><br><span class=\"line\"></span><br><span class=\"line\">Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]]</span><br><span class=\"line\">  -h &lt;hostname&gt;      Server hostname (default: 127.0.0.1).</span><br><span class=\"line\">  -p &lt;port&gt;          Server port (default: 6379).</span><br><span class=\"line\">  -s &lt;socket&gt;        Server socket (overrides hostname and port).</span><br><span class=\"line\">  -a &lt;password&gt;      Password to use when connecting to the server.</span><br><span class=\"line\">                     You can also use the REDISCLI_AUTH environment</span><br><span class=\"line\">                     variable to pass this password more safely</span><br><span class=\"line\">                     (if both are used, this argument takes predecence).</span><br><span class=\"line\">  -u &lt;uri&gt;           Server URI.</span><br><span class=\"line\">  -r &lt;repeat&gt;        Execute specified command N times.</span><br><span class=\"line\">  -i &lt;interval&gt;      When -r is used, waits &lt;interval&gt; seconds per command.</span><br><span class=\"line\">                     It is possible to specify sub-second times like -i 0.1.</span><br><span class=\"line\">  -n &lt;db&gt;            Database number.</span><br><span class=\"line\">  -x                 Read last argument from STDIN.</span><br><span class=\"line\">  -d &lt;delimiter&gt;     Multi-bulk delimiter in for raw formatting (default: \\n).</span><br><span class=\"line\">  -c                 Enable cluster mode (follow -ASK and -MOVED redirections).</span><br><span class=\"line\">  --raw              Use raw formatting for replies (default when STDOUT is</span><br><span class=\"line\">                     not a tty).</span><br><span class=\"line\">  --no-raw           Force formatted output even when STDOUT is not a tty.</span><br><span class=\"line\">  --csv              Output in CSV format.</span><br><span class=\"line\">  --stat             Print rolling stats about server: mem, clients, ...</span><br><span class=\"line\">  --latency          Enter a special mode continuously sampling latency.</span><br><span class=\"line\">                     If you use this mode in an interactive session it runs</span><br><span class=\"line\">                     forever displaying real-time stats. Otherwise if --raw or</span><br><span class=\"line\">                     --csv is specified, or if you redirect the output to a non</span><br><span class=\"line\">                     TTY, it samples the latency for 1 second (you can use</span><br><span class=\"line\">                     -i to change the interval), then produces a single output</span><br><span class=\"line\">                     and exits.</span><br><span class=\"line\">  --latency-history  Like --latency but tracking latency changes over time.</span><br><span class=\"line\">                     Default time interval is 15 sec. Change it using -i.</span><br><span class=\"line\">  --latency-dist     Shows latency as a spectrum, requires xterm 256 colors.</span><br><span class=\"line\">                     Default time interval is 1 sec. Change it using -i.</span><br><span class=\"line\">  --lru-test &lt;keys&gt;  Simulate a cache workload with an 80-20 distribution.</span><br><span class=\"line\">  --replica          Simulate a replica showing commands received from the master.</span><br><span class=\"line\">  --rdb &lt;filename&gt;   Transfer an RDB dump from remote server to local file.</span><br><span class=\"line\">  --pipe             Transfer raw Redis protocol from stdin to server.</span><br><span class=\"line\">  --pipe-timeout &lt;n&gt; In --pipe mode, abort with error if after sending all data.</span><br><span class=\"line\">                     no reply is received within &lt;n&gt; seconds.</span><br><span class=\"line\">                     Default timeout: 30. Use 0 to wait forever.</span><br><span class=\"line\">  --bigkeys          Sample Redis keys looking for keys with many elements (complexity).</span><br><span class=\"line\">  --memkeys          Sample Redis keys looking for keys consuming a lot of memory.</span><br><span class=\"line\">  --memkeys-samples &lt;n&gt; Sample Redis keys looking for keys consuming a lot of memory.</span><br><span class=\"line\">                     And define number of key elements to sample</span><br><span class=\"line\">  --hotkeys          Sample Redis keys looking for hot keys.</span><br><span class=\"line\">                     only works when maxmemory-policy is *lfu.</span><br><span class=\"line\">  --scan             List all keys using the SCAN command.</span><br><span class=\"line\">  --pattern &lt;pat&gt;    Useful with --scan to specify a SCAN pattern.</span><br><span class=\"line\">  --intrinsic-latency &lt;sec&gt; Run a test to measure intrinsic system latency.</span><br><span class=\"line\">                     The test will run for the specified amount of seconds.</span><br><span class=\"line\">  --eval &lt;file&gt;      Send an EVAL command using the Lua script at &lt;file&gt;.</span><br><span class=\"line\">  --ldb              Used with --eval enable the Redis Lua debugger.</span><br><span class=\"line\">  --ldb-sync-mode    Like --ldb but uses the synchronous Lua debugger, in</span><br><span class=\"line\">                     this mode the server is blocked and script changes are</span><br><span class=\"line\">                     not rolled back from the server memory.</span><br><span class=\"line\">  --cluster &lt;command&gt; [args...] [opts...]</span><br><span class=\"line\">                     Cluster Manager command and arguments (see below).</span><br><span class=\"line\">  --verbose          Verbose mode.</span><br><span class=\"line\">  --no-auth-warning  Don&#x27;t show warning message when using password on command</span><br><span class=\"line\">                     line interface.</span><br><span class=\"line\">  --help             Output this help and exit.</span><br><span class=\"line\">  --version          Output version and exit.</span><br><span class=\"line\"></span><br><span class=\"line\">Cluster Manager Commands:</span><br><span class=\"line\">  Use --cluster help to list all available cluster manager commands.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h1><p>Pipeline可以有效减少RTT次数，但每次Pipeline的命令数量不能无节制。</p>\n<h1 id=\"事务和Lua\"><a href=\"#事务和Lua\" class=\"headerlink\" title=\"事务和Lua\"></a>事务和Lua</h1><p>Redis可以使用Lua脚本创造出原子、高效、自定义命令组合。<br>Redis执行Lua脚本有两种方法：eval和evalsha。</p>\n<h1 id=\"发布订阅\"><a href=\"#发布订阅\" class=\"headerlink\" title=\"发布订阅\"></a>发布订阅</h1><p>Redis发布订阅机制相比许多专业的消息队列系统功能较弱，不具备堆积和回溯消息的能力，但胜在足够简单.</p>\n<h1 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h1><p>Redis服务端和客户端的通信协议<br>Redis序列化协议(Redis Serialization Protocol) 保证了客户端与服务端的正常通信，是各种编程语言开发客户端的基础。</p>\n<p>主流编程语言的 Redis客户端使用方法</p>\n<ul>\n<li><a href=\"http://redis.io/clients\">Redis客户端语言支持</a></li>\n<li><a href=\"https://github.com/lettuce-io/lettuce-core\">JAVA语言Redis客户端Lettuce</a></li>\n<li><a href=\"https://github.com/gomodule/redigo\">GO语言Redis客户端gomodule&#x2F;redigo</a></li>\n<li><a href=\"https://github.com/go-redis/redis\">GO语言Redis客户端go-redis&#x2F;redis</a></li>\n<li><a href=\"https://levelup.gitconnected.com/fastest-redis-client-library-for-go-7993f618f5ab\">对比多种GO语言Redis客户端</a></li>\n</ul>\n<h2 id=\"客户端管理\"><a href=\"#客户端管理\" class=\"headerlink\" title=\"客户端管理\"></a>客户端管理</h2><p>Redis提供了客户端相关API对其状态进行监控和管理。</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>client list</td>\n<td>列出与Redis服务端相连的所有客户端连接信息</td>\n<td></td>\n</tr>\n<tr>\n<td>client setName</td>\n<td>设置客户端的name<br />标识客户端来源</td>\n<td></td>\n</tr>\n<tr>\n<td>client getName</td>\n<td>获取客户端的name</td>\n<td></td>\n</tr>\n<tr>\n<td>client kill ip:port</td>\n<td>杀掉指定IP地址和端口的客户端</td>\n<td></td>\n</tr>\n<tr>\n<td>client pause timeout</td>\n<td>阻塞客户端timeout毫秒数<br/>在生产环境中，暂停客户端成本非常高。</td>\n<td></td>\n</tr>\n<tr>\n<td>monitor</td>\n<td>监听Redis正在执行的命令</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>client list命令的输出格式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">client list命令的输出格式</span></span><br><span class=\"line\">127.0.0.1:6379&gt; client list</span><br><span class=\"line\">id=1124 addr=127.0.0.1:53714 fd=8 name=client-test-name1 age=85 idle=8 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=client</span><br><span class=\"line\">id=1125 addr=127.0.0.1:53716 fd=9 name=cliet-test-name2 age=32 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=26 qbuf-free=32742 obl=0 oll=0 omem=0 events=r cmd=client</span><br></pre></td></tr></table></figure>\n\n\n\n<p>client list命令的属性</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>客户端连接id</td>\n<td></td>\n</tr>\n<tr>\n<td>addr</td>\n<td>客户端连接的IP和端口</td>\n<td></td>\n</tr>\n<tr>\n<td>fd</td>\n<td>socket的文件描述符</td>\n<td>-1代表当前客户端是Redis内部的伪装客户端</td>\n</tr>\n<tr>\n<td>name</td>\n<td>客户端连接名</td>\n<td></td>\n</tr>\n<tr>\n<td>qbuf</td>\n<td>输入缓冲区的总容量</td>\n<td></td>\n</tr>\n<tr>\n<td>qbuf-free</td>\n<td>输入缓冲区的剩余容量</td>\n<td></td>\n</tr>\n<tr>\n<td>obl</td>\n<td>输出缓冲区中的固定缓冲区长度</td>\n<td></td>\n</tr>\n<tr>\n<td>oll</td>\n<td>输出缓冲区中的动态缓冲区列表长度</td>\n<td></td>\n</tr>\n<tr>\n<td>omem</td>\n<td>输出缓冲区中的使用的字节数</td>\n<td></td>\n</tr>\n<tr>\n<td>age</td>\n<td>客户端连接存活时间</td>\n<td></td>\n</tr>\n<tr>\n<td>idle</td>\n<td>客户端连接空闲时间</td>\n<td>当age等于idle时，说明连接一直处于空闲状态</td>\n</tr>\n<tr>\n<td>flags</td>\n<td>客户端类型标识</td>\n<td></td>\n</tr>\n<tr>\n<td>db</td>\n<td>当前客户端正在使用的数据库索引下标</td>\n<td></td>\n</tr>\n<tr>\n<td>sub&#x2F;psub</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>客户端标识</strong><br>客户端id是随着Redis的连接自增的，重启Redis后会重置为0<br>通常来讲，在Redis只有一个应用方使用的情况下，IP和端口作为标识会更加清晰。<br>当多个应用方共同使用一个Redis，那么此时client setName可以作为标识客户端的一个依据。</p>\n<p><strong>客户端的输入缓冲区</strong><br>Redis Server端为每个客户端分配了输入缓冲区，用于缓冲客户端发送的命令，缓冲区的命令被拉取后执行。<br>输入缓冲区问题出现概率比较低，但是也要做好防范，在开发中要减少bigkey、减少Redis阻塞、合理的监控报警。</p>\n<ul>\n<li>输入缓冲区使用不当的危害<ol>\n<li>一旦某个客户端的输入缓冲区超过1G(没有相应配置来规定)，客户端将会被关闭。</li>\n<li>输入缓冲区不受maxmemory控制，超过maxmemory限制后(包含数据存储)，可能会产生数据丢失、键值淘汰、OOM等情况</li>\n</ol>\n</li>\n<li>造成输入缓冲区过大的原因<ol>\n<li>Redis的处理速度跟不上输入缓冲区的输入速度，并且每次进入输入缓冲区的命令包含了大量 bigkey</li>\n<li>Redis发生了阻塞，短期内不能处理命令，造成客户端输入的命令积压在了输入缓冲区</li>\n</ol>\n</li>\n<li>如何快速发现和监控<ol>\n<li>通过定期执行client list命令，收集qbuf和qbuf-free找到异常的连接记录并分析，最终找到可能出问题的客户端。</li>\n<li>通过info命令的info clients模块，找到最大的输入缓冲区</li>\n<li>client list监控和info clients监控输入缓冲区的优劣势</li>\n</ol>\n</li>\n</ul>\n<p><strong>客户端的输出缓冲区</strong><br>Redis为每个客户端分配了输出缓冲区，保存命令执行结果，为Redis和客户端交互返回结果提供缓冲。<br>输出缓冲区的容量可以通过参数client-outputbuffer-limit来进行设置。<br>并且输出缓冲区做得更加细致，按照客户端的不同 分为三种：普通客户端、发布订阅客户端、slave客户端</p>\n<p><strong>monitor命令</strong><br>每个客户端都有自己的输出缓冲区，monitor能监听到所有的命令。<br>一旦Redis的并发量过大，monitor客户端的输出缓冲会暴涨，可能瞬间会占用大量内存</p>\n<p><strong>客户端的存活状态</strong><br>maxclients(s默认值是10000)参数来限制最大客户端连接数，一旦连接数超过 maxclients，新的连接将被拒绝。<br>timeout（单位为秒）参数来限制连接的最大空闲时间，一 旦客户端连接的idle时间超过了timeout，连接将会被关闭。</p>\n<p><strong>客户端的类型</strong></p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://redis.io/topics/introduction\">Redis Introduction</a><br><a href=\"http://www.redis.cn/\">Redis常用命令解释</a><br><a href=\"https://cachecloud.github.io/\">Cachecloud</a><br><a href=\"https://github.com/sohutv/cachecloud\">sohutv&#x2F;cachecloud</a><br><a href=\"https://github.com/tuister/cachecloud-docker\">Cachecloud docker</a><br><a href=\"https://github.com/htw0056/redis-3.0-annotated-cmake-in-clion\">使用CLion阅读Redis源码</a></p>\n<h1 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h1><p>REDIS</p>\n<p>客户端语言和框架的选择</p>\n<p>​\t\tAPI特性</p>\n<p>​\t\tAPI框架：提供的API   链接的管理 配置的管理  </p>\n<p>部署和运维： 机器准备&amp;&amp;基准测试 benchmark 压测  ；开启的特性；日常运维；报警条件；</p>\n<p>整体关注：api 日志 性能 监控 </p>\n<p>RDB 持久化:</p>\n<p>​\tRDB持久化是把当前进程数据生成快照保存到硬盘的过程，触发RDB持 久化过程分为手动触发和自动触发。</p>\n<p>​\t手动触发分别对应save和bgsave命令：</p>\n<p>​\tsave命令：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存 比较大的实例会造成长时间阻塞，线上环境不建议使用。</p>\n<p>​\tbgsave命令：Redis进程执行fork操作创建子进程，RDB持久化过程由子 进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短。</p>\n<p>自动触发RDB的持久化机制</p>\n<p>​\t\t使用save相关配置，如“save m n”。表示m秒内数据集存在n次修改 时，自动触发bgsave。</p>\n<p>​\t\t如果从节点执行全量复制操作，主节点自动执行bgsave生成RDB文件并发送给从节点</p>\n<p>​\t\t执行debug reload命令重新加载Redis时，也会自动触发save操作。</p>\n<p>​\t\t默认情况下执行shutdown命令时，如果没有开启AOF持久化功能则自动执行bgsave。</p>\n<p>RDB文件</p>\n<p>​\t存储位置 ， 运行期动态调整位置</p>\n<p>​\t压缩：</p>\n<p>​\t校验：如果Redis加载损坏的RDB文件时拒绝启动</p>\n<p>RDB的优点：</p>\n<p>​\t非常适用于备份，全量复制等场景</p>\n<p>RDB的缺点：</p>\n<p>​\t没办法做到实时持久化&#x2F;秒级持久化  因为bgsave每次运 行都要执行fork操作创建子进程，属于重量级操作，频繁执行成本过高</p>\n<p>​\t特定二进制格式保存   存在老版本Redis服务无法兼容新版RDB格式的问题</p>\n<p>​\t</p>\n<p>AOF（append only file）持久化：以独立日志的方式记录每次写命令， 重启时再重新执行AOF文件中的命令达到恢复数据的目的。</p>\n<p>AOF的主要作用 是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式。理解 掌握好AOF持久化机制对我们兼顾数据安全性和性能非常有帮助。</p>\n<p>开启AOF功能需要设置配置：appendonly yes，默认不开启。AOF文件名 通过appendfilename配置设置，默认文件名是appendonly.aof。保存路径同 RDB持久化方式一致，通过dir配置指定。AOF的工作流程操作：命令写入 （append）、文件同步（sync）、文件重写（rewrite）、重启加载 （load）</p>\n<p>1）所有的写入命令会追加到aof_buf（缓冲区）中。 2）AOF缓冲区根据对应的策略向硬盘做同步操作。 3）随着AOF文件越来越大，需要定期对AOF文件进行重写，达到压缩 的目的。 4）当Redis服务器重启时，可以加载AOF文件进行数据恢复。</p>\n<p>AOF重写降低了文件占用空间，除此之外，另一个目的是：更小的AOF 文件可以更快地被Redis加载。</p>\n<p>AOF重写过程可以手动触发和自动触发：</p>\n<p>​\t手动触发：直接调用bgrewriteaof命令。</p>\n<p>​\t自动触发：根据auto-aof-rewrite-min-size和auto-aof-rewrite-percentage参 数确定自动触发时机。</p>\n<p>​\t·auto-aof-rewrite-min-size：表示运行AOF重写时文件最小体积，默认 为64MB。</p>\n<p>​\t·auto-aof-rewrite-percentage：代表当前AOF文件空间 （aof_current_size）和上一次重写后AOF文件空间（aof_base_size）的比 值。</p>\n<p>自动触发时机&#x3D;aof_current_size&gt;auto-aof-rewrite-minsize&amp;&amp;（aof_current_size-aof_base_size）&#x2F;aof_base_size&gt;&#x3D;auto-aof-rewritepercentage 其中aof_current_size和aof_base_size可以在info Persistence统计信息中查 看。</p>\n<p>Redis关闭再启动后，运行ID会随之改变</p>\n<p>如何在不改变运行ID的情况下重启呢？可以使用debug reload命 令重新加载RDB并保持运行ID不变，从而有效避免不必要的全量复制。</p>\n<p>debug reload命令会阻塞当前Redis节点主线程，阻塞期间会生成本地 RDB快照并清空数据之后再加载RDB文件。因此对于大数据量的主节点和无 法容忍阻塞的应用场景，谨慎使用。</p>\n","categories":["redis"],"tags":["redis"]},{"title":"vim配置","url":"/flame/2019/04/25/tools/vim_config/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>.vimrc配置文件</p>\n<span id=\"more\"></span>\n\n\n\n\n\n<h2 id=\"vimrc\"><a href=\"#vimrc\" class=\"headerlink\" title=\"vimrc\"></a>vimrc</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let mapleader=&quot;;&quot;</span><br><span class=\"line\">inoremap &lt;Leader&gt;jk &lt;esc&gt;</span><br><span class=\"line\">set encoding=utf-8</span><br><span class=\"line\">filetype plugin on</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">nmap LB 0</span><br><span class=\"line\">nmap LE $</span><br><span class=\"line\"></span><br><span class=\"line\">vnoremap &lt;Leader&gt;y &quot;+y</span><br><span class=\"line\"></span><br><span class=\"line\">nmap &lt;Leader&gt;p &quot;+p</span><br><span class=\"line\"></span><br><span class=\"line\">nmap &lt;Leader&gt;q :q&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">nmap &lt;Leader&gt;w :w&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">nmap &lt;Leader&gt;WQ :wa&lt;CR&gt;:q&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">nmap &lt;Leader&gt;Q :qa!&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">nnoremap nw &lt;C-W&gt;&lt;C-W&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">nnoremap &lt;Leader&gt;lw &lt;C-W&gt;l</span><br><span class=\"line\"></span><br><span class=\"line\">nnoremap &lt;Leader&gt;hw &lt;C-W&gt;h</span><br><span class=\"line\"></span><br><span class=\"line\">nnoremap &lt;Leader&gt;kw &lt;C-W&gt;k</span><br><span class=\"line\"></span><br><span class=\"line\">nnoremap &lt;Leader&gt;jw &lt;C-W&gt;j</span><br><span class=\"line\"></span><br><span class=\"line\">nmap &lt;Leader&gt;M %</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">autocmd BufWritePost $MYVIMRC source $MYVIMRC</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set incsearch</span><br><span class=\"line\"></span><br><span class=\"line\">set ignorecase</span><br><span class=\"line\"></span><br><span class=\"line\">set nocompatible</span><br><span class=\"line\"></span><br><span class=\"line\">set wildmenu</span><br><span class=\"line\"></span><br><span class=\"line\">filetype off</span><br><span class=\"line\">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class=\"line\">call vundle#begin() </span><br><span class=\"line\">Plugin &#x27;VundleVim/Vundle.vim&#x27;</span><br><span class=\"line\">Plugin &#x27;Valloric/YouCompleteMe&#x27;</span><br><span class=\"line\">Plugin &#x27;altercation/vim-colors-solarized&#x27;</span><br><span class=\"line\">Plugin &#x27;octol/vim-cpp-enhanced-highlight&#x27;</span><br><span class=\"line\">Plugin &#x27;nathanaelkane/vim-indent-guides&#x27;</span><br><span class=\"line\">Plugin &#x27;derekwyatt/vim-fswitch&#x27;</span><br><span class=\"line\">Plugin &#x27;scrooloose/nerdtree&#x27;</span><br><span class=\"line\">Plugin &#x27;fholgado/minibufexpl.vim&#x27;</span><br><span class=\"line\">Plugin &#x27;majutsushi/tagbar&#x27;</span><br><span class=\"line\">Plugin &#x27;vim-scripts/indexer.tar.gz&#x27;</span><br><span class=\"line\">Plugin &#x27;vim-scripts/DfrankUtil&#x27;</span><br><span class=\"line\">Plugin &#x27;vim-scripts/vimprj&#x27;</span><br><span class=\"line\">call vundle#end() </span><br><span class=\"line\">filetype plugin indent on</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set background=dark</span><br><span class=\"line\">colorscheme default</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set gcr=a:block-blinkon0</span><br><span class=\"line\"></span><br><span class=\"line\">set guioptions-=l</span><br><span class=\"line\">set guioptions-=L</span><br><span class=\"line\">set guioptions-=r</span><br><span class=\"line\">set guioptions-=R</span><br><span class=\"line\"></span><br><span class=\"line\">set guioptions-=m</span><br><span class=\"line\">set guioptions-=T</span><br><span class=\"line\"></span><br><span class=\"line\">fun! ToggleFullscreen()</span><br><span class=\"line\">    call system(&quot;wmctrl -ir &quot; . v:windowid . &quot; -btoggle,fullscreen&quot;)</span><br><span class=\"line\">endf</span><br><span class=\"line\"></span><br><span class=\"line\">map &lt;silent&gt; &lt;F10&gt; :call ToggleFullscreen()&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">autocmd VimEnter * call ToggleFullscreen()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set nowrap</span><br><span class=\"line\"></span><br><span class=\"line\">syntax enable</span><br><span class=\"line\"></span><br><span class=\"line\">syntax on</span><br><span class=\"line\">syntax keyword cppSTLtype initializer_list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set laststatus=2</span><br><span class=\"line\">set ruler</span><br><span class=\"line\">set number</span><br><span class=\"line\">set cursorline</span><br><span class=\"line\">set cursorcolumn</span><br><span class=\"line\">set hlsearch</span><br><span class=\"line\">hi CursorColumn  ctermbg=black</span><br><span class=\"line\"></span><br><span class=\"line\">filetype indent on</span><br><span class=\"line\"></span><br><span class=\"line\">set expandtab</span><br><span class=\"line\"></span><br><span class=\"line\">set tabstop=4</span><br><span class=\"line\"></span><br><span class=\"line\">set shiftwidth=4</span><br><span class=\"line\"></span><br><span class=\"line\">set softtabstop=4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;vim-indent-guides</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;let g:indent_guides_enable_on_vim_startup=1</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;let g:indent_guides_start_level=1</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;let g:indent_guides_guide_size=1</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;nmap &lt;silent&gt; &lt;Leader&gt;i &lt;Plug&gt;IndentGuidesToggle</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;set foldmethod=indent</span><br><span class=\"line\">&quot;&quot;set foldmethod=syntax</span><br><span class=\"line\"></span><br><span class=\"line\">set nofoldenable</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">nmap &lt;silent&gt; &lt;Leader&gt;sw :FSHere&lt;cr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">map &lt;Leader&gt;bl :MBEToggle&lt;cr&gt;</span><br><span class=\"line\">map &lt;Leader&gt;el :MBEbn&lt;cr&gt;</span><br><span class=\"line\">map &lt;Leader&gt;eh :MBEbp&lt;cr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">nmap &lt;Leader&gt;fl :NERDTreeToggle&lt;CR&gt;</span><br><span class=\"line\">let g:NERDTreeDirArrowExpandable=&#x27;▷&#x27;</span><br><span class=\"line\">let g:NERDTreeDirArrowCollapsible=&#x27;▼&#x27;</span><br><span class=\"line\">let g:NERDTreeWinPos=&#x27;left&#x27;</span><br><span class=\"line\">let g:NERDTreeWinSize=23</span><br><span class=\"line\">let g:NERDTreeShowLineNumbers=1</span><br><span class=\"line\">let g:NERDTreeHidden=0</span><br><span class=\"line\">autocmd vimenter * if !argc()|NERDTree|endif</span><br><span class=\"line\">autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; exists(&quot;b:NERDTree&quot;) &amp;&amp; b:NERDTree.isTabTree()) | q | endif</span><br><span class=\"line\">autocmd vimenter * NERDTree</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let tagbar_left=0 </span><br><span class=\"line\">nnoremap &lt;Leader&gt;ilt :TagbarToggle&lt;CR&gt; </span><br><span class=\"line\">let tagbar_width=32 </span><br><span class=\"line\">let g:tagbar_compact=1</span><br><span class=\"line\">let g:tagbar_type_cpp = &#123;</span><br><span class=\"line\">    \\ &#x27;kinds&#x27; : [</span><br><span class=\"line\">         \\ &#x27;c:classes:0:1&#x27;,</span><br><span class=\"line\">         \\ &#x27;d:macros:0:1&#x27;,</span><br><span class=\"line\">         \\ &#x27;e:enumerators:0:0&#x27;, </span><br><span class=\"line\">         \\ &#x27;f:functions:0:1&#x27;,</span><br><span class=\"line\">         \\ &#x27;g:enumeration:0:1&#x27;,</span><br><span class=\"line\">         \\ &#x27;l:local:0:1&#x27;,</span><br><span class=\"line\">         \\ &#x27;m:members:0:1&#x27;,</span><br><span class=\"line\">         \\ &#x27;n:namespaces:0:1&#x27;,</span><br><span class=\"line\">         \\ &#x27;p:functions_prototypes:0:1&#x27;,</span><br><span class=\"line\">         \\ &#x27;s:structs:0:1&#x27;,</span><br><span class=\"line\">         \\ &#x27;t:typedefs:0:1&#x27;,</span><br><span class=\"line\">         \\ &#x27;u:unions:0:1&#x27;,</span><br><span class=\"line\">         \\ &#x27;v:global:0:1&#x27;,</span><br><span class=\"line\">         \\ &#x27;x:external:0:1&#x27;</span><br><span class=\"line\">     \\ ],</span><br><span class=\"line\">     \\ &#x27;sro&#x27;        : &#x27;::&#x27;,</span><br><span class=\"line\">     \\ &#x27;kind2scope&#x27; : &#123;</span><br><span class=\"line\">         \\ &#x27;g&#x27; : &#x27;enum&#x27;,</span><br><span class=\"line\">         \\ &#x27;n&#x27; : &#x27;namespace&#x27;,</span><br><span class=\"line\">         \\ &#x27;c&#x27; : &#x27;class&#x27;,</span><br><span class=\"line\">         \\ &#x27;s&#x27; : &#x27;struct&#x27;,</span><br><span class=\"line\">         \\ &#x27;u&#x27; : &#x27;union&#x27;</span><br><span class=\"line\">     \\ &#125;,</span><br><span class=\"line\">     \\ &#x27;scope2kind&#x27; : &#123;</span><br><span class=\"line\">         \\ &#x27;enum&#x27;      : &#x27;g&#x27;,</span><br><span class=\"line\">         \\ &#x27;namespace&#x27; : &#x27;n&#x27;,</span><br><span class=\"line\">         \\ &#x27;class&#x27;     : &#x27;c&#x27;,</span><br><span class=\"line\">         \\ &#x27;struct&#x27;    : &#x27;s&#x27;,</span><br><span class=\"line\">         \\ &#x27;union&#x27;     : &#x27;u&#x27;</span><br><span class=\"line\">     \\ &#125;</span><br><span class=\"line\">     \\ &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let g:indexer_ctagsCommandLineOptions=&quot;--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5</span><br><span class=\"line\">&quot;highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900</span><br><span class=\"line\">&quot;highlight PMenu ctermfg=0 ctermbg=242 guifg=black guibg=darkgrey</span><br><span class=\"line\">highlight PMenuSel ctermfg=242 ctermbg=8 guifg=darkgrey guibg=black</span><br><span class=\"line\">let g:ycm_complete_in_comments=1</span><br><span class=\"line\">let g:ycm_confirm_extra_conf=0</span><br><span class=\"line\">let g:ycm_collect_identifiers_from_tags_files=1</span><br><span class=\"line\">inoremap &lt;leader&gt;; &lt;C-x&gt;&lt;C-o&gt;</span><br><span class=\"line\">set completeopt-=preview</span><br><span class=\"line\">let g:ycm_min_num_of_chars_for_completion=1</span><br><span class=\"line\">let g:ycm_cache_omnifunc=0</span><br><span class=\"line\">let g:ycm_seed_identifiers_with_syntax=1</span><br><span class=\"line\">nnoremap &lt;leader&gt;jd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; 主动调用补全</span><br><span class=\"line\">let g:ycm_key_invoke_completion = &#x27;&lt;c-z&gt;&#x27;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let mapleader=&quot;;&quot;</span><br><span class=\"line\">inoremap &lt;Leader&gt;jk &lt;esc&gt;</span><br><span class=\"line\">nmap LB 0</span><br><span class=\"line\">nmap LE $</span><br><span class=\"line\">vnoremap &lt;Leader&gt;y &quot;+y</span><br><span class=\"line\">nmap &lt;Leader&gt;p &quot;+p</span><br><span class=\"line\">nmap &lt;Leader&gt;q :q&lt;CR&gt;</span><br><span class=\"line\">nmap &lt;Leader&gt;w :w&lt;CR&gt;</span><br><span class=\"line\">nmap &lt;Leader&gt;WQ :wa&lt;CR&gt;:q&lt;CR&gt;</span><br><span class=\"line\">nmap &lt;Leader&gt;Q :qa!&lt;CR&gt;</span><br><span class=\"line\">nnoremap nw &lt;C-W&gt;&lt;C-W&gt;</span><br><span class=\"line\">nnoremap &lt;Leader&gt;lw &lt;C-W&gt;l</span><br><span class=\"line\">nnoremap &lt;Leader&gt;hw &lt;C-W&gt;h</span><br><span class=\"line\">nnoremap &lt;Leader&gt;kw &lt;C-W&gt;k</span><br><span class=\"line\">nnoremap &lt;Leader&gt;jw &lt;C-W&gt;j</span><br><span class=\"line\">nmap &lt;Leader&gt;M %</span><br><span class=\"line\">map &lt;silent&gt; &lt;F10&gt; :call ToggleFullscreen()&lt;CR&gt;</span><br><span class=\"line\">&quot;nmap &lt;silent&gt; &lt;Leader&gt;i &lt;Plug&gt;IndentGuidesToggle</span><br><span class=\"line\">nmap &lt;silent&gt; &lt;Leader&gt;sw :FSHere&lt;cr&gt;</span><br><span class=\"line\">map &lt;Leader&gt;bl :MBEToggle&lt;cr&gt;</span><br><span class=\"line\">map &lt;Leader&gt;el :MBEbn&lt;cr&gt;</span><br><span class=\"line\">map &lt;Leader&gt;eh :MBEbp&lt;cr&gt;</span><br><span class=\"line\">nmap &lt;Leader&gt;fl :NERDTreeToggle&lt;CR&gt;</span><br><span class=\"line\">nnoremap &lt;Leader&gt;ilt :TagbarToggle&lt;CR&gt; </span><br><span class=\"line\">inoremap &lt;leader&gt;; &lt;C-x&gt;&lt;C-o&gt;</span><br><span class=\"line\">nnoremap &lt;leader&gt;jd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"构建docker\"><a href=\"#构建docker\" class=\"headerlink\" title=\"构建docker\"></a>构建docker</h2><p>├── Dockerfile<br>├── vim_plugins_install.sh<br>└── vimrc  </p>\n<p>Dockerfile</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">From ubuntu:16.04</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y gdb git make g++ gcc build-essential cmake python3-dev ctags vim</span><br><span class=\"line\">RUN apt-get install -y clang</span><br><span class=\"line\"></span><br><span class=\"line\">ADD ./vimrc /root/.vimrc</span><br><span class=\"line\">ADD ./vim_plugins_install.sh /root/vim_plugins_install.sh</span><br><span class=\"line\">RUN [&quot;chmod&quot;, &quot;+x&quot;, &quot;/root/vim_plugins_install.sh&quot;]</span><br><span class=\"line\">RUN /root/vim_plugins_install.sh</span><br></pre></td></tr></table></figure>\n\n<p>vim_plugins_install.sh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br><span class=\"line\"># 安装vim插件</span><br><span class=\"line\">vim -c PluginInstall -c q -c q</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装插件运行需要依赖的一些组件</span><br><span class=\"line\">#cd /root/.vim/bundle/YouCompleteMe/ &amp;&amp; python3 install.py --clang-complete &amp;&amp;  python3 install.py --clangd-completer</span><br><span class=\"line\">cd /root/.vim/bundle/YouCompleteMe/ &amp;&amp; python3 install.py --clang-complete</span><br></pre></td></tr></table></figure>\n\n<p>命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">构建镜像</span><br><span class=\"line\">docker build -t agui/demovim .</span><br><span class=\"line\">运行容器</span><br><span class=\"line\">docker run -it -d --name demovimtest --cap-add=SYS_PTRACE --security-opt seccomp=unconfined agui/demovim /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -it --name aguivim -d -v ~/agui/github/linux-network:/home/linux-network --cap-add=SYS_PTRACE --security-opt seccomp=unconfined agui/demovim /bin/bash</span><br><span class=\"line\">进入容器</span><br><span class=\"line\">docker exec -it demovimtest /bin/bash</span><br><span class=\"line\"> </span><br><span class=\"line\">vim调试项目</span><br><span class=\"line\">  git clone https://github.com/antirez/redis.git</span><br><span class=\"line\">  cd redis</span><br><span class=\"line\">  make   </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ycm-extra-conf-py\"><a href=\"#ycm-extra-conf-py\" class=\"headerlink\" title=\".ycm_extra_conf.py\"></a>.ycm_extra_conf.py</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import ycm_core</span><br><span class=\"line\"></span><br><span class=\"line\"># These are the compilation flags that will be used in case there&#x27;s no</span><br><span class=\"line\"># compilation database set (by default, one is not set).</span><br><span class=\"line\"># CHANGE THIS LIST OF FLAGS. YES, THIS IS THE DROID YOU HAVE BEEN LOOKING FOR.</span><br><span class=\"line\">flags = [</span><br><span class=\"line\">    &#x27;-Wall&#x27;,</span><br><span class=\"line\">    &#x27;-Wextra&#x27;,</span><br><span class=\"line\">    &#x27;-Werror&#x27;,</span><br><span class=\"line\">    &#x27;-Wno-long-long&#x27;,</span><br><span class=\"line\">    &#x27;-Wno-variadic-macros&#x27;,</span><br><span class=\"line\">    &#x27;-fexceptions&#x27;,</span><br><span class=\"line\">    # THIS IS IMPORTANT! Without a &quot;-std=&lt;something&gt;&quot; flag, clang won&#x27;t know which</span><br><span class=\"line\">    # language to use when compiling headers. So it will guess. Badly. So C++</span><br><span class=\"line\">    # headers will be compiled as C headers. You don&#x27;t want that so ALWAYS specify</span><br><span class=\"line\">    # a &quot;-std=&lt;something&gt;&quot;.</span><br><span class=\"line\">    # For a C project, you would set this to something like &#x27;c99&#x27; instead of</span><br><span class=\"line\">    # &#x27;c++11&#x27;.</span><br><span class=\"line\">    &#x27;-std=c99&#x27;,</span><br><span class=\"line\">    # ...and the same thing goes for the magic -x option which specifies the</span><br><span class=\"line\">    # language that the files to be compiled are written in. This is mostly</span><br><span class=\"line\">    # relevant for c++ headers.</span><br><span class=\"line\">    # For a C project, you would set this to &#x27;c&#x27; instead of &#x27;c++&#x27;.</span><br><span class=\"line\">    &#x27;-x&#x27;, &#x27;c&#x27;,</span><br><span class=\"line\">    &#x27;-I&#x27;, &#x27;/usr/include/clang/3.8/include&#x27;,</span><br><span class=\"line\">    &#x27;-isystem&#x27;, &#x27;/usr/local/include&#x27;,</span><br><span class=\"line\">    &#x27;-isystem&#x27;, &#x27;/usr/include&#x27;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># Set this to the absolute path to the folder (NOT the file!) containing the</span><br><span class=\"line\"># compile_commands.json file to use that instead of &#x27;flags&#x27;. See here for</span><br><span class=\"line\"># more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html</span><br><span class=\"line\">#</span><br><span class=\"line\"># Most projects will NOT need to set this to anything; you can just change the</span><br><span class=\"line\"># &#x27;flags&#x27; list of compilation flags. Notice that YCM itself uses that approach.</span><br><span class=\"line\">compilation_database_folder = &#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if compilation_database_folder:</span><br><span class=\"line\">  database = ycm_core.CompilationDatabase( compilation_database_folder )</span><br><span class=\"line\">else:</span><br><span class=\"line\">  database = None</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def DirectoryOfThisScript():</span><br><span class=\"line\">  return os.path.dirname( os.path.abspath( __file__ ) )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):</span><br><span class=\"line\">  if not working_directory:</span><br><span class=\"line\">    return list( flags )</span><br><span class=\"line\">  new_flags = []</span><br><span class=\"line\">  make_next_absolute = False</span><br><span class=\"line\">  path_flags = [ &#x27;-isystem&#x27;, &#x27;-I&#x27;, &#x27;-iquote&#x27;, &#x27;--sysroot=&#x27; ]</span><br><span class=\"line\">  for flag in flags:</span><br><span class=\"line\">    new_flag = flag</span><br><span class=\"line\"></span><br><span class=\"line\">    if make_next_absolute:</span><br><span class=\"line\">      make_next_absolute = False</span><br><span class=\"line\">      if not flag.startswith( &#x27;/&#x27; ):</span><br><span class=\"line\">        new_flag = os.path.join( working_directory, flag )</span><br><span class=\"line\"></span><br><span class=\"line\">    for path_flag in path_flags:</span><br><span class=\"line\">      if flag == path_flag:</span><br><span class=\"line\">        make_next_absolute = True</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">      if flag.startswith( path_flag ):</span><br><span class=\"line\">        path = flag[ len( path_flag ): ]</span><br><span class=\"line\">        new_flag = path_flag + os.path.join( working_directory, path )</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">    if new_flag:</span><br><span class=\"line\">      new_flags.append( new_flag )</span><br><span class=\"line\">  return new_flags</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def FlagsForFile( filename ):</span><br><span class=\"line\">  if database:</span><br><span class=\"line\">    # Bear in mind that compilation_info.compiler_flags_ does NOT return a</span><br><span class=\"line\">    # python list, but a &quot;list-like&quot; StringVec object</span><br><span class=\"line\">    compilation_info = database.GetCompilationInfoForFile( filename )</span><br><span class=\"line\">    final_flags = MakeRelativePathsInFlagsAbsolute(</span><br><span class=\"line\">      compilation_info.compiler_flags_,</span><br><span class=\"line\">      compilation_info.compiler_working_dir_ )</span><br><span class=\"line\">  else:</span><br><span class=\"line\">    # relative_to = DirectoryOfThisScript()</span><br><span class=\"line\">    relative_to = os.path.dirname(os.path.abspath(filename))</span><br><span class=\"line\">    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )</span><br><span class=\"line\"></span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    &#x27;flags&#x27;: final_flags,</span><br><span class=\"line\">    &#x27;do_cache&#x27;: True</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Todo\"><a href=\"#Todo\" class=\"headerlink\" title=\"Todo\"></a>Todo</h2><p>共享文件夹 c语言自动提示和补全 代码自动跳转 多文档编辑</p>\n<h2 id=\"数据报文画图工具\"><a href=\"#数据报文画图工具\" class=\"headerlink\" title=\"数据报文画图工具\"></a>数据报文画图工具</h2><p><a href=\"https://www.jianshu.com/p/ed47273c5dd9\">数据报文画图工具</a></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://github.com/Valloric/YouCompleteMe\">YouCompleteMe</a><br><a href=\"https://github.com/yangyangwithgnu/use_vim_as_ide\">use_vim_as_ide</a><br><a href=\"http://www.skywind.me/blog/archives/2084\">http://www.skywind.me/blog/archives/2084</a><br><a href=\"http://vim.zhangjikai.com/%E6%8F%92%E4%BB%B6/vundle.html\">http://vim.zhangjikai.com/%E6%8F%92%E4%BB%B6/vundle.html</a></p>\n","categories":["工具","vim"],"tags":["vim","工具"]},{"title":"网络编程框架-Netty组件","url":"/flame/2021/10/30/java/java-middleware/netty/java-middleware-netty-components/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Netty是一款<strong>异步</strong>的<strong>事件驱动</strong>的<strong>网络应用程序框架</strong>，本文梳理了Netty的主要组件。</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Netty是一款异步的事件驱动的网络应用程序框架，支持快速地开发可维护的高性能的面向协议的服务器和客户端，并且提供了丰富的网络编程工具集。</p>\n<p>开发一套高性能的网络系统，需要超一流的<strong>编程技巧</strong>和几个复杂领域（网络编程、多线程处理和并发）的<strong>专业知识</strong>，在高负载下可靠和高效地处理和调度 I&#x2F;O 操作也是一项繁琐而且容易出错的任务。</p>\n<p>在Java领域，直接使用<a href=\"/flame/2021/10/23/java/java-nio-socket/\" title=\"&lt;strong&gt;Java NIO&lt;&#x2F;strong&gt; API\"><strong>Java NIO</strong> API</a>也能构建出正确和安全的网络应用程序，但并不容易。而Netty将高超的编程技巧和复杂的专业知识隐藏在易于使用的API之后， 使得网络编程<strong>新手</strong>也能使用。</p>\n<br/>\n\n<h2 id=\"基于异步和事件驱动的设计\"><a href=\"#基于异步和事件驱动的设计\" class=\"headerlink\" title=\"基于异步和事件驱动的设计\"></a>基于异步和事件驱动的设计</h2><p>Netty的关键设计是异步和事件驱动，可以保证可伸缩性。</p>\n<blockquote>\n<p>可伸缩性(<strong>Scalability</strong>)的定义：The ability of a system, network, or process to handle a growing amount of work in a capable manner or its ability to be enlarged to accommodate that growth.</p>\n</blockquote>\n<p>通过合理的设计，Netty可以使应用程序逻辑独立于任何网络操作而独立地演变。</p>\n<p><strong>4种主要构件块：</strong></p>\n<ul>\n<li><p>Channel</p>\n</li>\n<li><p>Callback</p>\n</li>\n<li><p>Future</p>\n</li>\n<li><p>Event和ChannelHandler</p>\n</li>\n</ul>\n<p><strong>Channel</strong></p>\n<blockquote>\n<p>A Channel is a basic construct of Java NIO.  </p>\n<p>It represents <strong>an open connection</strong> to an entity such as a hardware device, a file, a network socket, or a program component that is capable of performing one or more distinct I&#x2F;O operations, for example reading or writing.</p>\n</blockquote>\n<p><strong>Callback</strong></p>\n<blockquote>\n<p>A callback is simply a method, a reference to which has been provided to another method. This enables the latter to call the former at an appropriate time.</p>\n</blockquote>\n<p><strong>Future</strong></p>\n<blockquote>\n<p>A Future acts as a placeholder for the result of an asynchronous operation; it will complete at some point in the future and provide access to the result.</p>\n</blockquote>\n<p><strong>Event和ChannelHandler</strong></p>\n<blockquote>\n<p>Netty uses distinct events to notify us about changes of state or the status of operations. Every event can be dispatched to a user-implemented method of a channelHandler instance.</p>\n<p>ChannelHandler: can think of each handler instance as a kind of callback to be executed in response to a specific event.</p>\n</blockquote>\n<br/>\n\n\n\n<h2 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h2><p>Future代表异步操作的结果，可以看作是将来要执行操作的结果的占位符。</p>\n<p>Netty中两种Future类型是: ChannelFuture 、Promise。</p>\n<p><strong>Future提供的方法</strong></p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-future-methods.png\" alt=\"io.netty.util.concurrent.Future接口\"></p>\n<h3 id=\"ChannelFuture\"><a href=\"#ChannelFuture\" class=\"headerlink\" title=\"ChannelFuture\"></a>ChannelFuture</h3><p>ChannelFuture可以通过添加监听器，来获取I&#x2F;O操作结果或者进行后续的相关操作</p>\n<p>ChannelFuture有两种状态：Uncompleted  和  Completed，状态迁移如下：</p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ChannelFuture的状态迁移</span><br><span class=\"line\">  </span><br><span class=\"line\">*                                      +---------------------------+</span><br><span class=\"line\">*                                      | Completed successfully    |</span><br><span class=\"line\">*                                      +---------------------------+</span><br><span class=\"line\">*                                 +----&gt;      isDone() = <span class=\"literal\">true</span>      |</span><br><span class=\"line\">* +--------------------------+    |    |   isSuccess() = <span class=\"literal\">true</span>      |</span><br><span class=\"line\">* |        Uncompleted       |    |    +===========================+</span><br><span class=\"line\">* +--------------------------+    |    | Completed with failure    |</span><br><span class=\"line\">* |      isDone() = <span class=\"literal\">false</span>    |    |    +---------------------------+</span><br><span class=\"line\">* |   isSuccess() = <span class=\"literal\">false</span>    |----+----&gt;      isDone() = <span class=\"literal\">true</span>      |</span><br><span class=\"line\">* | isCancelled() = <span class=\"literal\">false</span>    |    |    |       cause() = non-<span class=\"literal\">null</span>  |</span><br><span class=\"line\">* |       cause() = <span class=\"literal\">null</span>     |    |    +===========================+</span><br><span class=\"line\">* +--------------------------+    |    | Completed by cancellation |</span><br><span class=\"line\">*                                 |    +---------------------------+</span><br><span class=\"line\">*                                 +----&gt;      isDone() = <span class=\"literal\">true</span>      |</span><br><span class=\"line\">*                                      | isCancelled() = <span class=\"literal\">true</span>      |</span><br><span class=\"line\">*                                      +---------------------------+</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>ChannelFuture提供的方法</strong></p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-concurrent-channelfuture-methods.png\" alt=\"io.netty.util.concurrent.ChannelFuture接口\"></p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>Promise对Future进行了扩展，用于设置I&#x2F;O操作结果。Netty发起I&#x2F;O操作时，会创建一个新的Promise对象，当I&#x2F;O操作发送异常或者完成时，设置Promise结果。</p>\n<p><strong>Promise提供的方法</strong></p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-concurrent-promise-methods.png\" alt=\"io.netty.util.concurrent.Promise接口\"></p>\n<h2 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h2><p>Channel接口被用于所有的I&#x2F;O操作，其实现是线程安全的，可以在并发环境下使用。</p>\n<h3 id=\"Channel的生命周期\"><a href=\"#Channel的生命周期\" class=\"headerlink\" title=\"Channel的生命周期\"></a>Channel的生命周期</h3><p>Channel定义了一组和ChannelInboundHandler API密切相关的状态模型，当这些状态发生改变时，将会触发对应的事件。 </p>\n<p>这些事件将会被转发给ChannelPipeline中的ChannelHandler，做出对应的响应。</p>\n<table>\n<thead>\n<tr>\n<th>状态定义</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ChannelUnregistered</td>\n<td>Channel 已经被创建，但还未注册到EventLoop</td>\n</tr>\n<tr>\n<td>ChannelRegistered</td>\n<td>Channel 已经被注册到了EventLoop</td>\n</tr>\n<tr>\n<td>ChannelActive</td>\n<td>Channel 处于活动状态（已经连接到它的远程节点），现在可以接收和发送数据了</td>\n</tr>\n<tr>\n<td>ChannelInactive</td>\n<td>Channel 没有连接到远程节点</td>\n</tr>\n</tbody></table>\n<p><em>Channel的状态模型如下图</em></p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-channel-state-model.png\" alt=\"Channel的状态模型\"></p>\n<h3 id=\"Channel的层次结构\"><a href=\"#Channel的层次结构\" class=\"headerlink\" title=\"Channel的层次结构\"></a>Channel的层次结构</h3><p><img src=\"/flame/images/java/java-middleware/netty/java-netty-channel-interface.png\" alt=\"Channel接口的层次结构\"></p>\n<p>每个Channel都将会被分配一个ChannelConfig和ChannelPipeline。</p>\n<p>ChannelConfig包含了该Channel的所有配置设置，并且支持热更新。</p>\n<p>ChannelPipeline持有所有的ChannelHandlers，这些ChannelHandler实现了应用程序用于处理状态变化以及处理数据的逻辑。</p>\n<h3 id=\"Channel的重要方法\"><a href=\"#Channel的重要方法\" class=\"headerlink\" title=\"Channel的重要方法\"></a>Channel的重要方法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方 法 名</th>\n<th align=\"left\">描 述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">eventLoop</td>\n<td align=\"left\">返回分配给 Channel 的 EventLoop</td>\n</tr>\n<tr>\n<td align=\"left\">pipeline</td>\n<td align=\"left\">返回分配给 Channel 的 ChannelPipeline</td>\n</tr>\n<tr>\n<td align=\"left\">isActive</td>\n<td align=\"left\">如果 Channel 是活动的，则返回 true。活动的意义可能依赖于底层的传输。例如， 一个 Socket 传输一旦连接到了远程节点便是活动的，而一个 Datagram 传输一旦 被打开便是活动的</td>\n</tr>\n<tr>\n<td align=\"left\">localAddress</td>\n<td align=\"left\">返回本地的 SokcetAddress</td>\n</tr>\n<tr>\n<td align=\"left\">remoteAddress</td>\n<td align=\"left\">返回远程的 SocketAddress</td>\n</tr>\n<tr>\n<td align=\"left\">write</td>\n<td align=\"left\">将数据写到远程节点。这个数据将被传递给 ChannelPipeline，并且排队直到它被 冲刷</td>\n</tr>\n<tr>\n<td align=\"left\">flush</td>\n<td align=\"left\">将之前已写的数据冲刷到底层传输，如一个 Socket</td>\n</tr>\n<tr>\n<td align=\"left\">writeAndFlush</td>\n<td align=\"left\">一个简便的方法，等同于调用 write()并接着调用 flush()</td>\n</tr>\n</tbody></table>\n<br/>\n\n<h3 id=\"Channel的分类\"><a href=\"#Channel的分类\" class=\"headerlink\" title=\"Channel的分类\"></a>Channel的分类</h3><p>在选择Channel的具体实现时，必须选择和应用程序的协议<strong>相容</strong>的Channel实现。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>package</th>\n<th>描述</th>\n<th>常用的实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NIO</td>\n<td>io.netty.channel.socket.nio</td>\n<td>使用java.nio.channels包作为基础——基于选择器的方式</td>\n<td>NioSocketChannel      NioServerSocketChannel NioDatagramChannel</td>\n</tr>\n<tr>\n<td>Epoll</td>\n<td>io.netty.channel.epoll</td>\n<td>由 JNI驱动的epoll()和非阻塞 IO。这个传输支持只有在Linux上可用的多种特性，如SO_REUSEPORT， 比 NIO 传输更快，而且是完全非阻塞的</td>\n<td>EpollSocketChannel EpollServerSocketChannel</td>\n</tr>\n<tr>\n<td>OIO</td>\n<td>io.netty.channel.socket.oio</td>\n<td>使用 java.net 包作为基础——使用阻塞流</td>\n<td>OioSocketChannel  OioServerSocketChannel</td>\n</tr>\n<tr>\n<td>Local</td>\n<td>io.netty.channel.local</td>\n<td>可以在VM内部通过管道进行通信的本地传输</td>\n<td>LocalChannel LocalServerChannel</td>\n</tr>\n<tr>\n<td>Embedded</td>\n<td>io.netty.channel.embedded</td>\n<td>Embedded 传输，允许使用 ChannelHandler 而又 不需要一个真正的基于网络的传输。这在测试你的 ChannelHandler 实现时非常有用</td>\n<td>EmbeddedChannel</td>\n</tr>\n</tbody></table>\n<br/>\n\n<p><strong>NIO Channel</strong></p>\n<p>NIO Channel提供了一个所有I&#x2F;O操作的全异步的实现，底层是基于JDK选择器的实现。</p>\n<p>选择器可以选择操作的位模式：组合起来定义一组应用程序正在请求通知的状态变化集</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OP_ACCEPT</td>\n<td>请求在接受新连接并创建 Channel 时获得通知</td>\n</tr>\n<tr>\n<td>OP_CONNECT</td>\n<td>请求在建立一个连接时获得通知</td>\n</tr>\n<tr>\n<td>OP_READ</td>\n<td>请求当数据已经就绪，可以从 Channel 中读取时获得通知</td>\n</tr>\n<tr>\n<td>OP_WRITE</td>\n<td>请求当可以向 Channel 中写更多的数据时获得通知。这处理了套接字缓冲区被完 全填满时的情况，这种情况通常发生在数据的发送速度比远程节点可处理的速度更 快的时候</td>\n</tr>\n</tbody></table>\n<p>选择器运行在一个检查状态变化并对其做出相应响应的线程上，在应用程序对状态的改变做出响应之后，选择器将会被重置，并将重复这个过程。</p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-niochannel-process-detail.png\" alt=\"NIO Channel选择器处理的内部细节\"></p>\n<br/>\n\n<p><strong>Epoll Channel</strong></p>\n<p>Epoll Channel是用于 Linux 的本地非阻塞的Channel。</p>\n<p>Linux中的epoll API具备一个高度可扩展的I&#x2F;O事件通知特性，比旧的POSIX select和poll系统调用性能更好，同时现在也是Linux上非阻 塞网络编程的事实标准。</p>\n<p>Netty Epoll Channel 的实现方式和 linux-epoll 的特性更加一致，并且以一种更加轻量的方式使用中断。如果应用程序准备在Linux平台允许，可以考虑使用Epoll Channel，高负载下它的性能要优于JDK的NIO实现。</p>\n<br/>\n\n<p><strong>OIO Channel</strong></p>\n<p>OIO Channel建立在 java.net 包的阻塞实现之上，不是异步的。</p>\n<p>当需要移植使用了阻塞调用的库(例如JDBC)，暂时无法直接将逻辑转换为非阻塞，可以考虑先使用OIO Channel重构，然后再移植到纯粹的异步传输上。</p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-oiochannel-process-detail.png\" alt=\"OIO Channel的处理逻辑\"></p>\n<br/>\n\n<p><strong>Local Channel</strong></p>\n<p>Local Channel 用于在同一个 JVM 中运行的客户端和服务器程序之间的异步通信。</p>\n<p>Local Server Channel相关联的SocketAddress并没有绑定物理网络地址，不接受真正的网络流量。Local Server Channel会被放在一个注册表里，在关闭时注销。</p>\n<br/>\n\n<p><strong>Embedded Channel</strong></p>\n<p>Embedded Channel可以为ChannelHandler的实现创建单元测试用例。</p>\n<p>Embedded Channel可以将一组ChannelHandle 作为帮助器类嵌入到其他的ChannelHandler内部。</p>\n<p>通过这种方式，可以扩展一个ChannelHandler 的功能， 而又不需要修改其内部代码。</p>\n<h2 id=\"ByteBuf\"><a href=\"#ByteBuf\" class=\"headerlink\" title=\"ByteBuf\"></a>ByteBuf</h2><p>ByteBuf是Netty的数据容器。</p>\n<p>因为所有的网络通信都涉及字节序列的移动，所以高效易用的数据结构明显是必不可少的。</p>\n<p>ByteBuf解决了JDK ByteBuffer的局限性， 又为网络应用程序的开发者提供了更好的API。</p>\n<h2 id=\"ChannelHandler\"><a href=\"#ChannelHandler\" class=\"headerlink\" title=\"ChannelHandler\"></a>ChannelHandler</h2><p>ChannelHandler用于处理入站和出站数据，它的方法是由网络事件触发的。</p>\n<h3 id=\"ChannelHandler生命周期\"><a href=\"#ChannelHandler生命周期\" class=\"headerlink\" title=\"ChannelHandler生命周期\"></a>ChannelHandler生命周期</h3><p>Interface ChannelHandler定义了生命周期操作,  在ChannelHandler被添加到ChannelPipeline中或者被从ChannelPipeline中移除时会调用这些操作。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>handlerAdded(ChannelHandlerContext ctx)</td>\n<td>当把 ChannelHandler 添加到 ChannelPipeline 中时被调用</td>\n</tr>\n<tr>\n<td>handlerRemoved(ChannelHandlerContext ctx)</td>\n<td>当从 ChannelPipeline 中移除 ChannelHandler 时被调用</td>\n</tr>\n<tr>\n<td>exceptionCaught(ChannelHandlerContext ctx, Throwable cause)</td>\n<td>当处理过程中在 ChannelPipeline 中有错误产生时被调用</td>\n</tr>\n</tbody></table>\n<h3 id=\"ChannelInboundHandler\"><a href=\"#ChannelInboundHandler\" class=\"headerlink\" title=\"ChannelInboundHandler\"></a>ChannelInboundHandler</h3><p>ChannelInboundHandler用于处理入站数据以及各种状态变化。</p>\n<p>ChannelInboundHandler Interface定义的生命周期方法，将会在数据被接收时或者与其对应的Channel 状态发生改变时被调用。</p>\n<p>当某个ChannelInboundHandler的实现重写channelRead()方法时，要负责显式地释放与池化的ByteBuf实例相关的内存。</p>\n<p>ChannelInboundHandler的实现之一SimpleChannelInboundHandler重写了channelRead，会自动释放资源。</p>\n<p>ChannelInboundHandler的生命周期方法</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>channelRegistered</td>\n<td>当 Channel 已经注册到它的 EventLoop 并且能够处理 I&#x2F;O 时被调用</td>\n</tr>\n<tr>\n<td>channelUnregistered</td>\n<td>当 Channel 从它的 EventLoop 注销并且无法处理任何 I&#x2F;O 时被调用</td>\n</tr>\n<tr>\n<td>channelActive</td>\n<td>当 Channel 处于活动状态时被调用；Channel 已经连接&#x2F;绑定并且已经就绪</td>\n</tr>\n<tr>\n<td>channelInactive</td>\n<td>当 Channel 离开活动状态并且不再连接它的远程节点时被调用</td>\n</tr>\n<tr>\n<td>channelReadComplete</td>\n<td>当Channel上的一个读操作完成时被调用。  当所有可读的字节都已经从 Channel 中读取之后，将会调用该回调方法；所以，可能在channelReadComplete()被调用之前看到多次调用 channelRead(…)</td>\n</tr>\n<tr>\n<td>channelRead</td>\n<td>当从Channel读取数据时被调用 : <strong>Invoked</strong> when the current Channel has read a message from the peer.</td>\n</tr>\n<tr>\n<td>channelWritabilityChanged</td>\n<td>当Channel的可写状态发生改变时被调用。用户可以确保写操作不会完成得太快（以避免发生 OutOfMemoryError）或者可以在 Channel 变为再次可写时恢复写入。可以通过调用 Channel 的 isWritable()方法来检测 Channel 的可写性。与可写性相关的阈值可以通过 Channel.config(). setWriteHighWaterMark()和 Channel.config().setWriteLowWaterMark()方法来设置</td>\n</tr>\n<tr>\n<td>userEventTriggered</td>\n<td>当 ChannelnboundHandler.fireUserEventTriggered()方法被调用时被调用，因为一个 POJO 被传经了 ChannelPipeline</td>\n</tr>\n</tbody></table>\n<h3 id=\"ChannelOutboundHandler\"><a href=\"#ChannelOutboundHandler\" class=\"headerlink\" title=\"ChannelOutboundHandler\"></a>ChannelOutboundHandler</h3><p>ChannelOutboundHandler用于处理出站数据并且允许拦截所有的操作。</p>\n<p>ChannelOutboundHandler的一个强大的功能是可以按需推迟操作或者事件，这使得可以通过一些复杂的方法来处理请求。例如，如果到远程节点的写入被暂停了，那么你可以推迟冲 刷操作并在稍后继续。</p>\n<p><em>ChannelOutboundHandler的重要方法</em></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bind(ChannelHandlerContext, SocketAddress,ChannelPromise)</td>\n<td>当请求将 Channel 绑定到本地地址时被调用</td>\n</tr>\n<tr>\n<td>connect(ChannelHandlerContext, SocketAddress,SocketAddress,ChannelPromise)</td>\n<td>当请求将 Channel 连接到远程节点时被调用</td>\n</tr>\n<tr>\n<td>disconnect(ChannelHandlerContext, ChannelPromise)</td>\n<td>当请求将 Channel 从远程节点断开时被调用</td>\n</tr>\n<tr>\n<td>close(ChannelHandlerContext,ChannelPromise)</td>\n<td>当请求关闭 Channel 时被调用</td>\n</tr>\n<tr>\n<td>deregister(ChannelHandlerContext, ChannelPromise)</td>\n<td>当请求将 Channel 从它的 EventLoop 注销时被调用</td>\n</tr>\n<tr>\n<td>read(ChannelHandlerContext)</td>\n<td>当请求从 Channel 读取更多的数据时被调用，Intercept ChannelHandlerContext#read().</td>\n</tr>\n<tr>\n<td>flush(ChannelHandlerContext)</td>\n<td>当请求通过 Channel 将入队数据冲刷到远程节点时被调用</td>\n</tr>\n<tr>\n<td>write(ChannelHandlerContext,Object, ChannelPromise)</td>\n<td>当请求通过 Channel 将数据写到远程节点时被调用</td>\n</tr>\n</tbody></table>\n<h3 id=\"ChannelHandler适配器\"><a href=\"#ChannelHandler适配器\" class=\"headerlink\" title=\"ChannelHandler适配器\"></a>ChannelHandler适配器</h3><p>ChannelInboundHandlerAdapter和ChannelOutboundHandlerAdapter分别提供了ChannelInboundHandler和ChannelOutboundHandler的基本实现。</p>\n<p>通过扩展抽象类ChannelHandlerAdapter，它们获得了它们共同的接口ChannelHandler的方法。</p>\n<p>ChannelHandlerAdapter还提供了实用方法isSharable()，如果其对应的实现被标注为Sharable，那么这个方法将返回 true，表示它可以被添加到多个ChannelPipeline中</p>\n<p>在ChannelInboundHandlerAdapter和ChannelOutboundHandlerAdapter中所提供的方法体调用了其相关联的ChannelHandlerContext上的等效方法，从而将事件转发到了ChannelPipeline中的下一个ChannelHandler中。</p>\n<p><em><strong>ChannelHandlerAdapter的层次结构</strong></em></p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-ChannelHandlerAdapter-layer.png\" alt=\"ChannelHandlerAdapter的层次结构\"></p>\n<h2 id=\"ChannelPipeline\"><a href=\"#ChannelPipeline\" class=\"headerlink\" title=\"ChannelPipeline\"></a>ChannelPipeline</h2><p>ChannelPipeline提供了ChannelHandler链的容器，并定义了用于在该链上传播入站和出站事件流的API。</p>\n<p>可以把ChannelPipeline看作一个拦截流经Channel的入站和出站事件的ChannelHandler实例链，这些ChannelHandler之间的交互组成了一个应用程序数据和事件处理逻辑的核心。</p>\n<p>ChannelPipeline保存了与Channel相关联的ChannelHandler。</p>\n<p>ChannelPipeline可以根据需要，通过添加或者删除ChannelHandler来动态地修改。</p>\n<p>ChannelPipeline着丰富的API用以被调用，以响应入站和出站事件。</p>\n<blockquote>\n<p>A list of {ChannelHandler}s which handles or intercepts inbound events and outbound operations of a Channel.<br>ChannelPipeline implements an advanced form of the Intercepting Filter pattern to give a user full control over how an event is handled and how the {ChannelHandler}s in a pipeline interact with each other.</p>\n</blockquote>\n<h3 id=\"ChannelPipeline的创建\"><a href=\"#ChannelPipeline的创建\" class=\"headerlink\" title=\"ChannelPipeline的创建\"></a>ChannelPipeline的创建</h3><p>每一个新创建的Channe实例会被分配一个新的永久性关联的ChannelPipeline实例，之后既不能附加其他ChannelPipeline实例，也不能分离其当前的。</p>\n<p>ChannelHandler安装到ChannelPipeline 中的过程：</p>\n<ul>\n<li><p>一个ChannelInitializer的实现被注册到了ServerBootstrap或者Bootstrap中   </p>\n</li>\n<li><p>当 ChannelInitializer.initChannel()方法被调用时，ChannelInitializer将在 ChannelPipeline 中安装一组自定义的 ChannelHandler</p>\n</li>\n<li><p>ChannelInitializer将它自己从 ChannelPipeline中移除。</p>\n</li>\n</ul>\n<h3 id=\"和ChannelHandler关系\"><a href=\"#和ChannelHandler关系\" class=\"headerlink\" title=\"和ChannelHandler关系\"></a>和ChannelHandler关系</h3><p>在ChannelPipeline传播事件时，它会测试ChannelPipeline中下一个ChannelHandler的类型是否和事件的运动方向相匹配。如果不匹配，ChannelPipeline将跳过该ChannelHandler并前进到下一个，直到它找到和该事件所期望的方向相匹配的为止。</p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-channelpipe.png\" alt=\"ChannelPipeline 和它的 ChannelHandler\"></p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">* For example, let us assume that we created the following pipeline:</span><br><span class=\"line\">* &#123;ChannelPipeline&#125; p = ...;</span><br><span class=\"line\">* p.addLast(&quot;1&quot;, new InboundHandlerA());</span><br><span class=\"line\">* p.addLast(&quot;2&quot;, new InboundHandlerB());</span><br><span class=\"line\">* p.addLast(&quot;3&quot;, new OutboundHandlerA());</span><br><span class=\"line\">* p.addLast(&quot;4&quot;, new OutboundHandlerB());</span><br><span class=\"line\">* p.addLast(&quot;5&quot;, new InboundOutboundHandlerX());</span><br><span class=\"line\">* In the given example configuration, </span><br><span class=\"line\">* the handler evaluation order is 1, 2, 3, 4, 5 when an event goes inbound. </span><br><span class=\"line\">* When an event goes outbound, the order is 5, 4, 3, 2, 1. </span><br><span class=\"line\">*  </span><br><span class=\"line\">*  </span><br><span class=\"line\">* The actual evaluation order of an inbound event will be: 1, 2, and 5.</span><br><span class=\"line\">* The actual evaluation order of a outbound event will be: 5, 4, and 3.</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">How an event flows in a pipeline ?</span><br><span class=\"line\">  </span><br><span class=\"line\">*                                                 I/O Request</span><br><span class=\"line\">*                                            via &#123;Channel&#125; or</span><br><span class=\"line\">*                                        &#123;ChannelHandlerContext&#125;</span><br><span class=\"line\">*                                                      |</span><br><span class=\"line\">*  +---------------------------------------------------+---------------+</span><br><span class=\"line\">*  |                           ChannelPipeline         |               |</span><br><span class=\"line\">*  |                                                  \\|/              |</span><br><span class=\"line\">*  |    +---------------------+            +-----------+----------+    |</span><br><span class=\"line\">*  |    | Inbound Handler  N  |            | Outbound Handler  <span class=\"number\">1</span>  |    |</span><br><span class=\"line\">*  |    +----------+----------+            +-----------+----------+    |</span><br><span class=\"line\">*  |              /|\\                                  |               |</span><br><span class=\"line\">*  |               |                                  \\|/              |</span><br><span class=\"line\">*  |    +----------+----------+            +-----------+----------+    |</span><br><span class=\"line\">*  |    | Inbound Handler N-<span class=\"number\">1</span> |            | Outbound Handler  <span class=\"number\">2</span>  |    |</span><br><span class=\"line\">*  |    +----------+----------+            +-----------+----------+    |</span><br><span class=\"line\">*  |              /|\\                                  .               |</span><br><span class=\"line\">*  |               .                                   .               |</span><br><span class=\"line\">*  | ChannelHandlerContext.fireIN_EVT() ChannelHandlerContext.OUT_EVT()|</span><br><span class=\"line\">*  |        [ method call]                       [method call]         |</span><br><span class=\"line\">*  |               .                                   .               |</span><br><span class=\"line\">*  |               .                                  \\|/              |</span><br><span class=\"line\">*  |    +----------+----------+            +-----------+----------+    |</span><br><span class=\"line\">*  |    | Inbound Handler  <span class=\"number\">2</span>  |            | Outbound Handler M-<span class=\"number\">1</span> |    |</span><br><span class=\"line\">*  |    +----------+----------+            +-----------+----------+    |</span><br><span class=\"line\">*  |              /|\\                                  |               |</span><br><span class=\"line\">*  |               |                                  \\|/              |</span><br><span class=\"line\">*  |    +----------+----------+            +-----------+----------+    |</span><br><span class=\"line\">*  |    | Inbound Handler  <span class=\"number\">1</span>  |            | Outbound Handler  M  |    |</span><br><span class=\"line\">*  |    +----------+----------+            +-----------+----------+    |</span><br><span class=\"line\">*  |              /|\\                                  |               |</span><br><span class=\"line\">*  +---------------+-----------------------------------+---------------+</span><br><span class=\"line\">*                  |                                  \\|/</span><br><span class=\"line\">*  +---------------+-----------------------------------+---------------+</span><br><span class=\"line\">*  |               |                                   |               |</span><br><span class=\"line\">*  |       [ Socket.read() ]                    [ Socket.write() ]     |</span><br><span class=\"line\">*  |                                                                   |</span><br><span class=\"line\">*  |  Netty Internal I/O <span class=\"title function_\">Threads</span> <span class=\"params\">(Transport Implementation)</span>            |</span><br><span class=\"line\">*  +-------------------------------------------------------------------+</span><br><span class=\"line\">* </span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"ChannelPipeline修改\"><a href=\"#ChannelPipeline修改\" class=\"headerlink\" title=\"ChannelPipeline修改\"></a>ChannelPipeline修改</h3><p>ChannelHandler可以通过添加、删除或者替换其他的ChannelHandler来实时地修改ChannelPipeline的布局。</p>\n<ul>\n<li>ChannelHandler用于修改ChannelPipeline的方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>addFirst addBefore addAfter addLast</td>\n<td>将一个ChannelHandler 添加到ChannelPipeline 中</td>\n</tr>\n<tr>\n<td>remove</td>\n<td>将一个ChannelHandler 从ChannelPipeline 中移除</td>\n</tr>\n<tr>\n<td>replace</td>\n<td>将ChannelPipeline中的一个ChannelHandler替换为另一个ChannelHandler</td>\n</tr>\n</tbody></table>\n<ul>\n<li>ChannelPipeline用于访问ChannelHandler的操作</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>get</td>\n<td>通过类型或者名称返回 ChannelHandler</td>\n</tr>\n<tr>\n<td>context</td>\n<td>返回和 ChannelHandler 绑定的 ChannelHandlerContext</td>\n</tr>\n<tr>\n<td>names</td>\n<td>返回 ChannelPipeline 中所有 ChannelHandler 的名称</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>ChannelHandler 的执行和阻塞</p>\n<p>通常 ChannelPipeline 中的每一个 ChannelHandler 都是通过它的 EventLoop（I&#x2F;O 线程）来处理传递给它的事件的。所以至关重要的是不要阻塞这个线程，因为这会对整体的 I&#x2F;O 处理产生负面的影响。</p>\n<p>但有时可能需要与那些使用阻塞 API 的遗留代码进行交互。对于这种情况，ChannelPipeline有一些接受一个EventExecutorGroup 的 add()方法。如果一个事件被传递给一个自定义的EventExecutorGroup，它将被包含在这个EventExecutorGroup 中的某个 EventExecutor 所处理，从而被从该 Channel 本身的 EventLoop 中移除。对于这种用例，Netty提供了一个叫 DefaultEventExecutorGroup 的默认实现。</p>\n</blockquote>\n<h3 id=\"ChannelPipeline的触发\"><a href=\"#ChannelPipeline的触发\" class=\"headerlink\" title=\"ChannelPipeline的触发\"></a>ChannelPipeline的触发</h3><p>ChannelPipeline的API提供了调用入站和出站操作的方法。</p>\n<p><em>ChannelPipeline API的入站操作</em></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>fireChannelRegistered</td>\n<td>调用ChannelPipeline中下一个ChannelInboundHandler的channelRegistered(ChannelHandlerContext)方法</td>\n</tr>\n<tr>\n<td>fireChannelUnregistered</td>\n<td>调用 ChannelPipeline 中下一个 ChannelInboundHandler 的 channelUnregistered(ChannelHandlerContext)方法</td>\n</tr>\n<tr>\n<td>fireChannelActive</td>\n<td>调用 ChannelPipeline 中下一个 ChannelInboundHandler 的 channelActive(ChannelHandlerContext)方法</td>\n</tr>\n<tr>\n<td>fireChannelInactive</td>\n<td>调用 ChannelPipeline 中下一个 ChannelInboundHandler 的 channelInactive(ChannelHandlerContext)方法</td>\n</tr>\n<tr>\n<td>fireExceptionCaught</td>\n<td>调用 ChannelPipeline 中下一个 ChannelInboundHandler 的 exceptionCaught(ChannelHandlerContext, Throwable)方法</td>\n</tr>\n<tr>\n<td>fireUserEventTriggered</td>\n<td>调用 ChannelPipeline 中下一个 ChannelInboundHandler 的 userEventTriggered(ChannelHandlerContext, Object)方法</td>\n</tr>\n<tr>\n<td>fireChannelRead</td>\n<td>调用 ChannelPipeline 中下一个 ChannelInboundHandler 的 channelRead(ChannelHandlerContext, Object msg)方法</td>\n</tr>\n<tr>\n<td>fireChannelReadComplete</td>\n<td>调用 ChannelPipeline 中下一个 ChannelInboundHandler 的 channelReadComplete(ChannelHandlerContext)方法</td>\n</tr>\n<tr>\n<td>fireChannelWritabilityChanged</td>\n<td>调用 ChannelPipeline 中下一个 ChannelInboundHandler 的 channelWritabilityChanged(ChannelHandlerContext)方法</td>\n</tr>\n</tbody></table>\n<p><em>ChannelPipeline API的出站操作</em></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bind</td>\n<td>将Channel绑定到一个本地地址，这将调用ChannelPipeline中的下一个ChannelOutboundHandler的 bind(ChannelHandlerContext, SocketAddress, ChannelPromise)方法</td>\n</tr>\n<tr>\n<td>connect</td>\n<td>将 Channel 连接到一个远程地址，这将调用 ChannelPipeline 中的下一个 ChannelOutboundHandler 的 connect(ChannelHandlerContext, SocketAddress, ChannelPromise)方法</td>\n</tr>\n<tr>\n<td>disconnect</td>\n<td>将Channel 断开连接。这将调用ChannelPipeline 中的下一个ChannelOutboundHandler 的 disconnect(ChannelHandlerContext, Channel Promise)方法</td>\n</tr>\n<tr>\n<td>close</td>\n<td>将 Channel 关闭。这将调用 ChannelPipeline 中的下一个 ChannelOutboundHandler 的 close(ChannelHandlerContext, ChannelPromise)方法</td>\n</tr>\n<tr>\n<td>deregister</td>\n<td>将 Channel 从它先前所分配的 EventExecutor（即 EventLoop）中注销。这将调 用 ChannelPipeline 中的下一个 ChannelOutboundHandler 的 deregister (ChannelHandlerContext, ChannelPromise)方法</td>\n</tr>\n<tr>\n<td>flush</td>\n<td>冲刷Channel所有挂起的写入。这将调用ChannelPipeline中的下一个ChannelOutboundHandler 的 flush(ChannelHandlerContext)方法</td>\n</tr>\n<tr>\n<td>write</td>\n<td>将消息写入 Channel。这将调用 ChannelPipeline 中的下一个 ChannelOutboundHandler的write(ChannelHandlerContext, Object msg, ChannelPromise)方法。注意：这并不会将消息写入底层的 Socket，而只会将它放入队列中。 要将它写入 Socket，需要调用 flush()或者 writeAndFlush()方法</td>\n</tr>\n<tr>\n<td>writeAndFlush</td>\n<td>这是一个先调用 write()方法再接着调用 flush()方法的便利方法</td>\n</tr>\n<tr>\n<td>read</td>\n<td>请求从 Channel 中读取更多的数据。这将调用 ChannelPipeline 中的下一个 ChannelOutboundHandler 的 read(ChannelHandlerContext)方法</td>\n</tr>\n</tbody></table>\n<h3 id=\"ChannelHandlerContext\"><a href=\"#ChannelHandlerContext\" class=\"headerlink\" title=\"ChannelHandlerContext\"></a>ChannelHandlerContext</h3><p>ChannelHandlerContext代表了ChannelHandler和ChannelPipeline之间的关联。</p>\n<p>每当有ChannelHandler添加到ChannelPipeline中时，都会创建ChannelHandlerContext。</p>\n<p>ChannelHandlerContext的主要功能是管理它所关联的ChannelHandler和其他ChannelHandler（在同一个ChannelPipeline中的）之间的交互。</p>\n<p><strong>Channel ChannelPipeline ChannelHandler以及ChannelHandlerContext之间的关系如下图</strong></p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-channel-channelpipe-channelhandler-channelhandlercontext.png\" alt=\"Channel、ChannelPipeline、ChannelHandler 以及 ChannelHandlerContext 之间的关系\"></p>\n<br/>\n\n<br/>\n\n<br/>\n\n<p><em><strong>通过Channel或者ChannelPipeline进行的事件传播</strong></em>，事件将沿着整个ChannelPipeline 进行传播</p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-event-flow-channel-channelpipe.png\" alt=\"通过Channel或者ChannelPipeline进行的事件传播\"></p>\n<br/>\n\n<br/>\n\n<br/>\n\n<p><em><strong>通过ChannelHandlerContext触发的操作的事件传播</strong></em>，事件只会传播给位于该ChannelPipeline中的下一个能够处理该事件的 ChannelHandler</p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-event-channelcontext-trigger.png\" alt=\"通过ChannelHandlerContext触发的操作的事件传播\"></p>\n<br/>\n\n<p><em><strong>ChannelHandlerContext的API</strong></em></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alloc</td>\n<td>返回和这个实例相关联的Channel所配置的ByteBufAllocator</td>\n</tr>\n<tr>\n<td>bind</td>\n<td>绑定到给定的SocketAddress，并返回ChannelFuture</td>\n</tr>\n<tr>\n<td>channel</td>\n<td>返回绑定到这个实例的 Channel</td>\n</tr>\n<tr>\n<td>close</td>\n<td>关闭Channel，并返回ChannelFuture</td>\n</tr>\n<tr>\n<td>connect</td>\n<td>连接给定的SocketAddress，并返回ChannelFuture</td>\n</tr>\n<tr>\n<td>deregister</td>\n<td>从之前分配的EventExecutor注销，并返回ChannelFuture</td>\n</tr>\n<tr>\n<td>disconnect</td>\n<td>从远程节点断开，并返回ChannelFuture</td>\n</tr>\n<tr>\n<td>executor</td>\n<td>返回调度事件的EventExecutor</td>\n</tr>\n<tr>\n<td>fireChannelActive</td>\n<td>触发对下一个ChannelInboundHandler上的channelActive()方法（已连接）的调用</td>\n</tr>\n<tr>\n<td>fireChannelInactive</td>\n<td>触发对下一个ChannelInboundHandler上的channelInactive()方法（已关闭）的调用</td>\n</tr>\n<tr>\n<td>fireChannelRead</td>\n<td>触发对下一个ChannelInboundHandler 上的channelRead()方法（已接收的消息）的调用</td>\n</tr>\n<tr>\n<td>fireChannelReadComplete</td>\n<td>触发对下一个ChannelInboundHandler上的channelReadComplete()方法的调用</td>\n</tr>\n<tr>\n<td>fireChannelRegistered</td>\n<td>触发对下一个ChannelInboundHandler上的fireChannelRegistered()方法的调用</td>\n</tr>\n<tr>\n<td>fireChannelUnregistered</td>\n<td>触发对下一个ChannelInboundHandler上的fireChannelUnregistered()方法的调用</td>\n</tr>\n<tr>\n<td>fireChannelWritabilityChanged</td>\n<td>触发对下一个ChannelInboundHandler上的fireChannelWritabilityChanged()方法的调用</td>\n</tr>\n<tr>\n<td>fireExceptionCaught</td>\n<td>触发对下一个ChannelInboundHandler上的fireExceptionCaught(Throwable)方法的调用</td>\n</tr>\n<tr>\n<td>fireUserEventTriggered</td>\n<td>触发对下一个ChannelInboundHandler上的fireUserEventTriggered(Object evt)方法的调用</td>\n</tr>\n<tr>\n<td>handler</td>\n<td>返回绑定到这个实例的ChannelHandler</td>\n</tr>\n<tr>\n<td>isRemoved</td>\n<td>如果所关联的ChannelHandler已经被从ChannelPipeline中移除则返回true</td>\n</tr>\n<tr>\n<td>name</td>\n<td>返回这个实例的唯一名称</td>\n</tr>\n<tr>\n<td>pipeline</td>\n<td>返回这个实例所关联的ChannelPipeline</td>\n</tr>\n<tr>\n<td>read</td>\n<td>将数据从Channel读取到第一个入站缓冲区；如果读取成功则触发一个channelRead事件，并（在最后一个消息被读取完成后） 通知ChannelInboundHandler的channelReadComplete (ChannelHandlerContext)方法</td>\n</tr>\n<tr>\n<td>write</td>\n<td>通过这个实例写入消息并经过ChannelPipeline</td>\n</tr>\n<tr>\n<td>writeAndFlush</td>\n<td>通过这个实例写入并冲刷消息并经过ChannelPipeline</td>\n</tr>\n</tbody></table>\n<h2 id=\"EventLoop\"><a href=\"#EventLoop\" class=\"headerlink\" title=\"EventLoop\"></a>EventLoop</h2><p>EventLoop定义了Netty的核心抽象，用于处理连接的生命周期中所发生的事件。</p>\n<h3 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h3><p>基本思想: 运行任务来处理在连接的生命周期内发生的事件是任何网络框架的基本功能, 与之相应的编程上的构造通常被称为事件循环。</p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-event-circle-idea.png\" alt=\"在事件循环中执行任务\"></p>\n<h3 id=\"组件间的联系\"><a href=\"#组件间的联系\" class=\"headerlink\" title=\"组件间的联系\"></a>组件间的联系</h3><p><strong>Channel、EventLoop、Thread以及EventLoopGroup之间的关系</strong></p>\n<ul>\n<li><p>一个EventLoopGroup包含一个或者多个EventLoop</p>\n</li>\n<li><p>一个EventLoop在它的生命周期内只和一个Thread绑定</p>\n</li>\n<li><p>所有由EventLoop处理的I&#x2F;O事件都将在它专有的Thread上被处理</p>\n</li>\n<li><p>一个Channel在它的生命周期内只注册于一个EventLoop</p>\n</li>\n<li><p>一个 EventLoop可能会被分配给一个或多个Channel</p>\n</li>\n</ul>\n<p>在这种设计中，一个给定Channel的I&#x2F;O操作都是由同一个Thread执行的，实际上消除了对于同步的需要。</p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-channel-eventloop-eventloopgroup-relation.png\" alt=\"Channel、EventLoop、Thread 以及 EventLoopGroup\"></p>\n<h3 id=\"类层次结构\"><a href=\"#类层次结构\" class=\"headerlink\" title=\"类层次结构\"></a>类层次结构</h3><p>EventLoop接口是协同设计的一部分，它采用了两个基本的 API：并发和网络编程。</p>\n<ul>\n<li><p>io.netty.util.concurrent包构建在 JDK的java.util.concurrent包上进行扩展</p>\n</li>\n<li><p>io.netty.channel包中的类，为了与Channel的事件进行交互。</p>\n</li>\n</ul>\n<p>在这个模型中，一个EventLoop将由一个永远都不会改变的Thread驱动，同时任务可以直接提交给EventLoop以立即执行或者调度执行。</p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-eventloop-layer.png\" alt=\"EventLoop的类层次结构\"></p>\n<h3 id=\"执行逻辑\"><a href=\"#执行逻辑\" class=\"headerlink\" title=\"执行逻辑\"></a>执行逻辑</h3><p>Netty线程模型的卓越性能取决于对于当前执行的Thread的身份的确定。</p>\n<p>如果当前调用线程正是支撑EventLoop的线程，那么所提交的代码块将会被直接执行。否则，EventLoop将把任务放入到内部队列中，以便稍后调度执行。</p>\n<blockquote>\n<p>事件&#x2F;任务的执行顺序</p>\n<p>事件&#x2F;任务的执行顺序事件和任务是以先进先出的顺序执行的。</p>\n<p>这样可以通过保证字节内容总是按正确的顺序被处理，消除潜在的数据损坏的可能性。</p>\n</blockquote>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-eventloop-process-logic.png\" alt=\"EventLoop的执行逻辑\"></p>\n<h2 id=\"BootStrap\"><a href=\"#BootStrap\" class=\"headerlink\" title=\"BootStrap\"></a>BootStrap</h2><p>有两种类型的引导：一种用于客户端的Bootstrap，而另一种用于服务器的ServerBootstrap</p>\n<p>无论应用程序使用哪种协议或者处理哪种类型的数据， 唯一决定它使用哪种引导类的是它是作为一个客户端还是作为一个服务器。</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>Bootstrap</th>\n<th>ServerBootstrap</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>网络编程中的作用</td>\n<td>连接到远程主机和端口</td>\n<td>绑定到一个本地端口</td>\n</tr>\n<tr>\n<td>EventLoopGroup的数目</td>\n<td>1</td>\n<td><strong>2</strong></td>\n</tr>\n</tbody></table>\n<p>ServerBootstrap需要两个EventLoopGroup，因为服务器需要两组不同的Channel。</p>\n<p>第一组将只包含一个 ServerChannel，代表服务器自身的已绑定到某个本地端口的正在监听的套接字。</p>\n<p>而第二组将包含所有已创建的用来处理传入客户端连接的Channel</p>\n<p><img src=\"/flame/images/java/java-middleware/netty/java-netty-server-two-bootstrapgroup.png\" alt=\"具有两个EventLoopGroup的服务器的引导过程\"></p>\n","categories":["java","netty"],"tags":["java","socket","netty"]},{"title":"网络编程框架-Netty原理","url":"/flame/2021/11/07/java/java-middleware/netty/java-middleware-netty-principle/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Netty是一款<strong>异步</strong>的<strong>事件驱动</strong>的<strong>网络应用程序框架</strong>，本文进行Netty原理的梳理。</p>\n<p>前置文章: </p>\n<ul>\n<li><a href=\"/flame/2021/10/30/java/java-middleware/netty/java-middleware-netty-components/\" title=\"&lt;strong&gt;Netty的组件&lt;&#x2F;strong&gt;\"><strong>Netty的组件</strong></a></li>\n<li><a href=\"/flame/2021/10/23/java/java-nio-socket/\" title=\"&lt;strong&gt;Java NIO&lt;&#x2F;strong&gt;\"><strong>Java NIO</strong></a></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"Todo-amp-amp-DONE\"><a href=\"#Todo-amp-amp-DONE\" class=\"headerlink\" title=\"Todo &amp;&amp; DONE\"></a>Todo &amp;&amp; DONE</h2><p>DONE:  server端启动  —&gt; 把各个组件连贯起来</p>\n<p>TODO:  ChannelPipeline和ChannelHandler的基本结构和原理</p>\n<p>TODO:  EventLoop的基本结构和原理</p>\n<p>TODO:  Channel的基本结构和原理</p>\n<p>TODO:  建立链接，接受消息，关闭链接 等流程的时序图</p>\n<h2 id=\"Server端启动流程的分析\"><a href=\"#Server端启动流程的分析\" class=\"headerlink\" title=\"Server端启动流程的分析\"></a>Server端启动流程的分析</h2><h3 id=\"样例\"><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Configure the server.</span><br><span class=\"line\"> EventLoopGroup bossGroup = new NioEventLoopGroup(1);</span><br><span class=\"line\"> EventLoopGroup workerGroup = new NioEventLoopGroup();</span><br><span class=\"line\"> final EchoServerHandler serverHandler = new EchoServerHandler();</span><br><span class=\"line\"> try &#123;</span><br><span class=\"line\">     ServerBootstrap b = new ServerBootstrap();        </span><br><span class=\"line\">     b.group(bossGroup, workerGroup)                  </span><br><span class=\"line\">             .channel(NioServerSocketChannel.class)    </span><br><span class=\"line\">             .option(ChannelOption.SO_BACKLOG, 100)</span><br><span class=\"line\">             .handler(new LoggingHandler(LogLevel.INFO))</span><br><span class=\"line\">             .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                 @Override</span><br><span class=\"line\">                 public void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class=\"line\">                     ChannelPipeline p = ch.pipeline();</span><br><span class=\"line\">                     p.addLast(new LoggingHandler(LogLevel.INFO));</span><br><span class=\"line\">                     p.addLast(serverHandler);</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">     // Start the server.</span><br><span class=\"line\">     ChannelFuture f = b.bind(PORT).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">     // Wait until the server socket is closed.</span><br><span class=\"line\">     f.channel().closeFuture().sync();</span><br><span class=\"line\"> &#125; finally &#123;</span><br><span class=\"line\">     // Shut down all event loops to terminate all threads.</span><br><span class=\"line\">     bossGroup.shutdownGracefully();</span><br><span class=\"line\">     workerGroup.shutdownGracefully();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p><img src=\"/flame/images/java/java-middleware/netty/netty-principle/netty-serverbootstrap-fields.png\" alt=\"ServerBootstrap\"></p>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p><img src=\"/flame/images/java/java-middleware/netty/netty-principle/netty-server-bootstrap-sequence-diagram.png\" alt=\"server的启动时序图\"></p>\n<p>步骤1: 创建ServerBootstrap实例。</p>\n<p>步骤2: 设置并绑定Reactor线程池。</p>\n<p>步骤3: 设置并绑定服务端Channel。</p>\n<p>步骤4: 链路建立时创建并初始化ChannelPipeline。</p>\n<p>步骤5: 初始化ChannelPipeline之后，添加并设置ChannelHandler。</p>\n<p>步骤6: 绑定并启动监听端口。</p>\n<p>步骤7: Selector轮询。由Reactor线程NioEventLoop负责调度和执行Selector轮询操作，选择准备就绪的Channel集合。</p>\n<p>步骤8: 当轮询到准备就绪的Channel之后，就由Reactor线程NioEventLoop执行ChannelPipeline的相应方法。</p>\n<p>步骤9: 执行Netty系统ChannelHandler和用户添加定制的ChannelHander。ChannelPipe根据网络事件的类型，调度并执行ChannelHandler。</p>\n<h3 id=\"启动过程的整体流程\"><a href=\"#启动过程的整体流程\" class=\"headerlink\" title=\"启动过程的整体流程\"></a>启动过程的整体流程</h3><p>启动过程中，EventLoopGroup、NioEventLoop、NioServerSocketChannel、ChannelPipeline各个组件交互，</p>\n<p>通过源码分析出概貌，如下图所示（在浏览器新标签页打开图片放大查看）</p>\n<p><img src=\"/flame/images/java/java-middleware/netty/netty-server-bootstrap-process-steps.png\" alt=\"server端的启动过程\"></p>\n<h2 id=\"ChannelPipeline的分析\"><a href=\"#ChannelPipeline的分析\" class=\"headerlink\" title=\"ChannelPipeline的分析\"></a>ChannelPipeline的分析</h2><h2 id=\"NioEventLoop的分析\"><a href=\"#NioEventLoop的分析\" class=\"headerlink\" title=\"NioEventLoop的分析\"></a>NioEventLoop的分析</h2><h2 id=\"NioServerSocketChannel的分析\"><a href=\"#NioServerSocketChannel的分析\" class=\"headerlink\" title=\"NioServerSocketChannel的分析\"></a>NioServerSocketChannel的分析</h2>","categories":["java","netty"],"tags":["java","socket","netty"]}]